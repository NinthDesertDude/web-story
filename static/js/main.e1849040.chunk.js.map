{"version":3,"sources":["common/styles/controlStyles.ts","parse-story/storyInterpreter.tsx","common/random.ts","parse-expressions/Associativity.ts","parse-expressions/Placements.ts","parse-expressions/TokenOp.ts","parse-expressions/TokenSym.ts","parse-expressions/Parser.ts","common/redux/reduxTools.ts","gui/editor/viewedit.actions.ts","gui/welcome/Welcome.tsx","gui/editor/EditorView.tsx","parse-story/storyParseNode.ts","parse-story/storyParser.ts","gui/runner/RunnerView.tsx","gui/runner-editor/RunnerEditorView.tsx","common/settings/settings.actions.ts","common/storage/persistence.actions.ts","common/settings/settings.reducers.ts","gui/menu/MenuBarDropdown.tsx","gui/menu/CommonMenuItems.tsx","gui/runner-settings-page/RunnerSettingsMenuItems.ts","gui/menu/MenuBar.tsx","gui/editor/EditorMenuItems.ts","gui/editor-settings-page/EditorSettingsMenuItems.ts","gui/runner/RunnerMenuItems.ts","gui/runner-settings-page/playerStorySettings.actions.ts","common/storage/LocalStorageSaveHandler.tsx","gui/runner-editor/FontSizeControl.tsx","gui/runner-settings-page/playerStorySettings.reducers.ts","gui/runner-settings-page/runnerSettings.actions.ts","gui/runner-settings-page/runnerSettings.reducers.ts","gui/runner-editor/FontStyleControl.tsx","gui/runner-editor/ColorPickerControl.tsx","gui/runner-settings-page/RunnerSettings.tsx","gui/editor-settings-page/EditorSettings.tsx","common/storage/persistence.reducers.ts","common/routing/Routing.tsx","gui/OpenFileHandler.tsx","common/commands/CommandHandler.tsx","store.ts","index.tsx","common/commands/shortcutManager.ts","parse-expressions/TokenBool.ts","common/localization/Localization.ts","common/identifiers.ts","common/themes.ts","parse-expressions/TokenId.ts","parse-expressions/TokenFunc.ts","gui/editor/viewedit.reducers.ts","common/styles/interpreterStyles.ts","parse-expressions/utils.ts","parse-expressions/TokenNum.ts","common/localization/LocalizedStrings.ts","gui/editor-settings-page/currentRunnerSettings.actions.ts","gui/editor-settings-page/currentRunnerSettings.reducers.ts","gui/editor-settings-page/authorStorySettings.actions.ts","gui/editor-settings-page/authorStorySettings.reducers.ts"],"names":["commandBarDropdownButtonStyle","root","alignSelf","commandBarDropdownSeparatorStyle","theme","borderColor","semanticColors","menuDivider","borderRightStyle","borderWidth","commandBarDropdownStyle","propStyles","caretDownWrapper","mergeStyles","position","right","width","dropdown","display","height","dropdownItem","fonts","large","dropdownItemSelected","title","border","borderRadius","alignItems","commandBarItemStyle","itemsOnRight","paddingLeft","paddingRight","commandBarStyle","padding","primarySet","secondarySet","editorTextAreaStyle","backgroundColor","bodyStandoutBackground","borderStyle","boxSizing","color","bodyText","resize","fallbackFontStack","hiddenAndInaccessible","iconSpaceBeforeTextStyle","marginRight","mainViewEditorStyle","margin","mainViewRunnerStyle","mainViewWrapperStyle","runnerOutputWrapperStyle","flexGrow","overflowY","paddingTop","runnerWrapperStyle","flexDirection","welcomeButtonStyle","random","uniqueKeyCounter","Number","MIN_SAFE_INTEGER","whitespaceRegex","colorRegex","singleDigitRegex","escapeBraceRegex","escapeNoBraceRegex","exprParser","Parser","StoryInterpreterC","props","actions","content","contentCached","currentOptionStyles","currentOptionHighlightStyles","currentOutputStyles","entries","errorMessage","fork","log","logCached","options","optionsCached","stopEvaluation","textboxHidden","timers","variables","variablesPrev","getRestartLink","combinedProps","addOption","authorStorySettings","authorStoryStrings","restartLinkText","strings","RunnerRestart","restartGame","idRunnerOptionRestart","onTextboxKeyPress","ev","charCode","forEach","action","currentTarget","value","refreshInterpreter","entriesKeys","Object","keys","setFork","nextProps","newProps","authorStoryRunnerOptions","randomSeed","seed","Random","this","map","node","text","fromOption","prefix","inputOptionPrefixText","inputTextboxPrefixText","console","JSON","stringify","getTextStyle","debugging","playerStorySettings","playerStoryInputStyles","authorStoryInputStyles","fallbackElementType","input","style","idRunnerInputElement","forkNameOrAction","key","inline","assign","linkAction","hideLog","logLimit","push","addInput","styleOptions","playerStoryOptionStyles","authorStoryOptionStyles","option","styleOptionsHighlight","playerStoryOptionHighlightStyles","authorStoryOptionHighlightStyles","optionHighlight","onClick","styles","fontSize","marginBottom","marginTop","marginLeft","rootFocused","rootHovered","label","idRunnerOptionElement","styleOutput","playerStoryOutputStyles","authorStoryOutputStyles","output","idRunnerOutputElement","tree","updateLog","ref","clearTimeout","undefined","variablesKeys","i","length","preorderProcess","visitFork","refreshInterpreterGui","setErrorMessage","lines","split","line","words","j","trim","startsWith","dispatchSetTempStoryRunnerOptions","currentStorySettings","currentRunnerOptions","discreteInlineLinks","hideRestartLink","test","substring","colorDark","colorLight","dispatchSetAuthorStoryRunnerStyles","background","authorStoryRunnerStyles","type","numberRegex","number","parseFloat","toString","font","refreshInterpreterGuiStyles","dispatchRerenderStory","restartOption","allOutput","id","idRunnerLog","idRunnerContent","idRunnerOptions","messageBarType","MessageBarType","error","textbox","autoComplete","name","idRunnerInputfield","onKeyPress","className","forkToLoad","includes","forkName","loadFork","matchBraces","replace","str","textboxText","processIf","processText","children","condition","isNaN","isFinite","global","setTimeout","query","escapeText","toLowerCase","queryWords","containsWord","RegExp","endsWith","cleanedText","matches","optIncludeUnknowns","resetTokens","varValue","addIdentifier","TokenId","varName","varVal","addFunction","TokenFunc","tokens","TokenBool","result","eval","join","e","Error","message","textLeft","endOfLine","indexOf","displayName","indexOfAt","lbPos","rbPos","styleItalic","styleBold","addOutput","TokenNum","n0","nextNumber","exprTwoSidedIndex","lhs","slice","rhs","resultVal","getTokens","some","o","strForm","lhsBool","tok","runner","document","getElementById","idRunnerWrapper","playerStoryRunnerStyles","themeType","ThemeTypes","Light","bodyBackground","React","StoryInterpreter","connect","state","currentRunnerSettings","renderTrigger","viewEdit","storyRerenderToken","getStrings","settings","locale","dispatch","forwardRef","mt","Array","N","mti","Date","getTime","init_genrand","s","s2","y","mag01","MATRIX_A","kk","M","UPPER_MASK","LOWER_MASK","range","_nextInt32","associativity","placements","TokenOp","opPlacement","precedence","format","operation","placement","assoc","prec","numArgs","function","both","obj","TokenSym","optRequireRightPars","optUnknownDefault","Fsin","operands","Math","sin","Fcos","cos","Ftan","tan","Frnd","round","Frnd2","n1","Add","left","Sub","Mlt","Div","Mod","Neg","Exp","pow","Fac","givenVal","Eq","NotEq","Gt","Gte","Lt","Lte","LogNot","LogAnd","LogOr","varFalse","varTrue","varPi","PI","lPar","rPar","argSep","evalNoPar","subExpression","func","operators","filter","subExpressionStr","args","argVals","subResult","immediateResult","opTokens","maxPrecedence","isRightAssociative","opToken","splice","maxPrecedence2","token","sort","a","b","expression","evalTokens","tokenize","tokensList","tokId","functions","rbrPos","subExpressionEnd","lbrPos","lastIndexOf","subExpressionBegin","expressionLHS","expressionRHS","subExpressionFunc","tokFunc","find","f","equals","list","delimiter","lists","currentList","longestMatch","shortestMatch","candidateBeforeDefer","val","combinedTokens","unknownTokenName","uniqueActionType","getActionGuid","newStory","rerenderStory","saveAndRunStory","updateStory","story","WelcomeC","onClickPlayProject","invokeCommand","commandIds","openProjectOrGame","data","history","routes","play","onClickEditProject","edit","onClickNew","newProject","buttonStyle","alignContent","justifyContent","DefaultButton","WelcomeButtonOpenPlay","WelcomeButtonOpenEdit","WelcomeButtonNew","Welcome","withRouter","EditorViewC","runStory","currentStory","idEditorInputfield","setStory","prevProps","textArea","defaultValue","onBlur","PrimaryButton","EditorPlay","EditorView","dispatchSaveAndRunStory","dispatchSetStory","StoryParseNode","parent","doubleSlashRegex","ifRegex","endIfRegex","isOption","index","startOfLine","isOutput","beforeSubstring","bracketOpenPos","RunnerViewC","interpreterRef","setInterpreterRef","parse","interpreter","parsed","entryPositions","newlineSplitStory","setEntries","header","processHeaderOptions","entryName","entryList","entry","isFinished","match","exec","pos","depth","ifMatches","endIfMatches","ifs","endifs","allMatches","item1","item2","elemBegin","elemType","cond","prevIfBegin","prevIfCond","k","prevEndIfBegin","prevEndIfCond","prevElemBegin","prevElemCond","textNode","prevElemEnd","newChild","lastElemBegin","lastCondLength","setEntriesWithFork","parseStory","storyToParseOverride","storyToParse","ex","RunnerView","storyReparseToken","RunnerEditorViewC","idEditorWrapper","RunnerEditorView","setLocale","setTheme","localeId","setCustomizationApplied","setFromLocalStorage","setUserConsentProvided","dispatchSetTheme","supportedTheme","dispatchSetLocale","combineReducers","getSupportedLocale","typedAction","persistence","persistentState","locales","supportedLocales","themes","Themes","Default","body","loadTheme","typedTheme","CommandBarDropdownC","stylesTyped","Dropdown","dropdownWidth","CommandBarDropdown","getLocaleDropdownOptionKey","getThemeDropdownOptionKey","themeName","MenuBarC","items","values","farItems","ariaLabel","TipTheme","onRender","themeKey","localizedName","defaultSelectedKey","onRenderTitle","wholeTheme","ThemeDropdownText","onChange","_","buttonStyles","TipLanguage","localizedStrings","localeOption","LanguageCodeName","Icon","iconName","isOnPage","editorItems","MenuFileNew","iconProps","MenuFileOpen","saveProjectOrGame","MenuFileSave","iconOnly","editSettings","tooltipHostProps","MenuPrefEditorSettings","MenuFileSwitchToPlay","switchMode","getEditorCommandItems","MenuBack","getEditorSettingsCommandItems","runnerItems","playSettings","MenuPrefRunnerSettings","MenuFileSwitchToEdit","getRunnerCommandItems","getRunnerSettingsCommandItems","CommandBar","TipNavigateCommandBar","MenuBar","reduxState","userConsentProvided","getTheme","setPlayerStoryInputStyles","setPlayerStoryLogSeparatorStyles","setPlayerStoryOptionStyles","setPlayerStoryOptionHighlightStyles","setPlayerStoryOutputStyles","setPlayerStoryRunnerOptions","setPlayerStoryRunnerStyles","persistStateIdentifier","validateLoadedFontSize","replaceAll","num","cleanLoadedTextStyle","colorHighlightDark","colorHighlightLight","styleStrikethrough","styleUnderline","FontSizeControlAction","LocalStorageSaveHandlerC","newState","saveFormatVersion","themeId","localStorage","setItem","saveToLocalStorage","Component","LocalStorageSaveHandler","dispatchSetPlayerStoryInputStyles","dispatchSetPlayerStoryOptionStyles","dispatchSetPlayerStoryOptionHighlightStyles","dispatchSetPlayerStoryOutputStyles","dispatchSetPlayerStoryRunnerOptions","playerStoryLogSeparatorStyles","playerStoryRunnerOptions","openColorPicker","closeColorPicker","dispatchOpenColorPicker","forStyle","dispatchCloseColorPicker","runnerSettings","colorPickerOpenId","fontTypeRegex","fontSizeUnits","fontSizeObjects","default","max","min","step","StyleType","FontSizeControlC","fontSizeChanged","fontSizeUnit","chosenStyle","fontSizeValue","parseInt","SettingsControlFontSizeSpinButtonUnset","TextEdited","chosenDispatchCall","Increment","Decrement","fontUnitChanged","fontSizeOrigValue","maxWidth","SpinButton","SettingsControlFontSizeSpinButtonAria","decrementButtonAriaLabel","SettingsControlFontSizeSpinButtonDecrAria","incrementButtonAriaLabel","SettingsControlFontSizeSpinButtonIncrAria","SettingsControlFontSizeSpinButtonLabel","labelPosition","Position","top","onDecrement","onIncrement","onValidate","aria-label","SettingsControlFontSizeDropdownLabel","SettingsControlFontSizeDropdownRemsLabel","SettingsControlFontSizeDropdownRemsTitle","SettingsControlFontSizeDropdownPixelsLabel","SettingsControlFontSizeDropdownPixelsTitle","selectedKey","FontSizeControl","dispatchInputStyles","dispatchOptionHighlightStyles","dispatchOptionStyles","dispatchOutputStyles","ColorPickerControlC","updateKey","update","textStyleObj","target","onSwatchClicked","buttonBorder","spacing","Label","SettingsTextStyleLightColor","placeholder","SettingsTextStyleColorUnset","SettingsTextStyleDarkColor","SettingsTextStyleHighlightLightColor","SettingsTextStyleHighlightDarkColor","ColorPickerControl","FontStyleControlC","getValue","formatDisplayText","SettingsControlFontStyleSliderOff","SettingsControlFontStyleSliderOn","SettingsControlFontStyleSliderUnset","fontStyleChanged","styleType","booleanValue","Bold","Italic","Strikethrough","Underline","Slider","SettingsControlFontStyleItalic","titleLabel","small","valueFormat","SettingsControlFontStyleBold","SettingsControlFontStyleUnderline","SettingsControlFontStyleStrikethrough","FontStyleControl","RunnerSettingsC","renderColorPicker","ColorPicker","alphaType","cssColor","blue","SettingsControlColorPickerBlue","green","SettingsControlColorPickerGreen","hex","SettingsControlColorPickerHex","hueAriaLabel","SettingsControlColorPickerHue","red","SettingsControlColorPickerRed","rootAriaLabelFormat","SettingsControlColorPickerSelectedColor","svAriaDescription","SettingsControlColorPickerSvDescription","svAriaLabel","SettingsControlColorPickerSvAria","svAriaValueFormat","SettingsControlColorPickerSelectedSv","table","SettingsTitle","SettingsDescription","SettingsRunnerOutputStyles","SettingsRunnerOptionStyles","SettingsRunnerOptionHighlightStyles","SettingsRunnerInputStyles","SettingsLivePreview","SettingsLivePreviewStory","RunnerSettings","dispatchRunnerOptions","EditorSettingsC","EditorSettings","dispatchSetFromLocalStorage","customizationApplied","isApplied","consentProvided","base","route","window","location","hash","isPlayMode","isEditMode","onLoadedCallback","RoutingC","applyStorage","loadedState","getItem","loadFromLocalStorage","OpenFileHandler","CommandHandler","path","exact","component","Routing","hiddenInputRef","OpenFileHandlerC","handleFile","chosenFiles","files","fileReader","FileReader","onloadend","onabort","Blob","readAsText","reRenderStory","rootReducer","store","createStore","applyMiddleware","thunk","commands","functionsToInvoke","guid","shortcuts","originalSequence","usesShift","Id","enableWhileTyping","activeElement","nodeName","getAttribute","CommandHandlerC","actionSwitchMode","afterLoadedCallback","current","click","invokeOpenCommand","callback","alert","actionNewProject","actionOpenProjectOrGame","actionSaveProjectOrGame","initializeIcons","commandKeys","commandsWithMatchProgress","shortcut","addEventListener","commandProgress","progress","disabled","sequence","customSequence","toUpperCase","Boolean","usesAlt","altKey","usesCtrl","ctrlKey","shiftKey","listenForShortcuts","ReactDOM","render","defaultLocale","navigator","languages","langParts","language","region","ContrastDark","ThemeContrastDark","Dark","createTheme","palette","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","white","ContrastLight","ThemeContrastLight","DeepSea","ThemeDeepSea","ThemeDefault","Dim","ThemeDim","EarthAndSky","ThemeEarthAndSky","Midnight","ThemeMidnight","Muted","ThemeMuted","Slate","ThemeSlate","numberOfArgs","playerStyle","storyStyle","authorStyle","fallback","fallbackStyle","errorText","fontFamily","fontStyle","fontWeight","textDecoration","blueDark","fallbackStyles","whiteSpace","ApplicationName","ApplicationNameAndVersion","appName","appVersion","MenuFile","clearAllTempSettings","setCurrentRunnerOptions","setAuthorStoryInputStyles","setAuthorStoryLogSeparatorStyles","setAuthorStoryOptionStyles","setAuthorStoryOptionHighlightStyles","setAuthorStoryOutputStyles","setAuthorStoryRunnerOptions","setAuthorStoryRunnerStyles","setAuthorStoryStrings","authorStoryLogSeparatorStyles"],"mappings":"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","file":"static/js/main.e1849040.chunk.js","sourcesContent":["import { IButtonStyles } from \"@fluentui/react/lib/components/Button/Button.types\";\nimport { IStyle, ITheme, mergeStyles } from \"@fluentui/react/lib/Styling\";\nimport { IDropdownStyles } from \"@fluentui/react/lib/components/Dropdown/Dropdown.types\";\nimport { ICommandBarStyles } from \"@fluentui/react/lib/components/CommandBar/CommandBar.types\";\nimport { IIconStyles } from \"@fluentui/react/lib/components/Icon/Icon.types\";\n\n/**\n * Returns a style for a dropdown in the command bar. If there are items to the right, renders a\n * thin border between.\n */\nexport const commandBarDropdownButtonStyle = (): IButtonStyles => {\n  return { root: { alignSelf: \"stretch\" } };\n};\n\n/**\n * Returns a style for a command bar dropdown that renders a border to the right of the item.\n */\nexport const commandBarDropdownSeparatorStyle = (theme: ITheme): Partial<IDropdownStyles> => {\n  return {\n    root: {\n      borderColor: theme.semanticColors.menuDivider,\n      borderRightStyle: \"solid\",\n      borderWidth: \"1px\",\n    },\n  };\n};\n\n/** Returns a style for a dropdown in the command bar. */\nexport const commandBarDropdownStyle = (theme: ITheme, propStyles: IDropdownStyles): Partial<IDropdownStyles> => {\n  return {\n    caretDownWrapper: mergeStyles(\n      { alignSelf: \"center\", position: \"relative\", right: \"20px\", width: \"0px\" },\n      propStyles?.caretDownWrapper\n    ),\n    dropdown: mergeStyles(\n      {\n        display: \"flex\",\n        height: \"100%\",\n      },\n      propStyles?.dropdown\n    ),\n    dropdownItem: mergeStyles({ ...theme.fonts.large }, propStyles?.dropdownItem),\n    dropdownItemSelected: mergeStyles({ ...theme.fonts.large }, propStyles?.dropdownItemSelected),\n    root: mergeStyles({ alignSelf: \"stretch\" }, propStyles?.root),\n    title: mergeStyles(\n      {\n        height: \"100%\",\n        border: \"0\",\n        borderRadius: \"unset\",\n        display: \"flex\",\n        alignItems: \"center\",\n      },\n      propStyles?.title\n    ),\n  };\n};\n\n/**\n * Returns a style for a command bar item definition that increase button space. If there are\n * items to the right, renders a thin border between.\n */\nexport const commandBarItemStyle = (theme: ITheme, itemsOnRight?: boolean): string => {\n  if (itemsOnRight) {\n    return mergeStyles(theme.fonts.large, {\n      paddingLeft: \"12px\",\n      paddingRight: \"12px\",\n      borderColor: theme.semanticColors.menuDivider,\n      borderRightStyle: \"solid\",\n      borderWidth: \"1px\",\n    });\n  }\n\n  return mergeStyles(theme.fonts.large, {\n    paddingLeft: \"12px\",\n    paddingRight: \"12px\",\n  });\n};\n\n/**\n * Returns a style for a command bar that tries to maximize the size of the items within it, for a\n * simplified appearance that is more mobile-friendly than the default style. Items within the\n * command bar should be styled to fill the command bar vertically, and take enough space to be\n * easy to interact with.\n */\nexport const commandBarStyle: ICommandBarStyles = {\n  root: {\n    alignItems: \"center\",\n    height: \"4vh\",\n    padding: \"0px\",\n  },\n  primarySet: {\n    alignSelf: \"stretch\",\n  },\n  secondarySet: {\n    alignSelf: \"stretch\",\n  },\n};\n\n/** Returns a style for the editor text area component. */\nexport const editorTextAreaStyle = (theme: ITheme): React.CSSProperties => {\n  return {\n    backgroundColor: theme.semanticColors.bodyStandoutBackground,\n    borderStyle: \"solid\",\n    borderWidth: \"1px\",\n    boxSizing: \"border-box\",\n    color: theme.semanticColors.bodyText,\n    height: \"90vh\",\n    padding: \"0.25vh 0.25vw 0.25vh 0.25vw\",\n    resize: \"none\",\n    width: \"100%\",\n  };\n};\n\n/** Fonts to use in case other fonts are not available. */\nexport const fallbackFontStack = \"Calibri, Times New Roman, Courier New, sans-serif\";\n\n/** Display none. */\nexport const hiddenAndInaccessible = mergeStyles({\n  display: \"none\",\n});\n\n/** Separates an icon from text that follows it.  */\nexport const iconSpaceBeforeTextStyle: IIconStyles = {\n  root: {\n    marginRight: \"8px\",\n  },\n};\n\n/** Sets up the div containing the editor textarea. */\nexport const mainViewEditorStyle = mergeStyles({\n  boxSizing: \"border-box\",\n  height: \"90vh\",\n  margin: \"0 0.25vw 0 0\",\n  width: \"49.75vw\",\n});\n\n/** Styles the runner to give it a border and make overflowing generated content scroll. */\nexport const mainViewRunnerStyle = (theme: ITheme): IStyle => {\n  return {\n    borderColor: theme.semanticColors.menuDivider,\n    borderStyle: \"solid\",\n    borderWidth: \"1px\",\n    boxSizing: \"border-box\",\n    height: \"90vh\",\n    margin: \"0 0 0 0.25vw\",\n    width: \"49.75vw\",\n  };\n};\n\n/** Sets up the div containing the editor and runner so they stretch horizontally to full size. */\nexport const mainViewWrapperStyle = mergeStyles({ display: \"flex\", alignItems: \"stretch\", margin: \"4px\" });\n\n/** Styles the innermost div that contains all generated content in the runner. */\nexport const runnerOutputWrapperStyle = mergeStyles({\n  flexGrow: 1,\n  overflowY: \"auto\",\n  paddingLeft: \"0.5vw\",\n  paddingRight: \"0.5vw\",\n  paddingTop: \"0.5vw\",\n});\n\n/** Styles the div containing all controls associated to the runner so they display properly. */\nexport const runnerWrapperStyle = mergeStyles({ display: \"flex\", flexDirection: \"column\", height: \"90vh\" });\n\n/** Styles a main button on the welcome page. */\nexport const welcomeButtonStyle = (theme: ITheme): IButtonStyles => {\n  return {\n    root: [\n      theme.fonts.large,\n      {\n        margin: \"2rem\",\n        padding: \"2rem\",\n      },\n    ],\n  };\n};\n","import * as React from \"react\";\nimport { StoryParseNode } from \"./storyParseNode\";\nimport { IPageDictionary } from \"./storyParser\";\nimport {\n  idRunnerContent,\n  idRunnerInputfield,\n  idRunnerLog,\n  idRunnerOptions,\n  idRunnerOptionRestart,\n  idRunnerWrapper,\n  idRunnerInputElement,\n  idRunnerOutputElement,\n  idRunnerOptionElement,\n} from \"../common/identifiers\";\nimport { IRootState } from \"../store\";\nimport { connect } from \"react-redux\";\nimport { dispatchRerenderStory } from \"../gui/editor/viewedit.reducers\";\nimport { Dispatch } from \"redux\";\nimport { runnerWrapperStyle, runnerOutputWrapperStyle, fallbackFontStack } from \"../common/styles/controlStyles\";\nimport { ThemeTypes } from \"../common/themes\";\nimport { ActionButton } from \"@fluentui/react/lib/components/Button/ActionButton/ActionButton\";\nimport { MessageBarType } from \"@fluentui/react/lib/components/MessageBar/MessageBar.types\";\nimport { MessageBar } from \"@fluentui/react/lib/components/MessageBar/MessageBar\";\nimport { numberRegex } from \"../parse-expressions/utils\";\nimport { Parser } from \"../parse-expressions/Parser\";\nimport { TokenBool } from \"../parse-expressions/TokenBool\";\nimport { TokenFunc } from \"../parse-expressions/TokenFunc\";\nimport { TokenId } from \"../parse-expressions/TokenId\";\nimport { TokenNum } from \"../parse-expressions/TokenNum\";\nimport { ITextStyle } from \"../common/redux/typedefs\";\nimport { dispatchSetTempStoryRunnerOptions } from \"../gui/editor-settings-page/currentRunnerSettings.reducers\";\nimport { dispatchSetAuthorStoryRunnerStyles } from \"../gui/editor-settings-page/authorStorySettings.reducers\";\nimport { Random } from \"../common/random\";\nimport { fallbackElementType, getTextStyle } from \"../common/styles/interpreterStyles\";\nimport { TextField } from \"@fluentui/react/lib/components/TextField/TextField\";\nimport { getStrings } from \"../common/localization/Localization\";\n\n// TODO: localize strings in this file.\n\nlet uniqueKeyCounter = Number.MIN_SAFE_INTEGER;\n\nconst whitespaceRegex = /\\s+/gm;\nconst colorRegex = /^[0-9|a-f]+$/g;\nconst singleDigitRegex = /[0-9]/g;\nconst escapeBraceRegex = /\\\\at|\\\\lb|\\\\rb|\\\\n|\\\\s/g;\nconst escapeNoBraceRegex = /\\\\at|\\\\n|\\\\s/g;\n\n/** An expression parser used by the interpreter to resolve expressions for variable assignments. */\nconst exprParser = new Parser();\nlet random: Random | undefined;\n\n/** A dictionary of all variables in the current game. */\ninterface IVariables {\n  [key: string]: number | boolean | string;\n}\n\n/**\n * Returns an element that reads from the current state so it updates with theme changes. In being function-based, it's\n * only recomputed when the element is evaluated.\n */\ntype InterpreterNode = (props: CombinedProps) => JSX.Element;\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    authorStorySettings: state.authorStorySettings,\n    currentStorySettings: state.currentRunnerSettings,\n    playerStorySettings: state.playerStorySettings,\n    renderTrigger: state.viewEdit.storyRerenderToken, // Needed to re-render after output/input/options change.\n    strings: getStrings(state.settings.locale),\n    theme: state.settings.theme,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    dispatchRerenderStory: dispatchRerenderStory(dispatch),\n    dispatchSetAuthorStoryRunnerStyles: dispatchSetAuthorStoryRunnerStyles(dispatch),\n    dispatchSetTempStoryRunnerOptions: dispatchSetTempStoryRunnerOptions(dispatch),\n  };\n};\n\ntype StoryInterpreterOwnProps = {\n  debugging?: boolean;\n};\n\ntype CombinedProps = StoryInterpreterOwnProps &\n  ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nexport class StoryInterpreterC extends React.Component<StoryInterpreterOwnProps> {\n  /** Tracks actions so they can be removed when navigating other forks/files. */\n  private actions: ((text: string) => void)[] = [];\n\n  /** The content of the current page. */\n  private content: InterpreterNode[] = [];\n\n  /** The content of the current page after evaluating each item with current theme values. */\n  private contentCached: JSX.Element[] = [];\n\n  /** Story styling of options that are created. Styling precedence is player > story > author. */\n  private currentOptionStyles: ITextStyle = {};\n\n  /** Story styling of options when they are highlighted. Styling precedence is player > story > author. */\n  private currentOptionHighlightStyles: ITextStyle = {};\n\n  /** Story styling of output that gets created. Styling precedence is player > story > author. */\n  private currentOutputStyles: ITextStyle = {};\n\n  /** Stores all tree entries. */\n  private entries: IPageDictionary = {};\n\n  /** An optional error message that displays in a top banner when non-empty. */\n  private errorMessage = \"\";\n\n  /** Stores the current page by name. */\n  private fork = \"\";\n\n  /** Keeps a list of all previous content, if not disabled. */\n  private log: InterpreterNode[] = [];\n\n  /** Keeps a list of all previous content after evaluating each item with current theme values, if not disabled. */\n  private logCached: JSX.Element[] = [];\n\n  /** Hyperlink options to the next page. */\n  private options: InterpreterNode[] = [];\n\n  /** Hyperlink options to the next page, evaluated with current theme values. */\n  private optionsCached: JSX.Element[] = [];\n\n  /** Used to stop evaluation of the current fork entirely. */\n  private stopEvaluation = false;\n\n  /** Whether to display a textbox or not. It's displayed automatically when the user can enter text. */\n  private textboxHidden = true;\n\n  /** Tracked so they can be stopped when navigating other forks/files. */\n  private timers: NodeJS.Timeout[] = [];\n\n  /** Defines a place for generated variables to be stored and accessed. */\n  private variables: IVariables = {};\n\n  /** Stores a copy of all variables as they were just before visiting a new page. This is used when saving. */\n  private variablesPrev: IVariables = {};\n\n  /** The restart link for when a page is empty or the link is forcibly shown. */\n  private getRestartLink = () => {\n    const combinedProps = this.props as CombinedProps;\n\n    return this.addOption(\n      combinedProps.authorStorySettings.authorStoryStrings.restartLinkText || combinedProps.strings.RunnerRestart,\n      this.restartGame,\n      idRunnerOptionRestart\n    );\n  };\n\n  constructor(props: StoryInterpreterOwnProps) {\n    super(props);\n    this.refreshInterpreter();\n  }\n\n  public shouldComponentUpdate(nextProps: Readonly<StoryInterpreterOwnProps>) {\n    const newProps = nextProps as CombinedProps;\n\n    // Update random if necessary.\n    if (!random || newProps.authorStorySettings.authorStoryRunnerOptions.randomSeed !== random.seed) {\n      random = new Random(newProps.authorStorySettings.authorStoryRunnerOptions.randomSeed);\n    }\n\n    // Recompute cached versions of all components.\n    this.contentCached = this.content.map((node: InterpreterNode) => node(newProps));\n    this.logCached = this.log.map((node: InterpreterNode) => node(newProps));\n    this.optionsCached = this.options.map((node: InterpreterNode) => node(newProps));\n\n    return true;\n  }\n\n  /**\n   * Creates and returns a text element styled to represent the player's input. It's prefixed according to whether it\n   * was created from a hyperlink or by typing.\n   */\n  public addInput(text: string, fromOption?: true) {\n    return (props: CombinedProps) => {\n      const prefix = fromOption\n        ? props.authorStorySettings.authorStoryStrings.inputOptionPrefixText || \"• \"\n        : props.authorStorySettings.authorStoryStrings.inputTextboxPrefixText || \"→ \";\n\n      console.log(\n        JSON.stringify(\n          getTextStyle(\n            props.theme,\n            !props.debugging ? props.playerStorySettings.playerStoryInputStyles : {},\n            {}, // can't pass styles\n            props.authorStorySettings.authorStoryInputStyles,\n            fallbackElementType.input\n          )\n        )\n      );\n\n      return (\n        <p\n          key={`${idRunnerInputElement}-${uniqueKeyCounter++}`}\n          style={getTextStyle(\n            props.theme,\n            !props.debugging ? props.playerStorySettings.playerStoryInputStyles : {},\n            {}, // can't pass styles\n            props.authorStorySettings.authorStoryInputStyles,\n            fallbackElementType.input\n          )}\n        >\n          {prefix + text}\n        </p>\n      );\n    };\n  }\n\n  /**\n   * Creates and returns a hyperlink styled as an option. For forkNameOrAction, if a string is provided, it indicates\n   * the fork to go to. Passing a function can execute custom code instead.\n   */\n  public addOption(text: string, forkNameOrAction: string | (() => void), key?: string, inline?: true) {\n    const style = Object.assign({}, this.currentOptionStyles);\n\n    const combinedProps = this.props as CombinedProps;\n    const linkAction =\n      typeof forkNameOrAction === \"function\"\n        ? forkNameOrAction\n        : () => {\n            // When clicking the option, push player input to content if at least one item is logged.\n            if (\n              !combinedProps.authorStorySettings.authorStoryRunnerOptions.hideLog &&\n              (!combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit ||\n                combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit > 0)\n            ) {\n              this.content.push(this.addInput(text, true));\n            }\n\n            // Go to the fork (moves old content to logs as a side effect).\n            this.setFork(forkNameOrAction);\n          };\n\n    return (props: CombinedProps) => {\n      const styleOptions = getTextStyle(\n        props.theme,\n        !props.debugging ? props.playerStorySettings.playerStoryOptionStyles : {},\n        style,\n        props.authorStorySettings.authorStoryOptionStyles,\n        fallbackElementType.option\n      );\n\n      const styleOptionsHighlight = getTextStyle(\n        props.theme,\n        !props.debugging ? props.playerStorySettings.playerStoryOptionHighlightStyles : {},\n        style,\n        props.authorStorySettings.authorStoryOptionHighlightStyles,\n        fallbackElementType.optionHighlight\n      );\n\n      return (\n        <ActionButton\n          key={key || `${idRunnerOptionElement}-${uniqueKeyCounter++}`}\n          onClick={linkAction}\n          styles={{\n            root: {\n              ...(styleOptions as object),\n              border: \"none\",\n              display: inline ? \"inline\" : \"block\",\n              fontSize: \"16px\",\n              height: \"unset\",\n              marginBottom: inline ? \"0px\" : \"4px\",\n              marginTop: inline ? \"0px\" : \"4px\",\n              paddingLeft: \"0px\",\n              marginLeft: \"0px\",\n            },\n            rootFocused: { ...(styleOptionsHighlight as object) },\n            rootHovered: { ...(styleOptionsHighlight as object) },\n            label: {\n              marginLeft: \"0px\",\n            },\n          }}\n          text={text}\n        />\n      );\n    };\n  }\n\n  /** Creates and returns a text element styled as output text. */\n  public addOutput(text: string) {\n    const style = Object.assign({}, this.currentOutputStyles);\n\n    return (props: CombinedProps) => {\n      const styleOutput = getTextStyle(\n        props.theme,\n        !props.debugging ? props.playerStorySettings.playerStoryOutputStyles : {},\n        style,\n        props.authorStorySettings.authorStoryOutputStyles,\n        fallbackElementType.output\n      );\n\n      return (\n        <span key={`${idRunnerOutputElement}-${uniqueKeyCounter++}`} style={styleOutput}>\n          {text}\n        </span>\n      );\n    };\n  }\n\n  /** Loads the current progress from local storage if possible. */\n  public loadFile() {\n    // TODO: implement.\n  }\n\n  /** Loads an entry and pushes changes to the page, catching and displaying errors on the screen. */\n  public loadFork() {\n    this.updateLog();\n    this.content = [];\n    this.options = [];\n    this.textboxHidden = true;\n\n    // Clears all timers.\n    this.timers.forEach((ref: NodeJS.Timeout) => {\n      clearTimeout(ref);\n    });\n\n    this.timers = [];\n    this.actions = [];\n\n    // Sets up variables.\n    let tree: StoryParseNode | undefined;\n\n    // Gets the nodes to process, if possible.\n    tree = this.entries[this.fork];\n    if (tree === undefined) {\n      this.setErrorMessage(\"Interpreter: fork '\" + this.fork + \"' not found.\");\n      return;\n    }\n\n    // Records the previous state of all variables.\n    this.variablesPrev = {};\n    const variablesKeys = Object.keys(this.variables);\n\n    for (let i = 0; i < variablesKeys.length; i++) {\n      this.variablesPrev[variablesKeys[i]] = this.variables[variablesKeys[i]];\n    }\n\n    // Evaluates every node.\n    this.preorderProcess(tree, \"\");\n\n    // Exits if fork execution stops.\n    if (this.stopEvaluation) {\n      return;\n    }\n\n    // Ensures the fork is considered visited.\n    this.visitFork();\n    this.refreshInterpreterGui();\n  }\n\n  /** Parses a special set of options at the top of the file. */\n  public processHeaderOptions(text: string) {\n    const combinedProps = this.props as CombinedProps;\n\n    // Clears all old preferences.\n    this.refreshInterpreter();\n\n    let lines = text.split(\"\\n\");\n\n    for (let i = 0; i < lines.length; i++) {\n      // Gets the line and words on that line.\n      let line = lines[i];\n      let words = line.split(\" \");\n\n      // Gets all text after the option has been named.\n      let input = \"\";\n\n      for (let j = 1; j < words.length; j++) {\n        input += words[j] + \" \";\n      }\n\n      input = input.trim();\n\n      if (line.startsWith(\"link-style-text\")) {\n        combinedProps.dispatchSetTempStoryRunnerOptions({\n          ...combinedProps.currentStorySettings.currentRunnerOptions,\n          discreteInlineLinks: true,\n        });\n      } else if (line.startsWith(\"option-default-disable\")) {\n        combinedProps.dispatchSetTempStoryRunnerOptions({\n          ...combinedProps.currentStorySettings.currentRunnerOptions,\n          hideRestartLink: true,\n        });\n      } else if (\n        line.startsWith(\"option-color\") ||\n        line.startsWith(\"option-hover-color\") ||\n        line.startsWith(\"background-color\")\n      ) {\n        // Stores the color to be created.\n        let color = \"\";\n        if (!colorRegex.test(input)) {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              line +\n              \"', color must be given in hex format. It can only include numbers 1-9 and upper or lowercase a-f.\"\n          );\n        } else if (input.length !== 6 && input.length !== 3) {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              line +\n              \"', color must be given in hex format using 3 or 6 digits. For example, f00 or 8800f0.\"\n          );\n        } else if (input.length === 3 || input.length === 6) {\n          color = input.substring(0, input.length);\n        }\n\n        if (line.startsWith(\"option-color\")) {\n          this.currentOptionStyles.colorDark = color;\n          this.currentOptionStyles.colorLight = color;\n        } else if (line.startsWith(\"option-color-light\")) {\n          this.currentOptionStyles.colorLight = color;\n        } else if (line.startsWith(\"option-color-dark\")) {\n          this.currentOptionStyles.colorDark = color;\n        } else if (line.startsWith(\"option-hover-color\")) {\n          this.currentOptionHighlightStyles.colorDark = color;\n          this.currentOptionHighlightStyles.colorLight = color;\n        } else if (line.startsWith(\"option-hover-color-light\")) {\n          this.currentOptionHighlightStyles.colorLight = color;\n        } else if (line.startsWith(\"option-hover-color-dark\")) {\n          this.currentOptionHighlightStyles.colorDark = color;\n        } else if (line.startsWith(\"background-color\")) {\n          combinedProps.dispatchSetAuthorStoryRunnerStyles({\n            background: {\n              ...combinedProps.authorStorySettings.authorStoryRunnerStyles,\n              colorDark: color,\n              colorLight: color,\n              type: \"plain\",\n            },\n          });\n        } else if (line.startsWith(\"background-color-light\")) {\n          combinedProps.dispatchSetAuthorStoryRunnerStyles({\n            background: {\n              ...combinedProps.authorStorySettings.authorStoryRunnerStyles,\n              colorLight: color,\n              type: \"plain\",\n            },\n          });\n        } else if (line.startsWith(\"background-color-dark\")) {\n          combinedProps.dispatchSetAuthorStoryRunnerStyles({\n            background: {\n              ...combinedProps.authorStorySettings.authorStoryRunnerStyles,\n              colorDark: color,\n              type: \"plain\",\n            },\n          });\n        }\n      } else if (line.startsWith(\"output-font-size\") || line.startsWith(\"option-font-size\")) {\n        if (!numberRegex.test(input)) {\n          this.setErrorMessage(\"Interpreter: In line '\" + line + \"', a number must be specified after the option.\");\n          continue;\n        }\n\n        let number = parseFloat(input);\n\n        if (number <= 0) {\n          this.setErrorMessage(\"Interpreter: In line '\" + line + \"', numbers must be greater than zero.\");\n          continue;\n        }\n\n        if (line.startsWith(\"output-font-size\")) {\n          this.currentOutputStyles.fontSize = number.toString();\n        } else if (line.startsWith(\"option-font-size\")) {\n          this.currentOptionStyles.fontSize = number.toString();\n        }\n      } else if (line.startsWith(\"option-font\")) {\n        this.currentOptionStyles.font = `${input}; ${fallbackFontStack}`;\n      } else if (line.startsWith(\"output-font\")) {\n        this.currentOutputStyles.font = `${input}; ${fallbackFontStack}`;\n      }\n    }\n  }\n\n  /** Re-renders the interpreter and applies the chosen background color. */\n  public refreshInterpreterGui() {\n    this.refreshInterpreterGuiStyles();\n    (this.props as CombinedProps).dispatchRerenderStory();\n  }\n\n  /** Renders output. Conditionally renders logs, error message, and textbox. */\n  public render(): React.ReactNode {\n    this.refreshInterpreterGuiStyles();\n\n    const combinedProps = this.props as CombinedProps;\n\n    const restartOption =\n      this.options.length === 0 && !combinedProps.authorStorySettings.authorStoryRunnerOptions.hideRestartLink\n        ? [this.getRestartLink() as InterpreterNode]\n        : [];\n\n    const allOutput = [\n      <div key={idRunnerLog} id={idRunnerLog}>\n        {this.logCached}\n      </div>,\n      <div key={idRunnerContent} id={idRunnerContent}>\n        {this.contentCached}\n      </div>,\n      <div key={idRunnerOptions} id={idRunnerOptions} style={{ marginTop: \"24px\" }}>\n        {this.optionsCached}\n        {restartOption}\n      </div>,\n    ];\n\n    const errorMessage =\n      this.props.debugging && this.errorMessage !== \"\" ? (\n        <MessageBar messageBarType={MessageBarType.error}>{this.errorMessage}</MessageBar>\n      ) : undefined;\n\n    const textbox = !this.textboxHidden ? (\n      <TextField\n        autoComplete=\"nah\" // Required for browsers to not autocomplete with address.\n        name=\"textfield\" // Required for browsers to not autocomplete with prior entries.\n        id={idRunnerInputfield}\n        key={idRunnerInputfield}\n        onKeyPress={this.onTextboxKeyPress}\n        type=\"text\"\n      />\n    ) : undefined;\n\n    return (\n      <div className={runnerWrapperStyle}>\n        <div className={runnerOutputWrapperStyle}>{allOutput}</div>\n        {errorMessage}\n        {textbox}\n      </div>\n    );\n  }\n\n  /** Saves the current progress to local storage if possible. */\n  public saveFile() {\n    // TODO: implement.\n  }\n\n  /** For internal use. Sets the entries usually given by the parser. */\n  public setEntries(entries: IPageDictionary) {\n    this.entries = entries;\n  }\n\n  /** For internal use. Sets the entries usually given by the parser. If forkToLoad is an empty string, loads the first fork. */\n  public setEntriesWithFork(entries: IPageDictionary, forkToLoad: string) {\n    this.content = [];\n    this.log = [];\n    this.options = [];\n    this.entries = entries;\n    this.errorMessage = \"\";\n\n    const entriesKeys = Object.keys(this.entries);\n\n    if (entriesKeys.length === 0) {\n      this.setErrorMessage(\n        \"Interpreter: cannot play story. It contains no forks. Use @ at the beginning of a line to denote an fork.\"\n      );\n    } else {\n      if (forkToLoad !== \"\" && entriesKeys.includes(forkToLoad)) {\n        this.setFork(forkToLoad);\n      } else {\n        this.setFork(entriesKeys[0]);\n      }\n    }\n  }\n\n  /** Sets or clears an error message. */\n  public setErrorMessage(error: string | undefined) {\n    this.errorMessage = error ?? \"\";\n    this.refreshInterpreterGui();\n  }\n\n  /** For internal use. Sets the fork usually given by parsed entries. */\n  public setFork(forkName: string) {\n    this.fork = forkName;\n    this.stopEvaluation = false;\n\n    this.loadFork();\n  }\n\n  /** Escapes the given text for all supported escape sequences. */\n  private escapeText(text: string, matchBraces: boolean) {\n    if (matchBraces) {\n      return text.replace(escapeBraceRegex, (str: string) => {\n        switch (str) {\n          case \"\\\\at\":\n            return \"@\";\n          case \"\\\\n\":\n            return \"\\n\";\n          case \"\\\\s\":\n            return \"\\\\\";\n          case \"\\\\lb\":\n            return \"{\";\n          case \"\\\\rb\":\n            return \"}\";\n        }\n\n        return str;\n      });\n    }\n\n    return text.replace(escapeNoBraceRegex, (str: string) => {\n      switch (str) {\n        case \"\\\\at\":\n          return \"@\";\n        case \"\\\\n\":\n          return \"\\n\";\n        case \"\\\\s\":\n          return \"\\\\\";\n      }\n\n      return str;\n    });\n  }\n\n  /** Handles submission of text in the textbox. */\n  private onTextboxKeyPress = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    if (ev.charCode === 13) {\n      this.actions.forEach((action) => {\n        action(ev.currentTarget.value);\n      });\n\n      ev.currentTarget.value = \"\";\n    }\n  };\n\n  /**\n   * Crawls the given node structure in a depth-first search. If text is provided, it's used\n   * solely to evaluate 'if text is' and 'if text has' syntax. Otherwise, those nodes are set to be\n   * parsed the next time input is submitted through the textbox.\n   */\n  private preorderProcess(node: StoryParseNode, textboxText: string) {\n    // If the node's conditions are met, processes it and children.\n    if (this.processIf(node, textboxText)) {\n      this.processText(node);\n\n      for (let i = 0; i < node.children.length; i++) {\n        if (this.stopEvaluation) {\n          return;\n        }\n\n        this.preorderProcess(node.children[i], textboxText);\n      }\n    }\n  }\n\n  /**\n   * Interprets the contents of a node is its condition is met. If text is provided, it's used\n   * solely to evaluate 'if text is' and 'if text has' syntax. Otherwise, those nodes are set to be\n   * parsed the next time input is submitted through the textbox.\n   */\n  private processIf(node: StoryParseNode, textboxText: string): boolean {\n    const combinedProps = this.props as CombinedProps;\n\n    // If there are no conditions, consider it met.\n    if (node.condition.trim() === \"\") {\n      return true;\n    }\n\n    // Gets the condition without the word 'if'.\n    const condition = node.condition.substring(2).trim();\n    const words = condition.split(\" \");\n\n    // There should be at least one word after 'if'.\n    if (words.length === 0) {\n      this.setErrorMessage(\"The line if '\" + condition + \"' is incorrectly formatted.\");\n      return false; // Skips ifs with invalid syntax.\n    }\n\n    //#region Timers. Syntax: if timer is num\n    if (words.length > 1 && words[0] === \"timer\" && words[1] === \"is\") {\n      if (words.length < 2) {\n        this.setErrorMessage(\"The timer must be set with a time specified in seconds.\");\n        return false;\n      }\n\n      // The third word must be a number.\n      if (!numberRegex.test(words[2])) {\n        this.setErrorMessage(\"Interpreter: In line '\" + condition + \"', the third word must be numeric.\");\n        return false;\n      }\n\n      const number = parseFloat(words[2]);\n\n      if (isNaN(number) || !isFinite(number)) {\n        this.setErrorMessage(\"Interpreter: In line '\" + condition + \"', the time must be numeric and not too large.\");\n        return false;\n      }\n\n      // The number must be positive.\n      if (number <= 0) {\n        this.setErrorMessage(\"Interpreter: In line '\" + condition + \"', the time must be positive and non-zero.\");\n        return false;\n      }\n\n      // Creates a timer to delay the evaluation of everything in the current if-statement.\n      const ref = global.setTimeout(() => {\n        this.processText(node);\n\n        for (let i = 0; i < node.children.length; i++) {\n          this.preorderProcess(node.children[i], textboxText);\n        }\n      }, number * 1000);\n\n      this.timers.push(ref);\n\n      return false; // Delays execution of child nodes.\n    }\n    //#endregion\n\n    //#region Textbox. Syntax: if text (!)is/has/pick query\n    // Handles syntax: if text is query, if text has query, if text !is query, if text !has query, if text pick query\n    else if (\n      words.length > 1 &&\n      words[0] === \"text\" &&\n      (words[1] === \"is\" || words[1] === \"!is\" || words[1] === \"has\" || words[1] === \"!has\" || words[1] === \"pick\")\n    ) {\n      // Automatically shows the textbox.\n      this.textboxHidden = false;\n\n      let query = \"\"; // Contains all additional words.\n\n      // Concatenates all words after the command syntax.\n      for (let i = 2; i < words.length; i++) {\n        query += words[i] + \" \";\n      }\n\n      query = this.escapeText(query.toLowerCase().trim(), true);\n\n      if (query === \"\") {\n        this.setErrorMessage(\n          \"Interpreter: In the line 'if \" +\n            condition +\n            \"', at least one word to look for must be specified after 'pick'.\"\n        );\n      }\n\n      // The generated option adds to the submission event based on whether it's checking if the\n      // textbox input is/has the query.\n      if (words[1] === \"pick\") {\n        // Splits the query on commas if checking for containing.\n        const queryWords = query.split(\",\");\n\n        // Escapes commas as \\c\n        for (let i = 0; i < queryWords.length; i++) {\n          queryWords[i] = queryWords[i].replace(\"\\\\c\", \",\").trim();\n        }\n\n        if (textboxText === \"\") {\n          this.actions.push((text: string) => {\n            let containsWord = false;\n\n            // Ensures the text contains at least one word.\n            for (let i = 0; i < queryWords.length; i++) {\n              const matchWordRegex = new RegExp(\"\\\\b\" + queryWords[i] + \"\\\\b\");\n              if (matchWordRegex.test(text.toLowerCase().trim())) {\n                containsWord = true;\n              }\n            }\n\n            if (!containsWord) {\n              return;\n            }\n\n            // If still executing, conditions are met.\n            if (\n              !combinedProps.authorStorySettings.authorStoryRunnerOptions.hideLog &&\n              (!combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit ||\n                combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit > 0)\n            ) {\n              this.content.push(this.addInput(text));\n            }\n\n            this.processText(node);\n\n            for (let i = 0; i < node.children.length; i++) {\n              this.preorderProcess(node.children[i], text);\n            }\n\n            this.refreshInterpreterGui();\n          });\n        } else {\n          let containsWord = false;\n\n          // Ensures the text contains at least one word.\n          for (let i = 0; i < queryWords.length; i++) {\n            const matchWordRegex = new RegExp(\"\\\\b\" + queryWords[i] + \"\\\\b\");\n\n            if (matchWordRegex.test(textboxText.toLowerCase().trim())) {\n              containsWord = true;\n            }\n          }\n\n          if (!containsWord) {\n            return false;\n          }\n\n          // If still executing, conditions are met.\n          this.processText(node);\n\n          for (let i = 0; i < node.children.length; i++) {\n            this.preorderProcess(node.children[i], textboxText);\n          }\n        }\n      } else if (words[1].endsWith(\"is\")) {\n        if (textboxText === \"\") {\n          this.actions.push((text: string) => {\n            const cleanedText = text.toLowerCase().trim();\n\n            if ((words[1] === \"is\" && cleanedText === query) || (words[1] === \"!is\" && cleanedText !== query)) {\n              if (\n                !combinedProps.authorStorySettings.authorStoryRunnerOptions.hideLog &&\n                (!combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit ||\n                  combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit > 0)\n              ) {\n                this.content.push(this.addInput(text));\n              }\n\n              this.processText(node);\n\n              for (let i = 0; i < node.children.length; i++) {\n                this.preorderProcess(node.children[i], text);\n              }\n            }\n\n            this.refreshInterpreterGui();\n          });\n        } else {\n          if ((words[1] === \"is\" && textboxText === query) || (words[1] === \"!is\" && textboxText !== query)) {\n            this.processText(node);\n\n            for (let i = 0; i < node.children.length; i++) {\n              this.preorderProcess(node.children[i], textboxText);\n            }\n          }\n        }\n      } else if (words[1].endsWith(\"has\")) {\n        // Splits the query on commas if checking for containing.\n        const queryWords = query.split(\",\");\n\n        // Escapes commas as \\c.\n        for (let i = 0; i < queryWords.length; i++) {\n          queryWords[i] = queryWords[i].replace(\"\\\\c\", \",\").trim();\n        }\n\n        if (textboxText === \"\") {\n          this.actions.push((text: string) => {\n            // Ensures the text contains each word.\n            for (let i = 0; i < queryWords.length; i++) {\n              const matchWordRegex = new RegExp(\"\\\\b\" + queryWords[i] + \"\\\\b\");\n              const matches = matchWordRegex.test(text.toLowerCase().trim());\n\n              if ((words[1] === \"has\" && !matches) || (words[1] === \"!has\" && matches)) {\n                return;\n              }\n            }\n\n            // If still executing, conditions are met.\n            if (\n              !combinedProps.authorStorySettings.authorStoryRunnerOptions.hideLog &&\n              (!combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit ||\n                combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit > 0)\n            ) {\n              this.content.push(this.addInput(text));\n            }\n\n            this.processText(node);\n\n            for (let i = 0; i < node.children.length; i++) {\n              this.preorderProcess(node.children[i], text);\n            }\n\n            this.refreshInterpreterGui();\n          });\n        } else {\n          // Ensures the text contains each word.\n          for (let i = 0; i < queryWords.length; i++) {\n            const matchWordRegex = new RegExp(\"\\\\b\" + queryWords[i] + \"\\\\b\");\n            const matches = matchWordRegex.test(textboxText);\n\n            if ((words[1] === \"has\" && !matches) || (words[1] === \"!has\" && matches)) {\n              return false;\n            }\n          }\n\n          // If still executing, conditions are met.\n          this.processText(node);\n\n          for (let i = 0; i < node.children.length; i++) {\n            this.preorderProcess(node.children[i], textboxText);\n          }\n        }\n      }\n\n      return false; // Execution of child nodes is conditional.\n    }\n    //#endregion\n\n    //#region Truth tests. Syntax: if expr; expr must be true or false.\n    else {\n      // Unregisters previously-set variables and confirms options.\n      exprParser.optIncludeUnknowns = true;\n      exprParser.resetTokens();\n\n      const variablesKeys = Object.keys(this.variables);\n\n      // Supports syntax: if visited, if !visited\n      const varValue = this.variables[\"visited\" + this.fork] as number;\n      exprParser.addIdentifier(new TokenId(\"visited\", varValue));\n\n      // Registers all valid variables with the math parser.\n      for (let i = 0; i < variablesKeys.length; i++) {\n        const varName = variablesKeys[i];\n        const varVal = this.variables[variablesKeys[i]];\n\n        exprParser.addIdentifier(new TokenId(varName, varVal));\n      }\n\n      // Registers a function to check if a variable exists.\n      exprParser.addFunction(\n        new TokenFunc(\"exists\", 1, (tokens) => {\n          if (tokens[0] instanceof TokenBool) {\n            return tokens[0];\n          }\n\n          return new TokenBool(!(tokens[0] instanceof TokenId));\n        })\n      );\n\n      let result = \"\";\n      let resultVal = null;\n\n      // Attempts to compute the expression.\n      try {\n        result = exprParser.eval(words.join(\" \"));\n      } catch (e) {\n        if (e instanceof Error) {\n          this.setErrorMessage(e.message);\n        } else {\n          this.setErrorMessage(e);\n        }\n\n        return false;\n      }\n\n      // Parses the computed result as a bool.\n      if (result === \"true\" || result === \"false\") {\n        return result === \"true\";\n      } else {\n        this.setErrorMessage(\n          \"Interpreter: In the line 'if \" +\n            words.join(\" \") +\n            \"', the expression must be boolean (true or false), but was \" +\n            resultVal +\n            \" instead.\"\n        );\n\n        return false;\n      }\n    }\n  }\n\n  /** Interprets the node text to display output and evaluate commands. */\n  private processText(node: StoryParseNode) {\n    let textLeft = node.text;\n\n    // Processes all text until none is left.\n    while (textLeft.length > 0) {\n      // Gets the current line and its words.\n      let endOfLine = textLeft.indexOf(\"\\n\");\n      let line: string;\n\n      if (endOfLine >= 0) {\n        line = textLeft.substring(0, endOfLine);\n      } else {\n        line = textLeft;\n      }\n\n      let words = line.split(\" \");\n\n      //#region Handles empty lines if they appear.\n      // Removes excess lines.\n      if (line.trim() === \"\") {\n        // Deletes pointless whitespace.\n        textLeft = textLeft.substring(endOfLine + 1);\n      }\n      //#endregion\n\n      //#region Parse in-line options. Syntax: output@@forkname.\n      else if (line.includes(\"@@\")) {\n        let forkName = line\n          .substring(line.indexOf(\"@\") + 2)\n          .replace(whitespaceRegex, \"\")\n          .toLowerCase();\n\n        let displayName = this.escapeText(line.substring(0, line.indexOf(\"@\")).trim(), false);\n\n        // Handles having no hyperlink or display name.\n        if (forkName === \"\") {\n          this.setErrorMessage(\"Interpreter: there was no fork name given to option '\" + displayName + \"'.\");\n        } else if (displayName.trim() === \"\") {\n          this.setErrorMessage(\n            \"Interpreter: the option linking to '\" + forkName + \"' has no displayable text specified.\"\n          );\n        } else if (this.entries[forkName] === undefined) {\n          this.setErrorMessage(\n            \"Interpreter: the fork in the option '\" + displayName + \"@\" + forkName + \"' doesn't exist.\"\n          );\n        } else {\n          this.content.push(this.addOption(displayName, forkName, undefined, true));\n        }\n\n        // Deletes the line just processed.\n        textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n      }\n      //#endregion\n\n      //#region Parse options. Syntax: output@forkname.\n      else if (line.includes(\"@\")) {\n        // Gets the fork name. Case and space insensitive.\n        const indexOfAt = line.indexOf(\"@\");\n        const forkName = line\n          .substring(indexOfAt + 1)\n          .replace(whitespaceRegex, \"\")\n          .toLowerCase();\n        const displayName = this.escapeText(line.substring(0, indexOfAt).trim(), false);\n\n        // Handles having no hyperlink or display name.\n        if (forkName === \"\") {\n          this.setErrorMessage(\"Interpreter: there was no fork name given to option '\" + displayName + \"'.\");\n        } else if (displayName.trim() === \"\") {\n          this.setErrorMessage(\n            \"Interpreter: the option linking to '\" + forkName + \"' has no displayable text specified.\"\n          );\n        } else {\n          this.options.push(this.addOption(displayName, forkName));\n        }\n\n        // Deletes the line just processed.\n        textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n      }\n      //#endregion\n\n      //#region Print text. Syntax: {output text}.\n      // Parses output text and escape characters.\n      else if (line.includes(\"{\")) {\n        let lbPos = textLeft.indexOf(\"{\");\n        let rbPos = textLeft.indexOf(\"}\");\n        let output = textLeft.substring(lbPos, rbPos + 1);\n\n        if (rbPos < lbPos) {\n          this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', right braces should follow left braces. \");\n\n          // Skips the unprocessable line.\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n\n          continue;\n        }\n\n        if (output.includes(\"***}\")) {\n          this.currentOutputStyles.styleItalic = true;\n          this.currentOutputStyles.styleBold = true;\n        } else if (output.includes(\"**}\")) {\n          this.currentOutputStyles.styleBold = true;\n          this.currentOutputStyles.styleItalic = undefined;\n        } else if (output.includes(\"*}\")) {\n          this.currentOutputStyles.styleBold = undefined;\n          this.currentOutputStyles.styleItalic = true;\n        } else {\n          this.currentOutputStyles.styleBold = undefined;\n          this.currentOutputStyles.styleItalic = undefined;\n        }\n\n        // create output\n        output = this.escapeText(\n          output.replace(\"{\", \"\").replace(\"***}\", \"\").replace(\"**}\", \"\").replace(\"*}\", \"\").replace(\"}\", \"\"),\n          true\n        );\n\n        // Generates the text\n        this.content.push(this.addOutput(output));\n\n        // Removes the processed text.\n        textLeft = textLeft.substring(0, lbPos) + textLeft.substring(rbPos + 1, textLeft.length);\n      }\n      //#endregion\n\n      //#region Set variables.\n      else if (textLeft.startsWith(\"set\")) {\n        // Unregisters previously-set variables.\n        exprParser.optIncludeUnknowns = false;\n        exprParser.resetTokens();\n\n        // Registers all valid variables with the math parser.\n        const variablesKeys = Object.keys(this.variables);\n        for (let i = 0; i < variablesKeys.length; i++) {\n          const varName = variablesKeys[i];\n          const varVal = this.variables[variablesKeys[i]];\n\n          if (typeof varVal === \"number\") {\n            exprParser.addIdentifier(new TokenId(varName, varVal));\n          } else if (typeof varVal === \"boolean\") {\n            exprParser.addIdentifier(new TokenId(varName, varVal));\n          }\n        }\n\n        // Registers a function to set a random number.\n        exprParser.addFunction(\n          new TokenFunc(\"random\", 1, (tokens) => {\n            if (tokens[0] instanceof TokenNum) {\n              const n0 = tokens[0] as TokenNum;\n\n              return new TokenNum(random!.nextNumber() * n0.value + 1);\n            }\n\n            return null;\n          })\n        );\n\n        // Gets the index to separate left and right-hand sides.\n        let exprTwoSidedIndex = words.indexOf(\"=\");\n\n        // Handles expressions with both LHS and RHS.\n        if (exprTwoSidedIndex !== -1) {\n          let lhs = words.slice(1, exprTwoSidedIndex);\n          let rhs = words.slice(exprTwoSidedIndex + 1);\n          let result = \"\";\n          let resultVal = null;\n\n          // If the left-hand side is a single word.\n          if (lhs.length === 1) {\n            // Attempts to compute the RHS expression.\n            try {\n              result = exprParser.eval(rhs.join(\" \"));\n            } catch (e) {\n              if (e instanceof Error) {\n                this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', \" + e.message);\n              } else {\n                this.setErrorMessage(\"Interpreter: In the line '\" + line + \", \" + e);\n              }\n            }\n\n            // Parses the computed result as a bool.\n            if (result === \"true\" || result === \"false\") {\n              resultVal = result === \"true\";\n            }\n\n            // Parses the computed result as a number.\n            else {\n              if (numberRegex.test(result)) {\n                resultVal = parseFloat(result);\n              } else {\n                this.setErrorMessage(\n                  \"Interpreter: In the line '\" +\n                    line +\n                    \"', the expression \" +\n                    rhs.join(\" \") +\n                    \" should be a number, but \" +\n                    result +\n                    \" was computed instead.\"\n                );\n              }\n            }\n\n            // Sets or adds the new value as appropriate.\n            if (variablesKeys.includes(lhs[0])) {\n              this.variables[lhs[0]] = resultVal as number | boolean;\n            } else {\n              if (singleDigitRegex.test(lhs[0][0]) || exprParser.getTokens().some((o) => o.strForm === lhs[0])) {\n                this.setErrorMessage(\n                  \"Interpreter: In the line '\" +\n                    line +\n                    \"', the variable '\" +\n                    lhs[0] +\n                    \"' is a name used for math or is a number.\"\n                );\n              } else {\n                this.variables[lhs[0]] = resultVal as number | boolean;\n              }\n            }\n          } else {\n            this.setErrorMessage(\n              \"Interpreter: In the line '\" +\n                line +\n                \", the phrase \" +\n                lhs.join(\" \") +\n                \" must be a variable name without spaces.\"\n            );\n          }\n        }\n\n        // Handles shorthand expressions with only the LHS.\n        else {\n          let lhs = words.slice(1);\n          let result = \"\";\n          let resultVal = null;\n\n          if (lhs.length > 0) {\n            // Syntax: set name, set !name\n            if (lhs.length === 1) {\n              // Sets false boolean values.\n              if (lhs[0].startsWith(\"!\")) {\n                let lhsBool = lhs[0].substring(1);\n\n                if (variablesKeys.includes(lhsBool)) {\n                  this.variables[lhsBool] = false;\n                } else if (\n                  (lhs.length > 0 && singleDigitRegex.test(lhs[0][0])) ||\n                  exprParser.getTokens().some((tok) => tok.strForm === lhsBool)\n                ) {\n                  this.setErrorMessage(\n                    \"Interpreter: In the line '\" +\n                      line +\n                      \"', the variable '\" +\n                      lhsBool +\n                      \"' is a number or is used for math.\"\n                  );\n                } else {\n                  this.variables[lhsBool] = false;\n                }\n              }\n\n              // Sets true boolean values.\n              else {\n                if (variablesKeys.includes(lhs[0])) {\n                  this.variables[lhs[0]] = true;\n                } else if (\n                  (lhs.length > 0 && singleDigitRegex.test(lhs[0][0])) ||\n                  exprParser.getTokens().some((tok) => tok.strForm === lhs[0])\n                ) {\n                  this.setErrorMessage(\n                    \"Interpreter: In the line '\" +\n                      line +\n                      \"', the variable '\" +\n                      lhs[0] +\n                      \"' is a number or is used for math.\"\n                  );\n                } else {\n                  this.variables[lhs[0]] = true;\n                }\n              }\n            }\n\n            // Syntax: set EXPR, where EXPR is a math expression and not equation.\n            // This is computed as set name = EXPR.\n            else if (variablesKeys.includes(lhs[0])) {\n              // Attempts to compute the LHS expression.\n              try {\n                result = exprParser.eval(lhs.join(\" \"));\n              } catch (e) {\n                if (e instanceof Error) {\n                  this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', \" + e.message);\n                } else {\n                  this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', \" + e);\n                }\n              }\n\n              // Parses the computed result as a bool.\n              if (result === \"true\" || result === \"false\") {\n                resultVal = result === \"true\";\n              }\n\n              // Parses the computed result as a number.\n              else {\n                if (numberRegex.test(result)) {\n                  resultVal = parseFloat(result);\n                } else {\n                  this.setErrorMessage(\n                    \"Interpreter: In the line '\" +\n                      line +\n                      \"', the expression \" +\n                      lhs.join(\" \") +\n                      \" should be a number, but \" +\n                      result +\n                      \" was computed instead.\"\n                  );\n                }\n              }\n\n              this.variables[lhs[0]] = resultVal as number | boolean;\n            } else {\n              this.setErrorMessage(\n                \"Interpreter: In the line '\" + line + \"', the variable \" + lhs[0] + \" doesn't exist yet.\"\n              );\n            }\n          } else {\n            this.setErrorMessage(\n              \"Interpreter: In the line '\" +\n                line +\n                \"', you need to provide a variable name to set, using syntax like set a, set !a, or a mathematical expression.\"\n            );\n          }\n        }\n\n        // Deletes the line just processed.\n        if (endOfLine >= 0) {\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n        } else {\n          textLeft = \"\";\n        }\n      }\n      //#endregion\n\n      //#region Print variables. Syntax: get name.\n      // Syntax: get name.\n      else if (textLeft.startsWith(\"get\")) {\n        if (words.length === 2) {\n          if (this.variables[words[1]] !== undefined) {\n            this.content.push(this.addOutput(this.variables[words[1]].toString()));\n          } else {\n            this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', variable \" + words[1] + \" does not exist.\");\n          }\n        } else {\n          this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', only one word can follow 'get'.\");\n        }\n\n        // Deletes the line just processed.\n        if (endOfLine >= 0) {\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n        } else {\n          textLeft = \"\";\n        }\n      }\n      //#endregion\n\n      //#region Immediately jumps to another forks. Syntax: goto forkname.\n      // Handles syntax: goto forkname.\n      else if (textLeft.startsWith(\"goto\")) {\n        let forkName = line.substring(4).replace(whitespaceRegex, \"\").toLowerCase();\n\n        if (this.entries[forkName] !== undefined) {\n          // Ensures this page is considered visited, then executes the page being jumped to. When\n          // execution flow returns, this exits out of everything.\n          this.visitFork();\n          this.setFork(forkName);\n          this.stopEvaluation = true;\n          return;\n        } else {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              textLeft +\n              \"', cannot navigate to fork '\" +\n              forkName +\n              \"' because it does not exist.\"\n          );\n        }\n\n        // Deletes the line just processed.\n        if (endOfLine >= 0) {\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n        } else {\n          textLeft = \"\";\n        }\n      }\n      //#endregion\n\n      //#region Set text color. Syntax: color ffffff, color fff.\n      // Handles syntax: color ffffff (and other hex codes).\n      else if (textLeft.startsWith(\"color\")) {\n        let color = line.substring(5).trim().toLowerCase();\n        if (!colorRegex.test(color)) {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              line +\n              \"', color must be given in hex format. It can only include numbers 1-9 and upper or lowercase a-f.\"\n          );\n        } else if (color.length !== 6 && color.length !== 3) {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              line +\n              \"', color must be given in hex format using 3 or 6 digits. For example, f00 or 8800f0.\"\n          );\n        } else {\n          this.currentOutputStyles.colorDark = color;\n          this.currentOutputStyles.colorLight = color;\n        }\n\n        // Deletes the line just processed.\n        if (endOfLine >= 0) {\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n        } else {\n          textLeft = \"\";\n        }\n      }\n      //#endregion\n\n      // Anything left is an error.\n      else {\n        this.setErrorMessage(\n          \"Interpreter: In the line '\" +\n            line +\n            \"', unexpected symbols encountered. Ensure all output text is wrapped in single braces and there are no extra braces inside.\"\n        );\n\n        // Skips the unprocessable line.\n        textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n      }\n    }\n  }\n\n  /** Initializes or resets the interpreter states. */\n  private refreshInterpreter() {\n    this.actions = [];\n    this.content = [];\n    this.currentOptionStyles = {};\n    this.currentOptionHighlightStyles = {};\n    this.currentOutputStyles = {};\n    this.errorMessage = \"\";\n    this.fork = \"\";\n    this.log = [];\n    this.options = [];\n    this.timers = [];\n    this.variables = {};\n    this.variablesPrev = {};\n\n    this.refreshInterpreterGuiStyles();\n  }\n\n  /** Initializes or resets the gui styles. */\n  private refreshInterpreterGuiStyles() {\n    const combinedProps = this.props as CombinedProps;\n\n    // Updates the background color of the runner.\n    const runner = document.getElementById(idRunnerWrapper);\n\n    if (runner) {\n      if (combinedProps.playerStorySettings.playerStoryRunnerStyles.background.type === \"plain\") {\n        runner.style[\"backgroundColor\"] =\n          combinedProps.theme.themeType === ThemeTypes.Light\n            ? combinedProps.playerStorySettings.playerStoryRunnerStyles.background.colorLight ||\n              combinedProps.theme.theme.semanticColors.bodyBackground\n            : combinedProps.playerStorySettings.playerStoryRunnerStyles.background.colorDark ||\n              combinedProps.theme.theme.semanticColors.bodyBackground;\n      } else if (combinedProps.authorStorySettings.authorStoryRunnerStyles.background.type === \"plain\") {\n        runner.style[\"backgroundColor\"] =\n          combinedProps.theme.themeType === ThemeTypes.Light\n            ? combinedProps.authorStorySettings.authorStoryRunnerStyles.background.colorLight ||\n              combinedProps.theme.theme.semanticColors.bodyBackground\n            : combinedProps.authorStorySettings.authorStoryRunnerStyles.background.colorDark ||\n              combinedProps.theme.theme.semanticColors.bodyBackground;\n      }\n    }\n  }\n\n  /** Called when a restart link is pressed or restart is invoked. */\n  private restartGame = () => {\n    this.refreshInterpreter();\n\n    const entriesKeys = Object.keys(this.entries);\n    this.setFork(entriesKeys[0]);\n  };\n\n  /** Empties the log or updates it, depending on interpreter options. */\n  private updateLog() {\n    const combinedProps = this.props as CombinedProps;\n\n    if (\n      combinedProps.authorStorySettings.authorStoryRunnerOptions.hideLog ||\n      combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit === 0\n    ) {\n      this.log = [];\n    } else {\n      this.log.push(...this.content);\n    }\n  }\n\n  /**\n   * Called when a fork is finished executing or is stopped so another fork can run, in which this\n   * should execute immediately.\n   */\n  private visitFork() {\n    // Automatically sets variables to indicate pages were visited.\n    if (this.variables[\"visited\" + this.fork] === undefined) {\n      this.variables[\"visited\" + this.fork] = true;\n    }\n  }\n}\n\nexport const StoryInterpreter = connect(mapStateToProps, mapDispatchToProps, undefined, {\n  forwardRef: true,\n})(StoryInterpreterC);\n","/**\n * Adapted by Benyl on StackOverflow at https://stackoverflow.com/a/32537932/7197632 based on the Mersenne Twister\n * algorithm at https://gist.github.com/banksean/300494. This is used because as of October 2020, there is no ECMA\n * standardized support for seeding a random number, and it's useful for debugging.\n */\nexport class Random {\n  static N = 624;\n  static M = 397;\n  static MATRIX_A = 0x9908b0df;\n  /* constant vector a */\n  static UPPER_MASK = 0x80000000;\n  /* most significant w-r bits */\n  static LOWER_MASK = 0x7fffffff;\n  /* least significant r bits */\n\n  mt = new Array(Random.N);\n  /* the array for the state vector */\n  mti = Random.N + 1;\n  /* mti==N+1 means mt[N] is not initialized */\n\n  /** The seed used when constructing the RNG. Read only. */\n  public readonly seed: number | null = null;\n\n  constructor(seed: number | null = null) {\n    if (seed == null) {\n      this.seed = new Date().getTime();\n    } else {\n      this.seed = seed;\n    }\n\n    this.init_genrand(this.seed);\n  }\n\n  private init_genrand(s: number) {\n    this.mt[0] = s >>> 0;\n    for (this.mti = 1; this.mti < Random.N; this.mti++) {\n      const s2 = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);\n      this.mt[this.mti] = ((((s2 & 0xffff0000) >>> 16) * 1812433253) << 16) + (s2 & 0x0000ffff) * 1812433253 + this.mti;\n      /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n      /* In the previous versions, MSBs of the seed affect   */\n      /* only MSBs of the array mt[].                        */\n      /* 2002/01/09 modified by Makoto Matsumoto             */\n      this.mt[this.mti] >>>= 0;\n      /* for >32 bit machines */\n    }\n  }\n\n  /**\n   * generates a random number on [0,0xffffffff]-interval\n   * @private\n   */\n  private _nextInt32(): number {\n    var y: number;\n    var mag01 = [0x0, Random.MATRIX_A];\n    /* mag01[x] = x * MATRIX_A  for x=0,1 */\n\n    if (this.mti >= Random.N) {\n      /* generate N words at one time */\n      var kk: number;\n\n      if (this.mti === Random.N + 1)\n        /* if init_genrand() has not been called, */\n        this.init_genrand(5489);\n      /* a default initial seed is used */\n\n      for (kk = 0; kk < Random.N - Random.M; kk++) {\n        y = (this.mt[kk] & Random.UPPER_MASK) | (this.mt[kk + 1] & Random.LOWER_MASK);\n        this.mt[kk] = this.mt[kk + Random.M] ^ (y >>> 1) ^ mag01[y & 0x1];\n      }\n      for (; kk < Random.N - 1; kk++) {\n        y = (this.mt[kk] & Random.UPPER_MASK) | (this.mt[kk + 1] & Random.LOWER_MASK);\n        this.mt[kk] = this.mt[kk + (Random.M - Random.N)] ^ (y >>> 1) ^ mag01[y & 0x1];\n      }\n      y = (this.mt[Random.N - 1] & Random.UPPER_MASK) | (this.mt[0] & Random.LOWER_MASK);\n      this.mt[Random.N - 1] = this.mt[Random.M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n      this.mti = 0;\n    }\n\n    y = this.mt[this.mti++];\n\n    /* Tempering */\n    y ^= y >>> 11;\n    y ^= (y << 7) & 0x9d2c5680;\n    y ^= (y << 15) & 0xefc60000;\n    y ^= y >>> 18;\n\n    return y >>> 0;\n  }\n\n  /**\n   * generates an int32 pseudo random number\n   * @param range: an optional [from, to] range, if not specified the result will be in range [0,0xffffffff]\n   * @return {number}\n   */\n  nextInt32(range: [number, number] | null = null): number {\n    var result = this._nextInt32();\n    if (range == null) {\n      return result;\n    }\n\n    return (result % (range[1] - range[0])) + range[0];\n  }\n\n  /**\n   * generates a random number on [0,0x7fffffff]-interval\n   */\n  nextInt31(): number {\n    return this._nextInt32() >>> 1;\n  }\n\n  /**\n   * generates a random number on [0,1]-real-interval\n   */\n  nextNumber(): number {\n    return this._nextInt32() * (1.0 / 4294967295.0);\n  }\n\n  /**\n   * generates a random number on [0,1) with 53-bit resolution\n   */\n  nextNumber53(): number {\n    var a = this._nextInt32() >>> 5,\n      b = this._nextInt32() >>> 6;\n    return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);\n  }\n}\n","/** Represents which direction to evaluate multiple homogenous operators in. */\nexport enum associativity {\n  /** Left associative operators compute a ~ b ~ c as (a ~ b) ~ c. */\n  left,\n\n  /** Right associative operators compute a ~ b ~ c as a ~ (b ~ c). */\n  right,\n}\n","/** Determines how operands interact with an operator token. */\nexport enum placements {\n  /** For unary tokens that use the preceding number, like negation. */\n  left,\n\n  /** For unary tokens that use the following number, like factorial. */\n  right,\n\n  /** For binary tokens. */\n  both,\n}\n","import { associativity } from \"./Associativity\";\nimport { placements } from \"./Placements\";\nimport { IToken, tokenEvalFunc } from \"./utils\";\n\n/** An operator token. */\nexport class TokenOp implements IToken {\n  public strForm: string;\n  public placement: placements;\n  public assoc: associativity;\n  public prec: number;\n  public numArgs: number;\n  public function: tokenEvalFunc;\n\n  constructor(\n    opPlacement: placements,\n    associativity: associativity,\n    precedence: number,\n    format: string,\n    operation: tokenEvalFunc\n  ) {\n    this.placement = opPlacement;\n    this.assoc = associativity;\n    this.prec = precedence;\n\n    if (opPlacement === placements.both) {\n      this.numArgs = 2;\n    } else {\n      this.numArgs = 1;\n    }\n\n    this.strForm = format;\n    this.function = operation;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenOp) {\n    return (\n      this.strForm === obj.strForm &&\n      this.placement === obj.placement &&\n      this.assoc === obj.assoc &&\n      this.prec === obj.prec &&\n      this.numArgs === obj.numArgs &&\n      this.function === obj.function\n    );\n  }\n}\n","import { IToken } from \"./utils\";\n\n/** A symbolic token to store a general symbol. */\nexport class TokenSym implements IToken {\n  public strForm: string;\n\n  constructor(name: string) {\n    this.strForm = name;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenSym) {\n    return this.strForm === obj.strForm;\n  }\n}\n","// TODO: localize all errors in this file.\n\nimport { associativity } from \"./Associativity\";\nimport { placements } from \"./Placements\";\nimport { TokenBool } from \"./TokenBool\";\nimport { TokenFunc } from \"./TokenFunc\";\nimport { TokenId } from \"./TokenId\";\nimport { TokenNum } from \"./TokenNum\";\nimport { TokenOp } from \"./TokenOp\";\nimport { TokenSym } from \"./TokenSym\";\nimport { IToken, numberRegex } from \"./utils\";\n\n/** Tokenizes mathematical expressions to evaluate or symbolically manipulate them. */\nexport class Parser {\n  /** If true, parentheses groups must always be balanced. False by default. */\n  public optRequireRightPars = false;\n\n  /** If true, tokens that aren't recognized will be added as unknown variables. True by default. */\n  public optIncludeUnknowns = true;\n\n  /**\n   * Null identifiers will be replaced with this token for evaluation, if specified. Else, an error\n   * will be thrown. Null by default.\n   */\n  public optUnknownDefault: IToken | null = null;\n\n  /** The sine function for radians. */\n  public Fsin = new TokenFunc(\"sin\", 1, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n\n      return new TokenNum(Math.sin(n0.value));\n    }\n\n    return null;\n  });\n\n  /** The cosine function for radians. */\n  public Fcos = new TokenFunc(\"cos\", 1, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n\n      return new TokenNum(Math.cos(n0.value));\n    }\n\n    return null;\n  });\n\n  /** The tangent function for radians. */\n  public Ftan = new TokenFunc(\"tan\", 1, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n\n      return new TokenNum(Math.tan(n0.value));\n    }\n\n    return null;\n  });\n\n  /** Rounds a single number to the nearest integer. */\n  public Frnd = new TokenFunc(\"round\", 1, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n\n      return new TokenNum(Math.round(n0.value));\n    }\n\n    return null;\n  });\n\n  /** Rounds a number to the nearest multiple of another. */\n  public Frnd2 = new TokenFunc(\"round\", 2, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(Math.round(n0.value / n1.value) * n1.value);\n    }\n\n    return null;\n  });\n\n  /** The addition operator. */\n  public Add = new TokenOp(placements.both, associativity.left, 6, \"+\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(n0.value + n1.value);\n    }\n\n    return null;\n  });\n\n  /** The subtraction operator. */\n  public Sub = new TokenOp(placements.both, associativity.left, 6, \"-\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(n0.value - n1.value);\n    }\n\n    return null;\n  });\n\n  /** The multiplication operator. */\n  public Mlt = new TokenOp(placements.both, associativity.left, 7, \"*\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(n0.value * n1.value);\n    }\n\n    return null;\n  });\n\n  /** The division operator. */\n  public Div = new TokenOp(placements.both, associativity.left, 7, \"/\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      if (n1.value === 0) {\n        throw new Error(`Parser: The expression ${n0.strForm} / ${n1.strForm} causes division by zero.`);\n      }\n\n      return new TokenNum(n0.value / n1.value);\n    }\n\n    return null;\n  });\n\n  /** The modulus operator. */\n  public Mod = new TokenOp(placements.both, associativity.left, 7, \"%\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      if (n1.value === 0) {\n        throw new Error(`Parser: The expression ${n0.strForm} % ${n1.strForm} causes division by zero.`);\n      }\n\n      return new TokenNum(n0.value % n1.value);\n    }\n\n    return null;\n  });\n\n  /** The negation operator. */\n  public Neg = new TokenOp(placements.right, associativity.right, 8, \"-\", (operands: IToken[]) => {\n    if (operands[1] instanceof TokenNum) {\n      const n1 = operands[1] as TokenNum;\n      return new TokenNum(-n1.value);\n    }\n\n    return null;\n  });\n\n  /** The exponentiation operator. */\n  public Exp = new TokenOp(placements.both, associativity.right, 8, \"^\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(Math.pow(n0.value, n1.value));\n    }\n\n    return null;\n  });\n\n  /** The factorial operator. */\n  public Fac = new TokenOp(placements.left, associativity.left, 9, \"!\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      let givenVal = n0.value;\n      let value = 1;\n\n      while (n0.value > 1) {\n        value *= givenVal--;\n      }\n\n      return new TokenNum(value);\n    }\n\n    return null;\n  });\n\n  /** The equality operator. */\n  public Eq = new TokenOp(placements.both, associativity.left, 4, \"=\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value === n1.value);\n    }\n\n    if (operands[0] instanceof TokenBool && operands[1] instanceof TokenBool) {\n      const n0 = operands[0] as TokenBool;\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(n0.value === n1.value);\n    }\n\n    return null;\n  });\n\n  /** The inequality operator. */\n  public NotEq = new TokenOp(placements.both, associativity.left, 4, \"!=\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value !== n1.value);\n    }\n\n    if (operands[0] instanceof TokenBool && operands[1] instanceof TokenBool) {\n      const n0 = operands[0] as TokenBool;\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(n0.value !== n1.value);\n    }\n\n    return null;\n  });\n\n  /** The greater-than operator. */\n  public Gt = new TokenOp(placements.both, associativity.left, 5, \">\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value > n1.value);\n    }\n\n    return null;\n  });\n\n  /** The greater-than-or-equal operator. */\n  public Gte = new TokenOp(placements.both, associativity.left, 5, \">=\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value >= n1.value);\n    }\n\n    return null;\n  });\n\n  /** The less-than operator. */\n  public Lt = new TokenOp(placements.both, associativity.left, 5, \"<\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value < n1.value);\n    }\n\n    return null;\n  });\n\n  /** The less-than-or-equal operator. */\n  public Lte = new TokenOp(placements.both, associativity.left, 5, \"<=\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value <= n1.value);\n    }\n\n    return null;\n  });\n\n  /** The logical not operator. */\n  public LogNot = new TokenOp(placements.right, associativity.left, 3, \"!\", (operands: IToken[]) => {\n    if (operands[1] instanceof TokenBool) {\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(!n1.value);\n    }\n\n    return null;\n  });\n\n  /** The logical and operator. */\n  public LogAnd = new TokenOp(placements.both, associativity.left, 1, \"&\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenBool && operands[1] instanceof TokenBool) {\n      const n0 = operands[0] as TokenBool;\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(n0.value && n1.value);\n    }\n\n    return null;\n  });\n\n  /** The logical or operator. */\n  public LogOr = new TokenOp(placements.both, associativity.left, 2, \"|\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenBool && operands[1] instanceof TokenBool) {\n      const n0 = operands[0] as TokenBool;\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(n0.value || n1.value);\n    }\n\n    return null;\n  });\n\n  /** Represents the literal boolean value of false. */\n  public varFalse = new TokenId(\"false\", false);\n\n  /** Represents the literal boolean value of true. */\n  public varTrue = new TokenId(\"true\", true);\n\n  /** The mathematical constant, Pi. */\n  public varPi = new TokenId(\"pi\", Math.PI);\n\n  /** Represents a left parenthesis. */\n  public lPar = new TokenSym(\"(\");\n\n  /** Represents a right parenthesis. */\n  public rPar = new TokenSym(\")\");\n\n  /** Represents a function argument separator. */\n  public argSep = new TokenSym(\",\");\n\n  // prettier-ignore\n  /** A list of all tokens to parse with. */\n  public tokens: IToken[] = [];\n\n  constructor() {\n    this.resetTokens();\n  }\n\n  /** Adds a string-lowercased copy of the function. */\n  public addFunction(token: TokenFunc) {\n    this.tokens.push(new TokenFunc(token.strForm.toLowerCase(), token.numArgs, token.function));\n    this.tokens = this.tokens.sort((a, b) => (a.strForm < b.strForm ? 1 : -1));\n  }\n\n  /** Adds a string-lowercased copy of the identifier. */\n  public addIdentifier(token: TokenId) {\n    this.tokens.push(new TokenId(token.strForm.toLowerCase(), token.value));\n    this.tokens = this.tokens.sort((a, b) => (a.strForm < b.strForm ? 1 : -1));\n  }\n\n  /** Adds a string-lowercased copy of the operator. */\n  public addOperator(token: TokenOp) {\n    this.tokens.push(\n      new TokenOp(token.placement, token.assoc, token.prec, token.strForm.toLowerCase(), token.function)\n    );\n\n    // Sorts tokens in reverse lexicographic order to support deferring.\n    this.tokens = this.tokens.sort((a, b) => (a.strForm < b.strForm ? 1 : -1));\n  }\n\n  /** Parses an expression with operators, functions, and identifiers. */\n  public eval(expression: string) {\n    return this.evalTokens(this.tokenize(expression));\n  }\n\n  /** Parses a pre-tokenized expression. Invalid tokenization may result in unanticipated errors. */\n  public evalTokens(tokensList: IToken[]) {\n    // Substitutes values for identifiers.\n    for (let i = 0; i < tokensList.length; i++) {\n      if (tokensList[i] instanceof TokenId) {\n        const tokId = tokensList[i] as TokenId;\n\n        // Inserts any known values for a token.\n        if (tokId.value !== null) {\n          if (typeof tokId.value === \"number\") {\n            tokensList[i] = new TokenNum(tokId.value);\n          } else if (typeof tokId.value === \"boolean\") {\n            tokensList[i] = new TokenBool(tokId.value);\n          }\n        }\n\n        // Replaces unknown identifiers with a value or fails.\n        else if (this.optUnknownDefault !== null) {\n          tokensList[i] = this.optUnknownDefault;\n        } else {\n          throw new Error(\"Parser: The identifier '\" + tokensList[i].strForm + \"' is unknown and can't be computed.\");\n        }\n      }\n    }\n\n    const functions = this.tokens.filter((token) => token instanceof TokenFunc) as TokenFunc[];\n\n    // Solves each parenthesis group from deepest depth outward.\n    while (true) {\n      // Finds the end of the nearest complete sub-expression.\n      let rbrPos = tokensList.indexOf(this.rPar) + 1;\n      let subExpressionEnd = rbrPos >= 1 ? rbrPos : tokensList.length;\n\n      // Finds the start of the nearest complete sub-expression.\n      let lbrPos = tokensList.slice(0, subExpressionEnd).lastIndexOf(this.lPar);\n      let subExpressionBegin = lbrPos >= 0 ? lbrPos : 0;\n\n      // Isolates the sub-expression.\n      let expressionLHS = tokensList.slice(0, subExpressionBegin);\n      let expressionRHS = tokensList.slice(subExpressionEnd, tokensList.length);\n      let subExpression = tokensList.slice(subExpressionBegin, subExpressionEnd);\n\n      // Includes functions and picks a proper overload.\n      let subExpressionFunc: TokenFunc | null = null;\n\n      if (expressionLHS[expressionLHS.length - 1] instanceof TokenFunc) {\n        const tokFunc = expressionLHS[expressionLHS.length - 1] as TokenFunc;\n        expressionLHS.splice(expressionLHS.length - 1, 1);\n\n        let numArgs = 1;\n\n        subExpression.forEach((tok) => {\n          if (tok === this.argSep) {\n            numArgs++;\n          }\n        });\n\n        subExpressionFunc = functions.find((f) => f.numArgs === numArgs && f.strForm === tokFunc.strForm) ?? null;\n      }\n\n      // Evaluates sub-expressions.\n      tokensList = expressionLHS;\n      tokensList.push(...this.evalNoPar(subExpression, subExpressionFunc));\n      tokensList.push(...expressionRHS);\n\n      // Returns when everything has been parsed.\n      if (expressionLHS.length === 0 && expressionRHS.length === 0) {\n        let result = \"\";\n\n        for (let i = 0; i < tokensList.length; i++) {\n          result += tokensList[i].strForm;\n        }\n\n        return result;\n      }\n    }\n  }\n\n  /**\n   * Parses a non-relational expression without parentheses with an optional argument to treat the\n   * expression as function arguments.\n   */\n  public evalNoPar = (subExpression: IToken[], func: TokenFunc | null): IToken[] => {\n    let operators = this.tokens.filter((tok) => tok instanceof TokenOp) as TokenOp[];\n    let result: IToken[] = [];\n\n    // Creates a string representation of the token list for errors.\n    let subExpressionStr = \"\";\n\n    for (let i = 0; i < subExpression.length; i++) {\n      subExpressionStr += subExpression[i].strForm;\n    }\n\n    // Strips () and catches empty expressions.\n    if (\n      this.optRequireRightPars &&\n      subExpression[0] === this.lPar &&\n      subExpression[subExpression.length - 1] !== this.rPar\n    ) {\n      throw new Error(\"Parser: The expression '\" + subExpressionStr + \"' is missing a right parenthesis at the end.\");\n    }\n\n    subExpression.filter((tok) => tok === this.lPar || tok === this.rPar);\n\n    if (subExpression.length === 0) {\n      throw new Error(\"Parser: an empty parenthesis group was provided; there is nothing to process within it.\");\n    }\n\n    // Parses each argument separately, then applies the function.\n    if (func !== null) {\n      let args = this.split(subExpression, this.argSep);\n      let argVals: IToken[] = [];\n\n      // Catches overloads with the wrong number of arguments.\n      if (func.numArgs !== args.length) {\n        throw new Error(\n          \"Parser: In expression '\" +\n            subExpressionStr +\n            \"', the number of arguments for \" +\n            func.strForm +\n            \" should be \" +\n            func.numArgs +\n            \", but \" +\n            args.length +\n            \" arguments were given.\"\n        );\n      }\n\n      // Simplifies each argument.\n      for (let i = 0; i < args.length; i++) {\n        const subResult = this.evalNoPar(args[i], null);\n\n        if (subResult[0] instanceof TokenNum || subResult[0] instanceof TokenBool) {\n          argVals[i] = subResult[0];\n        } else {\n          throw new Error(\n            \"Parser: In expression '\" +\n              subExpressionStr +\n              \"', a boolean argument was provided instead of a decimal value.\"\n          );\n        }\n      }\n\n      // Applies functions.\n      const immediateResult = func.function(argVals);\n      if (immediateResult === null) {\n        throw new Error(\n          \"Parser: In expression '\" + subExpressionStr + \"', arguments do not match parameter types used.\"\n        );\n      }\n\n      result.push(immediateResult);\n      return result;\n    }\n\n    // Minuses are binary by default; determines which ones are unary. If the first token is a\n    // minus, it's a negation.\n    if (subExpression[0] === this.Sub) {\n      subExpression[0] = this.Neg;\n    }\n\n    // Performs left-to-right modifications on the token list.\n    for (let i = 1; i < subExpression.length; i++) {\n      // A minus after a binary operator or negation is a negation.\n      if (\n        (subExpression[i] === this.Sub &&\n          subExpression[i - 1] instanceof TokenOp &&\n          ((subExpression[i - 1] as TokenOp).numArgs > 1 || subExpression[i - 1] === this.Neg)) ||\n        subExpression[i - 1] instanceof TokenFunc\n      ) {\n        subExpression[i] = this.Neg;\n      }\n    }\n\n    // Gets max precedence within sub-expression.\n    let opTokens = subExpression.filter((tok) => tok instanceof TokenOp) as TokenOp[];\n\n    let maxPrecedence = 0;\n    opTokens.forEach((tok: TokenOp) => {\n      if (tok.prec > maxPrecedence) {\n        maxPrecedence = tok.prec;\n      }\n    });\n\n    // Computes all operators with equal precedence.\n    while (maxPrecedence > 0) {\n      let isRightAssociative = operators.some((tok) => maxPrecedence === tok.prec && tok.assoc === associativity.right);\n\n      // Iterates through each token forwards or backwards.\n      let j = isRightAssociative ? subExpression.length - 1 : 0;\n\n      while ((isRightAssociative && j >= 0) || (!isRightAssociative && j < subExpression.length)) {\n        if (subExpression[j] instanceof TokenOp && (subExpression[j] as TokenOp).prec === maxPrecedence) {\n          let opToken = subExpression[j] as TokenOp;\n          let argVals: IToken[] = [subExpression[j - 1] ?? null, subExpression[j + 1] ?? null];\n          let result: IToken | null = null;\n\n          // Handles missing arguments.\n          if (argVals[0] === null && (opToken.placement === placements.both || opToken.placement === placements.left)) {\n            throw new Error(\n              \"Parser: In '\" +\n                subExpressionStr +\n                \"', the '\" +\n                subExpression[j].strForm +\n                \"' operator is missing a lefthand operand.\"\n            );\n          } else if (\n            argVals[1] === null &&\n            (opToken.placement === placements.both || opToken.placement === placements.right)\n          ) {\n            throw new Error(\n              \"Parser: In '\" +\n                subExpressionStr +\n                \"', the '\" +\n                subExpression[j].strForm +\n                \"' operator is missing a righthand operand.\"\n            );\n          }\n\n          // Applies each operator.\n          result = opToken.function(argVals);\n\n          // Removes affected tokens and inserts new value.\n          if (result === null) {\n            throw new Error(\"In expression '\" + subExpressionStr + \"', operand type(s) do not match operator.\");\n          } else {\n            subExpression[j] = result;\n          }\n\n          if (opToken.placement === placements.left) {\n            subExpression.splice(j - 1, 1);\n            j += isRightAssociative ? 0 : -1;\n          } else if (opToken.placement === placements.right) {\n            subExpression.splice(j + 1, 1);\n            j += isRightAssociative ? 1 : 0;\n          } else if (opToken.placement === placements.both) {\n            subExpression.splice(j + 1, 1);\n            subExpression.splice(j - 1, 1);\n            j += isRightAssociative ? 0 : -1;\n          }\n        }\n\n        // Moves to next token to evaluate.\n        if (isRightAssociative) {\n          j--;\n        } else {\n          j++;\n        }\n      }\n\n      // Gets new precedence within sub-expression.\n      opTokens = subExpression.filter((tok) => tok instanceof TokenOp) as TokenOp[];\n      let maxPrecedence2 = 0;\n\n      opTokens.forEach((tok: TokenOp) => {\n        if (tok.prec > maxPrecedence2) {\n          maxPrecedence2 = tok.prec;\n        }\n      });\n    }\n\n    // Returns the final value.\n    result.push(...subExpression);\n    return result;\n  };\n\n  /** Returns the list of all tokens in use. */\n  public getTokens() {\n    return this.tokens;\n  }\n\n  /**\n   * Removes the first match for the given token from the list of tokens, if it exists. Returns\n   * true if found, false otherwise.\n   */\n  public removeToken(token: IToken) {\n    for (let i = this.tokens.length; i > 0; i--) {\n      if ((token as TokenBool).equals((this.tokens as TokenBool[])[i])) {\n        this.tokens.splice(i, 1);\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /** Resets to the default token list and removes all user-added tokens. */\n  public resetTokens() {\n    //Sets the token list. Omits factorial.\n    //prettier-ignore\n    this.tokens = [\n      this.Exp, this.Neg, this.Mod, this.Div, this.Mlt, this.Sub, this.Add, this.LogNot, this.LogOr, this.LogAnd,\n      this.Eq, this.Gt, this.Gte, this.Lt, this.Lte, this.NotEq,\n      this.Fsin, this.Fcos, this.Ftan, this.Frnd, this.Frnd2,\n      this.varFalse, this.varTrue, this.varPi,\n      this.lPar, this.rPar, this.argSep\n    ];\n\n    //Sorts tokens in reverse lexicographic order to support deferring.\n    this.tokens = this.tokens.sort((a, b) => (a.strForm < b.strForm ? 1 : -1));\n  }\n\n  /**\n   * Returns all consecutive items between each matched delimiter item. For example, a list\n   * containing [0, 2, 1, 3, 1] delimited by 1 will return the lists [0, 2][3].\n   */\n  public split<T>(list: T[], delimiter: T): T[][] {\n    const lists: T[][] = [];\n    const currentList: T[] = [];\n\n    // Stores the running list and creates another for each delimiter.\n    for (let i = 0; i < list.length; i++) {\n      if (list[i] === delimiter) {\n        lists.push([...currentList]);\n      } else {\n        currentList.push(list[i]);\n      }\n    }\n\n    if (currentList.length > 0) {\n      lists.push(currentList);\n    }\n\n    return lists;\n  }\n\n  /** Converts the given string to tokens. */\n  public tokenize(expression: string): IToken[] {\n    const tokensList: IToken[] = [];\n    let token = \"\";\n\n    // Catches null or whitespace strings.\n    if (expression.trim() === \"\") {\n      throw new Error(\"Parser: No expression provided.\");\n    }\n\n    // Lowercases and removes whitespaces.\n    expression = expression.replace(/\\s/gm, \"\").toLowerCase();\n\n    // Builds a token list.\n    let longestMatch: IToken | null = null;\n    let shortestMatch: IToken | null = null;\n    let candidateBeforeDefer: IToken | null = null;\n\n    for (let i = 0; i < expression.length; i++) {\n      token += expression[i];\n\n      // Matches longer tokens and tokens of the same length.\n      longestMatch = this.tokens.filter((tok) => tok.strForm === token)[0];\n\n      // Defers when the token is longer.\n      if (i !== expression.length - 1 && longestMatch?.strForm.length > token.length) {\n        shortestMatch = this.tokens.filter((tok) => tok.strForm === token)[0];\n\n        // Stores valid matches as token matching is deferred.\n        if (shortestMatch?.strForm === token) {\n          candidateBeforeDefer = shortestMatch;\n\n          // Adds the token if at end rather than deferring.\n          if (i === expression.length - 1) {\n            tokensList.push(shortestMatch);\n            token = \"\";\n            candidateBeforeDefer = null;\n          }\n        }\n      }\n\n      // Matches when there are no longer candidates.\n      else if (longestMatch !== null && (i !== expression.length - 1 || longestMatch.strForm.length === token.length)) {\n        tokensList.push(longestMatch);\n        token = \"\";\n        candidateBeforeDefer = null;\n      } else {\n        // Backtracks to the last valid token.\n        if (candidateBeforeDefer !== null) {\n          i -= token.length - candidateBeforeDefer.strForm.length;\n          tokensList.push(candidateBeforeDefer);\n          token = \"\";\n          candidateBeforeDefer = null;\n        }\n\n        // Matches literals.\n        else if (numberRegex.test(token)) {\n          const val = parseFloat(token);\n\n          // Adds the numeric token at end of string or boundary.\n          if (i === expression.length - 1 || !numberRegex.test(token + expression[i + 1])) {\n            tokensList.push(new TokenNum(val));\n            token = \"\";\n          }\n        }\n\n        // Matches unknowns by-character if allowed.\n        else if (this.optIncludeUnknowns) {\n          tokensList.push(new TokenId(token[0].toString(), null));\n          i -= token.length - 1;\n          token = \"\";\n        } else {\n          throw new Error(\"Parser: token '\" + token + \"' is not a recognized symbol.\");\n        }\n      }\n    }\n\n    // Combines contiguous tokens. If the resulting token exists, uses it. Else, adds as unknown or\n    // throws an error.\n    let combinedTokens: IToken[] = [];\n    let unknownTokenName = \"\";\n\n    // Combines contiguous unknowns. Sets tokens to be subtraction rather than negation by default.\n    for (let i = 0; i < tokensList.length; i++) {\n      // Break and add while looking ahead.\n      if (\n        i === tokensList.length - 1 ||\n        tokensList[i + 1] instanceof TokenOp ||\n        tokensList[i + 1] instanceof TokenSym\n      ) {\n        if (unknownTokenName !== \"\") {\n          unknownTokenName += tokensList[i].strForm;\n\n          if (this.optIncludeUnknowns) {\n            combinedTokens.push(new TokenId(unknownTokenName, null));\n            unknownTokenName = \"\";\n            continue;\n          } else {\n            throw new Error(\"Parser: token '\" + unknownTokenName + \"' is not a recognized symbol.\");\n          }\n        }\n      }\n\n      // Append.\n      else if (!(tokensList[i] instanceof TokenOp || tokensList[i] instanceof TokenSym)) {\n        if (unknownTokenName !== \"\" || !(tokensList[i] instanceof TokenNum)) {\n          unknownTokenName += tokensList[i].strForm;\n          continue;\n        }\n      }\n\n      // Add other tokens, favoring subtraction over negation.\n      if (tokensList[i] === this.Neg) {\n        combinedTokens.push(this.Sub);\n      } else {\n        combinedTokens.push(tokensList[i]);\n      }\n    }\n\n    return combinedTokens;\n  }\n}\n","let uniqueActionType = Number.MIN_SAFE_INTEGER;\n\n/**\n * Action types must be unique across all reducers.\n * This assigns a globally unique id every time it's called.\n */\nexport const getActionGuid = () => {\n  return (++uniqueActionType).toString();\n};\n\n/** The expected type of any action. */\nexport interface IAction {\n  type: string;\n}\n","import { getActionGuid } from \"../../common/redux/reduxTools\";\n\nexport const actions = {\n  newStory: getActionGuid(),\n  rerenderStory: getActionGuid(),\n  saveAndRunStory: getActionGuid(),\n  updateStory: getActionGuid(),\n};\n\n/** Starts a new story, resetting all values to default. */\nexport const newStory = {\n  type: actions.newStory,\n};\n\n/** Re-renders the visual state of the interpreter.  */\nexport const rerenderStory = {\n  type: actions.rerenderStory,\n};\n\n/** Runs the story and save as needed. */\nexport const saveAndRunStory = (story: string) => {\n  return {\n    story,\n    type: actions.saveAndRunStory,\n  };\n};\n\n/** Updates the contents of the story. */\nexport const updateStory = (story: string) => {\n  return {\n    story,\n    type: actions.updateStory,\n  };\n};\n","import { DefaultButton } from \"@fluentui/react\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { commandIds, invokeCommand } from \"../../common/commands/CommandHandler\";\nimport { routes } from \"../../common/routing/Routing\";\nimport { welcomeButtonStyle } from \"../../common/styles/controlStyles\";\nimport { IRootState } from \"../../store\";\nimport { getStrings } from \"../../common/localization/Localization\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    strings: getStrings(state.settings.locale),\n    theme: state.settings.theme,\n  };\n};\n\ntype WelcomeOwnProps = {};\ntype CombinedProps = WelcomeOwnProps & RouteComponentProps & ReturnType<typeof mapStateToProps>;\n\nexport class WelcomeC extends React.Component<CombinedProps> {\n  public render() {\n    const buttonStyle = welcomeButtonStyle((this.props as CombinedProps).theme.theme);\n    return (\n      <div\n        style={{\n          alignContent: \"center\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          height: \"90vh\",\n          justifyContent: \"center\",\n        }}\n      >\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <DefaultButton onClick={this.onClickPlayProject} styles={buttonStyle}>\n            {(this.props as CombinedProps).strings.WelcomeButtonOpenPlay}\n          </DefaultButton>\n        </div>\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <DefaultButton onClick={this.onClickEditProject} styles={buttonStyle}>\n            {(this.props as CombinedProps).strings.WelcomeButtonOpenEdit}\n          </DefaultButton>\n        </div>\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <DefaultButton onClick={this.onClickNew} styles={buttonStyle}>\n            {(this.props as CombinedProps).strings.WelcomeButtonNew}\n          </DefaultButton>\n        </div>\n      </div>\n    );\n  }\n\n  private onClickPlayProject = () => {\n    invokeCommand(commandIds.openProjectOrGame, {\n      data: {\n        data: () => {\n          this.props.history.push(routes.play);\n        },\n      },\n    });\n  };\n\n  private onClickEditProject = () => {\n    invokeCommand(commandIds.openProjectOrGame, {\n      data: {\n        data: () => {\n          this.props.history.push(routes.edit);\n        },\n      },\n    });\n  };\n\n  private onClickNew = () => {\n    invokeCommand(commandIds.newProject, { data: this.props.history });\n    this.props.history.push(routes.edit);\n  };\n}\n\nexport const Welcome = connect(mapStateToProps)(withRouter(WelcomeC));\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { idEditorInputfield } from \"../../common/identifiers\";\nimport { dispatchSaveAndRunStory, dispatchSetStory } from \"./viewedit.reducers\";\nimport { IRootState } from \"../../store\";\nimport { editorTextAreaStyle } from \"../../common/styles/controlStyles\";\nimport { PrimaryButton } from \"@fluentui/react/lib/components/Button/PrimaryButton/PrimaryButton\";\nimport { getStrings } from \"../../common/localization/Localization\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    story: state.viewEdit.story,\n    strings: getStrings(state.settings.locale),\n    theme: state.settings.theme,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    saveAndRunStory: dispatchSaveAndRunStory(dispatch),\n    setStory: dispatchSetStory(dispatch),\n  };\n};\n\nexport type EditorViewOwnProps = {};\n\ntype CombinedProps = EditorViewOwnProps & ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nexport class EditorViewC extends React.Component<EditorViewOwnProps> {\n  public componentDidUpdate(prevProps: EditorViewOwnProps) {\n    if ((this.props as CombinedProps).story !== (prevProps as CombinedProps).story) {\n      const textArea = document.getElementById(idEditorInputfield) as HTMLTextAreaElement | undefined;\n\n      if (textArea) {\n        textArea.value = (this.props as CombinedProps).story;\n      }\n    }\n  }\n\n  /** Saves the story automatically when switching away from the page that renders the editor view. */\n  public componentWillUnmount() {\n    const currentStory = (document.getElementById(idEditorInputfield) as HTMLTextAreaElement).value;\n\n    if ((this.props as CombinedProps).story !== currentStory) {\n      (this.props as CombinedProps).setStory(currentStory);\n    }\n  }\n\n  public render() {\n    const combinedProps = this.props as CombinedProps;\n\n    return (\n      <>\n        <textarea\n          defaultValue={(this.props as CombinedProps).story}\n          style={editorTextAreaStyle((this.props as CombinedProps).theme.theme)}\n          id={idEditorInputfield}\n          onBlur={this.updateStory}\n        />\n        <div style={{ display: \"flex\", flexDirection: \"row-reverse\" }}>\n          <PrimaryButton\n            styles={{ root: { display: \"block\" } }}\n            text={combinedProps.strings.EditorPlay}\n            onClick={this.runStory}\n          />\n        </div>\n      </>\n    );\n  }\n\n  private runStory = () => {\n    const currentStory = (document.getElementById(idEditorInputfield) as HTMLTextAreaElement).value;\n    (this.props as CombinedProps).saveAndRunStory(currentStory);\n  };\n\n  private updateStory = (ev: React.FocusEvent<HTMLTextAreaElement>) => {\n    if ((this.props as CombinedProps).story !== ev.currentTarget.value) {\n      (this.props as CombinedProps).setStory(ev.currentTarget.value);\n    }\n  };\n}\n\nexport const EditorView = connect(mapStateToProps, mapDispatchToProps)(EditorViewC);\n","/**\n * Contains text to execute if its conditions are met, with links to the parent and child nodes.\n */\nexport class StoryParseNode {\n  /** Contains a list of conditions to be met for text to be considered. */\n  public condition: string;\n\n  /** Contains text to be processed only if the conditions are met. */\n  public text: string;\n\n  /** References the parent node, if any. */\n  public parent: StoryParseNode | null;\n\n  /** References the child nodes, if any. */\n  public children: StoryParseNode[];\n\n  constructor() {\n    this.condition = \"\";\n    this.text = \"\";\n    this.parent = null;\n    this.children = [];\n  }\n}\n","import { StoryParseNode } from \"./storyParseNode\";\nimport { StoryInterpreterC } from \"./storyInterpreter\";\n\n// TODO: localize strings in this file.\n\nconst doubleSlashRegex = /\\/\\//g;\nconst ifRegex = /\\bif\\b/g;\nconst endIfRegex = /\\bendif\\b/g;\n\n/** Maps named pages to nodes. */\nexport interface IPageDictionary {\n  [key: string]: StoryParseNode;\n}\n\n/**\n * Returns whether the substring formed by the index and length is on the same line as an @ symbol.\n * Does not support nesting.\n */\nfunction isOption(text: string, index: number) {\n  let startOfLine = text.substring(0, index).lastIndexOf(\"\\n\");\n\n  if (startOfLine === -1) {\n    startOfLine = 0;\n  }\n\n  let endOfLine = text.substring(index).indexOf(\"\\n\");\n\n  if (endOfLine === -1) {\n    endOfLine = text.length - 1;\n  }\n\n  endOfLine += index;\n  const line = text.substring(startOfLine, endOfLine);\n\n  return line.includes(\"@\");\n}\n\n/**\n * Returns whether the substring formed by the index and length is in curly brackets in the given\n * text. Does not support nesting.\n */\nfunction isOutput(text: string, index: number) {\n  const beforeSubstring = text.substring(0, index);\n  const bracketOpenPos = beforeSubstring.lastIndexOf(\"{\");\n  const bracketClosePos = beforeSubstring.lastIndexOf(\"}\");\n\n  if (bracketOpenPos < bracketClosePos || bracketOpenPos === -1) {\n    return false;\n  }\n\n  return true;\n}\n\n/** Updates the passed-in interpreter with a node tree for each fork. */\nexport function parseStory(story: string, interpreter: StoryInterpreterC | null, forkToLoad?: string) {\n  const entries: { [key: string]: string } = {};\n  const parsed: { [key: string]: StoryParseNode } = {};\n\n  const entryPositions: number[] = [];\n  const newlineSplitStory = story.split(\"\\n\");\n\n  if (newlineSplitStory.length === 0) {\n    interpreter?.setEntries({});\n    interpreter?.setErrorMessage(\"Parser: Story is blank. The story must not be blank to parse it.\");\n  }\n\n  // Finds fork header positions, normalizes line endings, and removes excess space.\n  for (let i = 0; i < newlineSplitStory.length; i++) {\n    newlineSplitStory[i] = newlineSplitStory[i].replace(\"\\r\", \"\").trim();\n\n    if (newlineSplitStory[i].startsWith(\"@\")) {\n      entryPositions.push(i);\n    }\n  }\n\n  // Interprets all text up to the first header as game options.\n  let header = \"\";\n\n  if (entryPositions.length > 0) {\n    for (let i = 0; i < entryPositions[0]; i++) {\n      header += newlineSplitStory[i] + \"\\n\";\n    }\n\n    interpreter?.processHeaderOptions(header);\n  }\n\n  // Splits entries into a dictionary.\n  for (let i = 0; i < entryPositions.length; i++) {\n    // Prevents unnamed entries.\n    if (newlineSplitStory[entryPositions[i]].length < 2) {\n      interpreter?.setErrorMessage(\n        \"Parser: Entry\" + newlineSplitStory[entryPositions[i]] + \"must be at least 1 character long.\"\n      );\n\n      continue;\n    }\n\n    // Stores the fork header name, content, and content by line.\n    let entryName = newlineSplitStory[entryPositions[i]].substring(1);\n    let entryList: string[] = [];\n    let entry = \"\";\n\n    // Associates forks with their content.\n    if (i === entryPositions.length - 1) {\n      entryList = newlineSplitStory.slice(entryPositions[i], newlineSplitStory.length);\n    } else {\n      entryList = newlineSplitStory.slice(entryPositions[i], entryPositions[i + 1]);\n    }\n\n    // Concatenates each line of text.\n    for (let j = 1; j < entryList.length; j++) {\n      entry += entryList[j] + \"\\n\";\n    }\n\n    entryName = entryName.replace(/\\s+/g, \"\").toLowerCase();\n\n    if (entries[entryName] !== undefined) {\n      interpreter?.setErrorMessage(`Parser: Entry called '${entryName}' already exists.`);\n    } else {\n      entries[entryName] = entry;\n    }\n  }\n\n  // Removes single-line comments from entries.\n  const entriesKeys = Object.keys(entries);\n  for (let i = 0; i < entriesKeys.length; i++) {\n    let isFinished: boolean;\n    let entry = entries[entriesKeys[i]];\n\n    do {\n      isFinished = true;\n\n      let match: RegExpExecArray | null = null;\n\n      // Determines if candidates are output text or commands.\n      while ((match = doubleSlashRegex.exec(entry)) !== null) {\n        const pos = match.index;\n\n        // Real comments are removed.\n        if (!isOutput(entry, pos) && !isOption(entry, pos)) {\n          entry = entry.slice(pos, entry.substring(pos).indexOf(\"\\n\"));\n\n          // Comment indices are invalidated. Search again as long as comments might exist (until\n          // all are found // instances are output text).\n          isFinished = false;\n          break;\n        }\n      }\n    } while (!isFinished);\n\n    // Sets the entry.\n    entries[entriesKeys[i]] = entry;\n  }\n\n  // Creates a parse tree.\n  for (let i = 0; i < entriesKeys.length; i++) {\n    const root = new StoryParseNode();\n    let node = root;\n    let depth = 0;\n\n    // The full entry.\n    const text = entries[entriesKeys[i]];\n\n    // Finds all if and endif words.\n    let ifMatches: RegExpExecArray[] = [];\n    let endIfMatches: RegExpExecArray[] = [];\n    let match: RegExpExecArray | null = null;\n    const ifs: number[] = [];\n    const endifs: number[] = [];\n\n    // Determines if candidates are output text or commands.\n    while ((match = ifRegex.exec(text)) !== null) {\n      ifMatches.push(match);\n    }\n\n    while ((match = endIfRegex.exec(text)) !== null) {\n      endIfMatches.push(match);\n    }\n\n    // Filters out if and endif words that are part of output text.\n    for (let j = 0; j < ifMatches.length; j++) {\n      if (!isOutput(text, ifMatches[j].index) && !isOption(text, ifMatches[j].index)) {\n        ifs.push(ifMatches[j].index);\n      }\n    }\n\n    for (let j = 0; j < endIfMatches.length; j++) {\n      if (!isOutput(text, endIfMatches[j].index) && !isOption(text, endIfMatches[j].index)) {\n        endifs.push(endIfMatches[j].index);\n      }\n    }\n\n    // Ensures the number of if and endif statements match.\n    if (ifs.length !== endifs.length) {\n      interpreter?.setErrorMessage(\n        `Parser: found ${ifs.length} if tokens, but ${endifs.length} ` +\n          \"endif tokens. Ifs and endifs must match in number.\"\n      );\n    }\n\n    // Creates a list of all if and endif statements by index, where ifs are encoded by 0 and endifs by 1.\n    let allMatches: { item1: number; item2: number }[] = [];\n\n    for (let j = 0; j < ifs.length; j++) {\n      allMatches.push({ item1: ifs[j], item2: 0 });\n    }\n\n    for (let j = 0; j < endifs.length; j++) {\n      allMatches.push({ item1: endifs[j], item2: 1 });\n    }\n\n    // Orders all ifs and endifs in ascending order by index.\n    allMatches = allMatches.sort((a, b) => (a.item1 > b.item1 ? 1 : -1));\n\n    // Iterates over all ifs and endifs to create a tree.\n    for (let j = 0; j < allMatches.length; j++) {\n      // The index, condition, and type (if, endif) of the match.\n      let elemBegin = allMatches[j].item1;\n      let elemType = allMatches[j].item2;\n      let cond = text.substring(elemBegin);\n      cond = cond.slice(0, cond.indexOf(\"\\n\"));\n\n      // The index and condition of the previous if.\n      let prevIfBegin = -1;\n      let prevIfCond = \"\";\n\n      for (let k = j - 1; k >= 0; k--) {\n        if (allMatches[k].item2 === 0) {\n          prevIfBegin = allMatches[k].item1;\n          prevIfCond = text.substring(prevIfBegin);\n          prevIfCond = prevIfCond.slice(0, prevIfCond.indexOf(\"\\n\"));\n          break;\n        }\n      }\n\n      // The index and condition of the previous endif.\n      let prevEndIfBegin = -1;\n      let prevEndIfCond = \"\";\n\n      for (let k = j - 1; k >= 0; k--) {\n        if (allMatches[k].item2 === 1) {\n          prevEndIfBegin = allMatches[k].item1;\n          prevEndIfCond = text.substring(prevEndIfBegin);\n          prevEndIfCond = prevEndIfCond.slice(0, prevEndIfCond.indexOf(\"\\n\"));\n          break;\n        }\n      }\n\n      // Uses the previous if/endif; whichever is closer.\n      let prevElemBegin = prevEndIfBegin > prevIfBegin ? prevEndIfBegin : prevIfBegin;\n      let prevElemCond = prevElemBegin === prevEndIfBegin ? prevEndIfCond : prevIfCond;\n\n      // Handles if keywords.\n      if (elemType === 0) {\n        // Adds text between matched keywords. If text was simply concatenated, it wouldn't preserve order.\n        if (j !== 0 && prevIfBegin !== -1) {\n          // From if to last if.\n          let textNode = new StoryParseNode();\n          textNode.parent = node;\n\n          // Determines if the length is negative.\n          const prevElemEnd = prevElemBegin + prevElemCond.length;\n\n          if (elemBegin - prevElemEnd < 0) {\n            interpreter?.setErrorMessage(\n              `Parser: In '${text.substring(prevElemBegin)}', cannot specify multiple if tokens on one line.`\n            );\n\n            continue;\n          }\n\n          textNode.text += text.substring(prevElemEnd, elemBegin);\n\n          if (!(textNode.children.length === 0 && textNode.condition.trim() === \"\" && textNode.text.trim() === \"\")) {\n            node.children.push(textNode);\n          }\n        } else if (elemBegin > 0) {\n          // From start of entry to if.\n          const textNode = new StoryParseNode();\n          textNode.parent = node;\n          textNode.text += text.substring(0, elemBegin);\n\n          if (!(textNode.children.length === 0 && textNode.condition.trim() === \"\" && textNode.text.trim() === \"\")) {\n            node.children.push(textNode);\n          }\n        }\n\n        // Creates a child node and sets its parent.\n        const newChild = new StoryParseNode();\n        newChild.parent = node;\n\n        // Adds the found if statement to the conditions list.\n        newChild.condition = cond;\n\n        // Adds the child node and moves node to point to it.\n        if (!(newChild.children.length === 0 && newChild.condition.trim() === \"\" && newChild.text.trim() === \"\")) {\n          node.children.push(newChild);\n        }\n\n        node = newChild;\n        depth++;\n      }\n\n      // Handles endif keywords.\n      else if (elemType === 1) {\n        // The parser always returns since it cannot continue.\n        if (depth < 0) {\n          interpreter?.setEntries({});\n          interpreter?.setErrorMessage(\"Parser: an extra endif token was encountered (if/endif # \" + (j + 1) + \").\");\n\n          return;\n        }\n\n        // Adds text between matched keywords.\n        const textNode = new StoryParseNode();\n        textNode.parent = node;\n\n        // Determines if the length is negative.\n        const prevElemEnd = prevElemBegin + prevElemCond.length;\n        if (elemBegin - prevElemEnd < 0) {\n          interpreter?.setErrorMessage(\n            \"Parser: In '\" + text.substring(prevElemBegin) + \"', cannot specify multiple endif tokens on one line.\"\n          );\n\n          continue;\n        }\n\n        textNode.text += text.substring(prevElemEnd, elemBegin);\n\n        if (!(textNode.children.length === 0 && textNode.condition.trim() === \"\" && textNode.text.trim() === \"\")) {\n          node.children.push(textNode);\n        }\n\n        // Points to the node's parent if possible.\n        if (node.parent !== null) {\n          node = node.parent;\n        } else {\n          interpreter?.setEntries({});\n          interpreter?.setErrorMessage(\"Parser: an extra endif token was encountered (endif #\" + j + \").\");\n\n          return;\n        }\n      }\n    }\n\n    // Adds all text after last if/endif to the first node.\n    if (allMatches.length > 0) {\n      let lastElemBegin = allMatches[allMatches.length - 1].item1;\n      let lastCond = text.substring(lastElemBegin);\n      let lastCondLength = lastCond.indexOf(\"\\n\");\n\n      /**\n       * Since commands must be on their own lines, if there is no newline after the last command,\n       * it's the last line in the entry. This means there's nothing after it. So the last\n       * condition executes only if this is false.\n       */\n      if (lastCondLength !== -1) {\n        let textNode = new StoryParseNode();\n        textNode.parent = root;\n        textNode.text += text.substring(lastElemBegin + lastCondLength);\n\n        if (!(textNode.children.length === 0 && textNode.condition.trim() === \"\" && textNode.text.trim() === \"\")) {\n          root.children.push(textNode);\n        }\n      }\n    } else {\n      // Adds all text to the first node in the case that there were no ifs.\n      root.text += text;\n    }\n\n    // Adds the fully constructed entry.\n    parsed[entriesKeys[i]] = root;\n  }\n\n  interpreter?.setEntriesWithFork(parsed, forkToLoad ?? \"\");\n}\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoryInterpreterC, StoryInterpreter } from \"../../parse-story/storyInterpreter\";\nimport { parseStory } from \"../../parse-story/storyParser\";\nimport { IRootState } from \"../../store\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    renderTrigger: state.viewEdit.storyReparseToken, // Needed to re-render without story changing.\n    storyToParse: state.viewEdit.storyToParse,\n  };\n};\n\ntype RunnerViewOwnProps = {\n  /**\n   * If provided, parses this story instead of the current one, for e.g. live previews in the UI that won't conflict\n   * with the current one being read/written.\n   */\n  storyToParseOverride?: string;\n};\n\ntype CombinedProps = RunnerViewOwnProps & ReturnType<typeof mapStateToProps>;\n\nexport class RunnerViewC extends React.Component<RunnerViewOwnProps> {\n  private interpreterRef: StoryInterpreterC | null = null;\n\n  public componentDidUpdate() {\n    this.parse();\n  }\n\n  public render() {\n    return <StoryInterpreter ref={this.setInterpreterRef} />;\n  }\n\n  private setInterpreterRef = (ref: StoryInterpreterC | null) => {\n    if (ref !== null) {\n      this.interpreterRef = ref;\n      this.parse();\n    }\n  };\n\n  /** Parses the story with the given interpreter. */\n  private parse() {\n    if (this.interpreterRef === null) {\n      return;\n    }\n\n    try {\n      parseStory(this.props.storyToParseOverride ?? (this.props as CombinedProps).storyToParse, this.interpreterRef);\n    } catch (ex) {\n      if (typeof ex === \"string\") {\n        this.interpreterRef.setErrorMessage(ex);\n      } else if (ex instanceof Error) {\n        this.interpreterRef.setErrorMessage(ex.message);\n      }\n    }\n  }\n}\n\nexport const RunnerView = connect(mapStateToProps)(RunnerViewC);\n","import * as React from \"react\";\nimport { idEditorWrapper, idRunnerWrapper } from \"../../common/identifiers\";\nimport { mainViewWrapperStyle, mainViewEditorStyle, mainViewRunnerStyle } from \"../../common/styles/controlStyles\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store\";\nimport { EditorView } from \"../editor/EditorView\";\nimport { RunnerView } from \"../runner/RunnerView\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    theme: state.settings.theme,\n  };\n};\n\nexport type RunnerEditorOwnProps = {};\n\ntype CombinedProps = RunnerEditorOwnProps & ReturnType<typeof mapStateToProps>;\n\nexport class RunnerEditorViewC extends React.Component<RunnerEditorOwnProps> {\n  public render() {\n    return (\n      <>\n        <div className={mainViewWrapperStyle}>\n          <div id={idEditorWrapper} className={mainViewEditorStyle}>\n            <EditorView />\n          </div>\n          <div id={idRunnerWrapper} style={mainViewRunnerStyle((this.props as CombinedProps).theme.theme) as object}>\n            <RunnerView />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport const RunnerEditorView = connect(mapStateToProps)(RunnerEditorViewC);\n","import { ILocalizedStringSets } from \"../localization/Localization\";\nimport { getActionGuid } from \"../redux/reduxTools\";\nimport { ISupportedTheme } from \"../themes\";\n\nexport const actions = {\n  setLocale: getActionGuid(),\n  setTheme: getActionGuid(),\n};\n\n/** Action creator to store name of preferred color theme. */\nexport const setTheme = (theme: ISupportedTheme) => {\n  return {\n    theme,\n    type: actions.setTheme,\n  };\n};\n\n/** Action creator to store (lowercase) preferred locale id such as en-us. */\nexport const setLocale = (localeId: keyof ILocalizedStringSets) => {\n  return {\n    localeId,\n    type: actions.setLocale,\n  };\n};\n","import { IRootState } from \"../../store\";\nimport { getActionGuid } from \"../redux/reduxTools\";\nimport { themes } from \"../themes\";\n\n/** The object states to persist to local storage. */\nexport interface IPersistentState {\n  locale: IRootState[\"settings\"][\"locale\"];\n  playerStorySettings: IRootState[\"playerStorySettings\"];\n  saveFormatVersion: number;\n  theme: keyof typeof themes;\n}\n\nexport const actions = {\n  setCustomizationApplied: getActionGuid(),\n  setFromLocalStorage: getActionGuid(),\n  setUserConsentProvided: getActionGuid(),\n};\n\n/** Action creator to store whether the user has provided consent to using local storage. */\nexport const setUserConsentProvided = (consentProvided: boolean) => {\n  return {\n    consentProvided,\n    type: actions.setUserConsentProvided,\n  };\n};\n\n/** Action creator to store (lowercase) preferred locale id such as en-us. */\nexport const setCustomizationApplied = (isApplied: boolean) => {\n  return {\n    isApplied,\n    type: actions.setCustomizationApplied,\n  };\n};\n\n/** Loads settings saved to localstorage, provided the user has consented to store it. */\nexport const setFromLocalStorage = (persistentState: Partial<IPersistentState>) => {\n  return {\n    persistentState,\n    type: actions.setFromLocalStorage,\n  };\n};\n","import { combineReducers, Dispatch } from \"redux\";\nimport { getSupportedLocale, ILocalizedStringSets, supportedLocales } from \"../localization/Localization\";\nimport { ISupportedTheme, Themes, themes } from \"../themes\";\nimport { actions, setLocale, setTheme } from \"./settings.actions\";\nimport { loadTheme } from \"@fluentui/react/lib/Styling\";\nimport * as persistence from \"../storage/persistence.actions\";\nimport { IAction } from \"../redux/reduxTools\";\n\n/** The user's preferred theme. An empty string here should mean the default theme is applied. */\nconst theme = (state: ISupportedTheme = themes[Themes.Default], action: IAction) => {\n  if (action.type === actions.setTheme) {\n    const typedAction = action as ReturnType<typeof setTheme>;\n\n    if (state.theme !== typedAction.theme.theme) {\n      document.body.style.backgroundColor = typedAction.theme.theme.semanticColors.bodyBackground;\n      loadTheme(typedAction.theme.theme);\n      return typedAction.theme;\n    }\n  } else if (action.type === persistence.actions.setFromLocalStorage) {\n    const typedAction = action as ReturnType<typeof persistence.setFromLocalStorage>;\n\n    if (typedAction?.persistentState?.theme ?? false) {\n      try {\n        const typedTheme = typedAction.persistentState.theme as keyof typeof themes;\n\n        if (typeof typedAction.persistentState.theme === \"number\") {\n          const theme = themes[typedTheme];\n\n          if (theme) {\n            document.body.style.backgroundColor = theme.theme.semanticColors.bodyBackground;\n            loadTheme(theme.theme);\n            return theme;\n          }\n        }\n      } catch {\n        // Ignore\n      }\n    }\n  }\n\n  return state;\n};\n\n/** Sets the full theme based on a partial theme and injects it to update components. */\nexport const dispatchSetTheme = (dispatch: Dispatch) => async (supportedTheme: ISupportedTheme) => {\n  dispatch(setTheme(supportedTheme));\n};\n\n/** The user's preferred language. */\nconst locale = (state = getSupportedLocale(), action: IAction) => {\n  if (action.type === actions.setLocale) {\n    const typedAction = action as ReturnType<typeof setLocale>;\n    return typedAction.localeId;\n  }\n\n  if (action.type === persistence.actions.setFromLocalStorage) {\n    const typedAction = action as ReturnType<typeof persistence.setFromLocalStorage>;\n\n    // Don't load with invalid or unsupported locales.\n    if (typedAction?.persistentState?.locale ?? false) {\n      const locales = Object.keys(supportedLocales) as (keyof typeof supportedLocales)[];\n\n      for (let i = 0; i < locales.length; i++) {\n        const locale = supportedLocales[locales[i]];\n        if (typedAction.persistentState.locale === locale) {\n          return typedAction.persistentState.locale;\n        }\n      }\n\n      return state;\n    }\n  }\n\n  return state;\n};\n\n/** Sets the locale id in lowercase, such as en-us. */\nexport const dispatchSetLocale = (dispatch: Dispatch) => async (localeId: keyof ILocalizedStringSets) => {\n  dispatch(setLocale(localeId));\n};\n\n// Combine reducers and typescript definition.\nexport interface ISettingState {\n  locale: keyof ILocalizedStringSets;\n  theme: ISupportedTheme;\n}\n\nexport const settings = combineReducers({\n  locale,\n  theme,\n});\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { commandBarDropdownStyle } from \"../../common/styles/controlStyles\";\nimport { IDropdownProps, IDropdownStyles } from \"@fluentui/react/lib/components/Dropdown/Dropdown.types\";\nimport { Dropdown } from \"@fluentui/react/lib/components/Dropdown/Dropdown\";\nimport { IRootState } from \"../../store\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    theme: state.settings.theme,\n  };\n};\n\n/** Main props associated with the MenuBarDropdown. */\nexport interface CommandBarDropdownProps {\n  dropdown: IDropdownProps;\n}\n\ntype CombinedProps = ReturnType<typeof mapStateToProps> & CommandBarDropdownProps;\n\n/** Renders a theme-connected dropdown styled for inclusion in the main command bar. */\nclass CommandBarDropdownC extends React.Component<CommandBarDropdownProps> {\n  public render() {\n    const { styles, ...props } = (this.props as CombinedProps).dropdown;\n    const stylesTyped = styles as IDropdownStyles;\n\n    return (\n      <Dropdown\n        {...props}\n        dropdownWidth=\"auto\"\n        styles={commandBarDropdownStyle((this.props as CombinedProps).theme.theme, stylesTyped)}\n      />\n    );\n  }\n}\n\nexport const CommandBarDropdown = connect(mapStateToProps)(CommandBarDropdownC);\n","import * as React from \"react\";\nimport { getTheme } from \"@fluentui/react/lib/Styling\";\nimport { ICommandBarItemProps } from \"@fluentui/react/lib/components/CommandBar/CommandBar.types\";\nimport { IDropdownOption } from \"@fluentui/react/lib/components/Dropdown/Dropdown.types\";\nimport { Icon } from \"@fluentui/react/lib/components/Icon/Icon\";\nimport { getStrings } from \"../../common/localization/Localization\";\nimport { localizedStrings } from \"../../common/localization/LocalizedStrings\";\nimport { dispatchSetLocale, dispatchSetTheme } from \"../../common/settings/settings.reducers\";\nimport {\n  iconSpaceBeforeTextStyle,\n  commandBarDropdownSeparatorStyle,\n  commandBarDropdownButtonStyle,\n} from \"../../common/styles/controlStyles\";\nimport { themes, ISupportedTheme } from \"../../common/themes\";\nimport { IRootState } from \"../../store\";\nimport { CommandBarDropdown } from \"./MenuBarDropdown\";\n\ninterface IValues {\n  locale: IRootState[\"settings\"][\"locale\"];\n  reduxState: IRootState;\n  strings: ReturnType<typeof getStrings>;\n  themeName: IRootState[\"settings\"][\"theme\"][\"localizedName\"];\n  userConsentProvided: IRootState[\"persistence\"][\"userConsentProvided\"];\n  wholeTheme: ReturnType<typeof getTheme>;\n  setLocale: ReturnType<typeof dispatchSetLocale>;\n  setTheme: ReturnType<typeof dispatchSetTheme>;\n}\n\n/** Returns command bar items that should be globally available. */\nexport const getCommonCommandItems = (values: IValues): ICommandBarItemProps[] => {\n  /** Renders the dropdown for the locale picker control. */\n  const renderLocaleDropdown = () => {\n    const options: IDropdownOption[] = [];\n\n    // Populates the available locales.\n    Object.keys(localizedStrings).forEach((localeOption: string) => {\n      options.push({\n        data: localeOption,\n        key: getLocaleDropdownOptionKey(localeOption),\n        text: localizedStrings[localeOption as keyof typeof localizedStrings].LanguageCodeName,\n      });\n    });\n\n    /** Switches all GUI to display in the user-chosen language. */\n    const updateChangedLocale = (_: React.FormEvent<HTMLDivElement>, option?: IDropdownOption) => {\n      if (option !== undefined) {\n        const localeId = option.data as keyof typeof localizedStrings;\n        values.setLocale(localeId);\n      }\n    };\n\n    /** Renders the locale dropdown and name of the currently-chosen language. */\n    const renderDropdownTitle = () => (\n      <>\n        <Icon iconName=\"LocaleLanguage\" styles={iconSpaceBeforeTextStyle} />\n        <span style={{ fontSize: `${values.wholeTheme.fonts.large}` }}>\n          {localizedStrings[values.locale].LanguageCodeName}\n        </span>\n      </>\n    );\n\n    return (\n      <CommandBarDropdown\n        dropdown={{\n          defaultSelectedKey: getLocaleDropdownOptionKey(values.locale),\n          onRenderTitle: renderDropdownTitle,\n          options: options,\n          onChange: updateChangedLocale,\n        }}\n      />\n    );\n  };\n\n  /** Renders the dropdown for the theme picker control. */\n  const renderThemeDropdown = () => {\n    const options: IDropdownOption[] = [];\n\n    // Populates the available themes.\n    Object.keys(themes).forEach((themeKey: string) => {\n      const theme = themes[themeKey as unknown as keyof typeof themes];\n\n      options.push({\n        data: theme,\n        key: getThemeDropdownOptionKey(theme.localizedName),\n        text: theme.localizedName,\n      });\n    });\n\n    /** Switches all GUI to display with the chosen theme. */\n    const updateChangedTheme = (_: React.FormEvent<HTMLDivElement>, option?: IDropdownOption) => {\n      if (option !== undefined) {\n        const theme = option.data as ISupportedTheme;\n        values.setTheme(theme);\n      }\n    };\n\n    /** Renders the theme dropdown and name of the currently-chosen theme. */\n    const renderDropdownTitle = () => (\n      <span style={{ fontSize: `${values.wholeTheme.fonts.large}` }}>\n        {values.strings.ThemeDropdownText(values.themeName)}\n      </span>\n    );\n\n    return (\n      <CommandBarDropdown\n        dropdown={{\n          defaultSelectedKey: getThemeDropdownOptionKey(values.themeName),\n          onRenderTitle: renderDropdownTitle,\n          options: options,\n          onChange: updateChangedTheme,\n          styles: commandBarDropdownSeparatorStyle(values.wholeTheme),\n        }}\n      />\n    );\n  };\n\n  // Theme and language options.\n  return [\n    {\n      ariaLabel: values.strings.TipTheme,\n      key: \"userSettingsCommandBarChosenTheme\",\n      onRender: renderThemeDropdown,\n      buttonStyles: commandBarDropdownButtonStyle(),\n    },\n    {\n      ariaLabel: values.strings.TipLanguage,\n      key: \"userSettingsCommandBarChosenLocale\",\n      onRender: renderLocaleDropdown,\n    },\n  ];\n};\n\n/** Generates a key for options in the locale dropdown menu. */\nfunction getLocaleDropdownOptionKey(localeId: string) {\n  return `userSettingsLocaleOptions${localeId}`;\n}\n\n/** Generates a key for options in the theme dropdown menu. */\nfunction getThemeDropdownOptionKey(themeName: string) {\n  return `userSettingsThemeOptions${themeName}`;\n}\n","import { getStrings } from \"../../common/localization/Localization\";\nimport { commandBarItemStyle } from \"../../common/styles/controlStyles\";\nimport { getTheme } from \"@fluentui/react/lib/Styling\";\nimport { ICommandBarItemProps } from \"@fluentui/react/lib/components/CommandBar/CommandBar.types\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { routes } from \"../../common/routing/Routing\";\n\ninterface IValues {\n  history: RouteComponentProps[\"history\"];\n  strings: ReturnType<typeof getStrings>;\n  wholeTheme: ReturnType<typeof getTheme>;\n}\n\n/** Returns command bar items associated with the runner settings page. */\nexport const getRunnerSettingsCommandItems = (values: IValues) => {\n  const items: ICommandBarItemProps[] = [\n    {\n      className: commandBarItemStyle(values.wholeTheme, true),\n      key: \"userSettingsCommandBarMenuBack\",\n      name: values.strings.MenuBack,\n      iconProps: { iconName: \"Back\" },\n      onClick: () => {\n        values.history.push(routes.play);\n      },\n    },\n  ];\n\n  return { items };\n};\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { getTheme } from \"@fluentui/react/lib/Styling\";\nimport { ICommandBarItemProps } from \"@fluentui/react/lib/components/CommandBar/CommandBar.types\";\nimport { CommandBar } from \"@fluentui/react/lib/components/CommandBar/CommandBar\";\nimport { isOnPage } from \"../../common/routing/Routing\";\nimport { IRootState } from \"../../store\";\nimport { getStrings } from \"../../common/localization/Localization\";\nimport { dispatchSetLocale, dispatchSetTheme } from \"../../common/settings/settings.reducers\";\nimport { getEditorCommandItems } from \"../editor/EditorMenuItems\";\nimport { commandBarStyle } from \"../../common/styles/controlStyles\";\nimport { getRunnerCommandItems } from \"../runner/RunnerMenuItems\";\nimport { getCommonCommandItems } from \"./CommonMenuItems\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { getRunnerSettingsCommandItems } from \"../runner-settings-page/RunnerSettingsMenuItems\";\nimport { getEditorSettingsCommandItems } from \"../editor-settings-page/EditorSettingsMenuItems\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    locale: state.settings.locale,\n    reduxState: state,\n    strings: getStrings(state.settings.locale),\n    themeName: state.settings.theme.localizedName,\n    userConsentProvided: state.persistence.userConsentProvided,\n    wholeTheme: getTheme(),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    setLocale: dispatchSetLocale(dispatch),\n    setTheme: dispatchSetTheme(dispatch),\n  };\n};\n\ntype MenuBarOwnProps = {};\ntype MenuBarRoutingProps = MenuBarOwnProps & RouteComponentProps;\ntype CombinedProps = MenuBarRoutingProps & ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nexport class MenuBarC extends React.Component<MenuBarRoutingProps> {\n  public render() {\n    const combinedProps = this.props as CombinedProps;\n\n    let items: ICommandBarItemProps[];\n    let farItems = getCommonCommandItems(combinedProps);\n\n    if (isOnPage(\"edit\")) {\n      const editorItems = getEditorCommandItems(combinedProps);\n      items = editorItems.items;\n      farItems = [...editorItems.farItems, ...farItems];\n    } else if (isOnPage(\"editSettings\")) {\n      const editorSettingsItems = getEditorSettingsCommandItems(combinedProps);\n      items = editorSettingsItems.items;\n      farItems = [];\n    } else if (isOnPage(\"play\")) {\n      const runnerItems = getRunnerCommandItems(combinedProps);\n      items = runnerItems.items;\n      farItems = [...runnerItems.farItems, ...farItems];\n    } else if (isOnPage(\"playSettings\")) {\n      const runnerSettingsItems = getRunnerSettingsCommandItems(combinedProps);\n      items = runnerSettingsItems.items;\n      farItems = [];\n    } else {\n      items = [];\n    }\n\n    return (\n      <CommandBar\n        ariaLabel={combinedProps.strings.TipNavigateCommandBar}\n        items={items}\n        farItems={farItems}\n        styles={commandBarStyle}\n      />\n    );\n  }\n}\n\nexport const MenuBar = connect(mapStateToProps, mapDispatchToProps)(withRouter(MenuBarC));\n","import { getStrings } from \"../../common/localization/Localization\";\nimport { commandBarItemStyle } from \"../../common/styles/controlStyles\";\nimport { getTheme } from \"@fluentui/react/lib/Styling\";\nimport { ICommandBarItemProps } from \"@fluentui/react/lib/components/CommandBar/CommandBar.types\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { commandIds, invokeCommand } from \"../../common/commands/CommandHandler\";\nimport { routes } from \"../../common/routing/Routing\";\n\ninterface IValues {\n  history: RouteComponentProps[\"history\"];\n  strings: ReturnType<typeof getStrings>;\n  wholeTheme: ReturnType<typeof getTheme>;\n}\n\n/** Returns command bar items associated with the editor. */\nexport const getEditorCommandItems = (values: IValues) => {\n  const items: ICommandBarItemProps[] = [\n    {\n      className: commandBarItemStyle(values.wholeTheme, true),\n      data: commandIds.newProject,\n      key: \"userSettingsCommandBarFileMenuNew\",\n      name: values.strings.MenuFileNew,\n      iconProps: { iconName: \"FabricNewFolder\" },\n      onClick: () => invokeCommand(commandIds.newProject),\n    },\n    {\n      className: commandBarItemStyle(values.wholeTheme, true),\n      data: commandIds.openProjectOrGame,\n      key: \"userSettingsCommandBarFileMenuOpen\",\n      name: values.strings.MenuFileOpen,\n      iconProps: { iconName: \"OpenFolderHorizontal\" },\n      onClick: () => invokeCommand(commandIds.openProjectOrGame),\n    },\n    {\n      className: commandBarItemStyle(values.wholeTheme),\n      data: commandIds.saveProjectOrGame,\n      key: \"userSettingsCommandBarFileMenuSave\",\n      name: values.strings.MenuFileSave,\n      iconProps: { iconName: \"Save\" },\n      onClick: () => invokeCommand(commandIds.saveProjectOrGame),\n    },\n    {\n      className: commandBarItemStyle(values.wholeTheme),\n      key: \"userSettingsCommandBarPrefMenuSettings\",\n      name: values.strings.MenuFileSave,\n      iconOnly: true,\n      iconProps: { iconName: \"Settings\" },\n      onClick: () => {\n        values.history.push(routes.editSettings);\n      },\n      tooltipHostProps: { content: values.strings.MenuPrefEditorSettings },\n    },\n  ];\n\n  const farItems: ICommandBarItemProps[] = [\n    {\n      ariaLabel: values.strings.MenuFileSwitchToPlay,\n      className: commandBarItemStyle(values.wholeTheme),\n      data: commandIds.switchMode,\n      key: \"userSettingsCommandBarFileMenuSwitchMode\",\n      tooltipHostProps: { content: values.strings.MenuFileSwitchToPlay },\n      iconOnly: true,\n      iconProps: { iconName: \"Switch\" },\n      onClick: () => invokeCommand(commandIds.switchMode),\n    },\n  ];\n\n  return { items, farItems };\n};\n","import { getStrings } from \"../../common/localization/Localization\";\nimport { commandBarItemStyle } from \"../../common/styles/controlStyles\";\nimport { getTheme } from \"@fluentui/react/lib/Styling\";\nimport { ICommandBarItemProps } from \"@fluentui/react/lib/components/CommandBar/CommandBar.types\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { routes } from \"../../common/routing/Routing\";\n\ninterface IValues {\n  history: RouteComponentProps[\"history\"];\n  strings: ReturnType<typeof getStrings>;\n  wholeTheme: ReturnType<typeof getTheme>;\n}\n\n/** Returns command bar items associated with the editor settings page. */\nexport const getEditorSettingsCommandItems = (values: IValues) => {\n  const items: ICommandBarItemProps[] = [\n    {\n      className: commandBarItemStyle(values.wholeTheme, true),\n      key: \"userSettingsCommandBarMenuBack\",\n      name: values.strings.MenuBack,\n      iconProps: { iconName: \"Back\" },\n      onClick: () => {\n        values.history.push(routes.edit);\n      },\n    },\n  ];\n\n  return { items };\n};\n","import { commandIds, invokeCommand } from \"../../common/commands/CommandHandler\";\nimport { getStrings } from \"../../common/localization/Localization\";\nimport { commandBarItemStyle } from \"../../common/styles/controlStyles\";\nimport { getTheme } from \"@fluentui/react/lib/Styling\";\nimport { ICommandBarItemProps } from \"@fluentui/react/lib/components/CommandBar/CommandBar.types\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { routes } from \"../../common/routing/Routing\";\n\ninterface IValues {\n  history: RouteComponentProps[\"history\"];\n  strings: ReturnType<typeof getStrings>;\n  wholeTheme: ReturnType<typeof getTheme>;\n}\n\n/** Returns command bar items associated with the runner. */\nexport const getRunnerCommandItems = (values: IValues) => {\n  const items: ICommandBarItemProps[] = [\n    {\n      className: commandBarItemStyle(values.wholeTheme, true),\n      data: commandIds.openProjectOrGame,\n      key: \"userSettingsCommandBarFileMenuOpen\",\n      name: values.strings.MenuFileOpen,\n      iconProps: { iconName: \"OpenFolderHorizontal\" },\n      onClick: () => invokeCommand(commandIds.openProjectOrGame),\n    },\n    {\n      className: commandBarItemStyle(values.wholeTheme),\n      data: commandIds.saveProjectOrGame,\n      key: \"userSettingsCommandBarFileMenuSave\",\n      name: values.strings.MenuFileSave,\n      iconProps: { iconName: \"Save\" },\n      onClick: () => invokeCommand(commandIds.saveProjectOrGame),\n    },\n    {\n      ariaLabel: \"Settings\", //TODO: localize\n      className: commandBarItemStyle(values.wholeTheme),\n      key: \"userSettingsCommandBarPrefMenuSettings\",\n      name: values.strings.MenuFileSave,\n      iconOnly: true,\n      iconProps: { iconName: \"Settings\" },\n      onClick: () => {\n        values.history.push(routes.playSettings);\n      },\n      tooltipHostProps: { content: values.strings.MenuPrefRunnerSettings },\n    },\n  ];\n\n  const farItems: ICommandBarItemProps[] = [\n    {\n      ariaLabel: values.strings.MenuFileSwitchToEdit,\n      className: commandBarItemStyle(values.wholeTheme),\n      data: commandIds.switchMode,\n      key: \"userSettingsCommandBarFileMenuSwitchMode\",\n      tooltipHostProps: { content: values.strings.MenuFileSwitchToEdit },\n      iconOnly: true,\n      iconProps: { iconName: \"Switch\" },\n      onClick: () => invokeCommand(commandIds.switchMode),\n    },\n  ];\n\n  return { items, farItems };\n};\n","import { getActionGuid } from \"../../common/redux/reduxTools\";\nimport { IRunnerLogSeparatorStyle, IRunnerStyle, IPlayerRunnerOptions, ITextStyle } from \"../../common/redux/typedefs\";\n\nexport const actions = {\n  setPlayerStoryInputStyles: getActionGuid(),\n  setPlayerStoryLogSeparatorStyles: getActionGuid(),\n  setPlayerStoryOptionStyles: getActionGuid(),\n  setPlayerStoryOptionHighlightStyles: getActionGuid(),\n  setPlayerStoryOutputStyles: getActionGuid(),\n  setPlayerStoryRunnerOptions: getActionGuid(),\n  setPlayerStoryRunnerStyles: getActionGuid(),\n};\n\n/**\n * Sets the player preferred styling for previous textbox input from the player. This is the final styling.\n * The order goes built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setPlayerStoryInputStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setPlayerStoryInputStyles,\n    style,\n  };\n};\n\n/*\n * Sets the player preferred styling for the log separator. This is the final styling. The order goes\n * built-in defaults -> global story styling -> player style override.\n */\nexport const setPlayerStoryLogSeparatorStyles = (style: IRunnerLogSeparatorStyle) => {\n  return {\n    type: actions.setPlayerStoryLogSeparatorStyles,\n    style,\n  };\n};\n\n/**\n * Sets the player preferred styling for hyperlinks in the story. This is the final styling. The order goes\n * built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setPlayerStoryOptionStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setPlayerStoryOptionStyles,\n    style,\n  };\n};\n\n/**\n * Sets the player preferred styling for hovered hyperlinks in the story. This is the final styling. The\n * order goes built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setPlayerStoryOptionHighlightStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setPlayerStoryOptionHighlightStyles,\n    style,\n  };\n};\n\n/**\n * Sets the player preferred styling for all text output from the story. This is the final styling. The\n * order goes built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setPlayerStoryOutputStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setPlayerStoryOutputStyles,\n    style,\n  };\n};\n\n/**\n * Sets story options such as logging behavior.\n */\nexport const setPlayerStoryRunnerOptions = (options: IPlayerRunnerOptions) => {\n  return {\n    type: actions.setPlayerStoryRunnerOptions,\n    options,\n  };\n};\n\n/**\n * Sets the player preferred styling for the runner itself. This is the final styling. The order goes\n * built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setPlayerStoryRunnerStyles = (style: IRunnerStyle) => {\n  return {\n    type: actions.setPlayerStoryRunnerStyles,\n    style,\n  };\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { IRootState } from \"../../store\";\nimport { ITextStyle } from \"../redux/typedefs\";\nimport { IPersistentState } from \"./persistence.actions\";\nimport { dispatchSetFromLocalStorage } from \"./persistence.reducers\";\n\nconst persistStateVersion = 1;\nconst persistStateIdentifier = \"WebStory\";\n\n/** The state variables that, when changed, trigger an attempt to save to local storage. */\ninterface ISaveToLocalStorageProps {\n  locale: IRootState[\"settings\"][\"locale\"];\n  playerStorySettings: IRootState[\"playerStorySettings\"];\n  theme: IRootState[\"settings\"][\"theme\"];\n  userConsentProvided: IRootState[\"persistence\"][\"userConsentProvided\"];\n}\n\n/** Validates that a value loaded from localstorage representing font size is in an accepted format. */\nfunction validateLoadedFontSize(str: string | undefined): boolean {\n  if (str === undefined) {\n    return false;\n  }\n\n  str = str.replaceAll(\" \", \"\").toLowerCase();\n\n  // Matches units of em, rem, px, % or no units (implied as px) for numbers like 4, 4.4, 0.4.\n  if (str.match(/^\\d+(px)?$/g) || str.match(/^((\\d+(\\.\\d+)?)|((\\d+|0)\\.\\d+))(em|rem|%)$/g)) {\n    str = str.replaceAll(/em|rem|px|%/g, \"\");\n    const num = Number(str);\n\n    // Must be positive and restricts to a maximum of 1000.\n    if (num && num > 0 && num <= 1000) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/** Returns a copy of text styles loaded from localstorage, with any invalid values set as undefined. */\nexport function cleanLoadedTextStyle(obj: ITextStyle): ITextStyle {\n  return {\n    colorDark: obj.colorDark,\n    colorHighlightDark: obj.colorHighlightDark,\n    colorHighlightLight: obj.colorHighlightLight,\n    colorLight: obj.colorLight,\n    font: obj.font,\n    fontSize: validateLoadedFontSize(obj.fontSize) ? obj.fontSize : undefined,\n    styleBold: obj.styleBold,\n    styleItalic: obj.styleItalic,\n    styleStrikethrough: obj.styleStrikethrough,\n    styleUnderline: obj.styleUnderline,\n  };\n}\n\n/**\n * Saves the given state to local storage. Users must accept the storage policy for data that\n * isn't essential to the service or anything that helps identify an individual.\n * @throws DOMException if an error occurred with saving the data, e.g. not allowed or not enough space.\n */\nconst saveToLocalStorage = (state: ISaveToLocalStorageProps) => {\n  if (!state.userConsentProvided) {\n    return;\n  }\n\n  const newState: IPersistentState = {\n    locale: state.locale,\n    playerStorySettings: state.playerStorySettings,\n    saveFormatVersion: persistStateVersion,\n    theme: state.theme.themeId,\n  };\n\n  localStorage.setItem(persistStateIdentifier, JSON.stringify(newState));\n};\n\n/**\n * Loads the given state from local storage. Users must have accepted the storage policy for data\n * that isn't essential to the service or anything that helps identify an individual. Returns null\n * if a key isn't found. The state returned on success contains all keys, though their values\n * aren't checked for accuracy.\n */\nexport const loadFromLocalStorage = (applyStorage: ReturnType<typeof dispatchSetFromLocalStorage>) => {\n  const loadedState = localStorage.getItem(persistStateIdentifier);\n\n  if (loadedState !== null) {\n    try {\n      applyStorage(JSON.parse(loadedState) as Partial<IPersistentState>);\n    } catch {\n      return;\n    }\n  }\n};\n\nconst mapStateToProps = (state: IRootState): ISaveToLocalStorageProps => {\n  return {\n    locale: state.settings.locale,\n    playerStorySettings: state.playerStorySettings,\n    theme: state.settings.theme,\n    userConsentProvided: state.persistence.userConsentProvided,\n  };\n};\n\ntype LocalStorageSaveHandlerOwnProps = {};\ntype LocalStorageSaveHandlerPropsWithRouteInfo = LocalStorageSaveHandlerOwnProps & RouteComponentProps;\ntype CombinedProps = LocalStorageSaveHandlerPropsWithRouteInfo & ReturnType<typeof mapStateToProps>;\n\nexport class LocalStorageSaveHandlerC extends React.Component<LocalStorageSaveHandlerPropsWithRouteInfo> {\n  public componentDidUpdate(prevProps: CombinedProps) {\n    const props = this.props as CombinedProps;\n\n    /**\n     * Any change of value connected to this component should trigger a save to local storage if allowed, except\n     * userConsentProvided.\n     */\n    if (prevProps.userConsentProvided === props.userConsentProvided) {\n      saveToLocalStorage(this.props as CombinedProps);\n    }\n  }\n\n  public render() {\n    return <></>;\n  }\n}\n\n/** Hooks up actions, some of which require current state or history, to commands. */\nexport const LocalStorageSaveHandler = connect(mapStateToProps)(withRouter(LocalStorageSaveHandlerC));\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store\";\nimport { ITextStyle } from \"../../common/redux/typedefs\";\nimport {\n  dispatchSetPlayerStoryInputStyles,\n  dispatchSetPlayerStoryOptionHighlightStyles,\n  dispatchSetPlayerStoryOptionStyles,\n  dispatchSetPlayerStoryOutputStyles,\n} from \"../runner-settings-page/playerStorySettings.reducers\";\nimport { Dropdown, IDropdownOption } from \"@fluentui/react/lib/components/Dropdown\";\nimport { SpinButton } from \"@fluentui/react/lib/components/SpinButton\";\nimport { getStrings } from \"../../common/localization/Localization\";\nimport { Position } from \"@fluentui/react\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    playerStoryInputStyles: state.playerStorySettings.playerStoryInputStyles,\n    playerStoryOptionStyles: state.playerStorySettings.playerStoryOptionStyles,\n    playerStoryOptionHighlightStyles: state.playerStorySettings.playerStoryOptionHighlightStyles,\n    playerStoryOutputStyles: state.playerStorySettings.playerStoryOutputStyles,\n    strings: getStrings(state.settings.locale),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    dispatchInputStyles: dispatchSetPlayerStoryInputStyles(dispatch),\n    dispatchOptionHighlightStyles: dispatchSetPlayerStoryOptionHighlightStyles(dispatch),\n    dispatchOptionStyles: dispatchSetPlayerStoryOptionStyles(dispatch),\n    dispatchOutputStyles: dispatchSetPlayerStoryOutputStyles(dispatch),\n  };\n};\n\nconst fontTypeRegex = /px|rem/g;\n\n/** The allowed units a font size may be specified in. */\nconst fontSizeUnits = {\n  px: \"px\",\n  rem: \"rem\",\n};\n\nconst fontSizeObjects = {\n  [fontSizeUnits.px]: {\n    default: 12,\n    max: 96,\n    min: 4,\n    step: 1,\n  },\n  [fontSizeUnits.rem]: {\n    default: 1.2,\n    max: 6,\n    min: 0.1,\n    step: 0.1,\n  },\n};\n\ntype FontSizeControlOwnProps = {\n  chosenDispatchCall: (style: ITextStyle) => void;\n  chosenStyle: ITextStyle;\n  forStyle: string;\n};\n\nenum FontSizeControlAction {\n  Decrement,\n  Increment,\n  TextEdited,\n}\n\ntype CombinedProps = FontSizeControlOwnProps &\n  ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nexport class FontSizeControlC extends React.Component<FontSizeControlOwnProps> {\n  public render() {\n    const combinedProps = this.props as CombinedProps;\n\n    const fontSizeUnit = combinedProps.chosenStyle.fontSize?.endsWith(fontSizeUnits.px)\n      ? fontSizeUnits.px\n      : fontSizeUnits.rem;\n\n    const fontSizeOrigValue = combinedProps.chosenStyle.fontSize\n      ? fontSizeUnit === fontSizeUnits.px\n        ? Number.parseInt(combinedProps.chosenStyle.fontSize.replaceAll(fontTypeRegex, \"\"), 10)\n        : Math.round(Number.parseFloat(combinedProps.chosenStyle.fontSize.replaceAll(fontTypeRegex, \"\")) * 10) / 10\n      : undefined;\n\n    return (\n      <span style={{ display: \"inline-flex\", marginLeft: \"4px\", maxWidth: \"14rem\" }}>\n        <SpinButton\n          ariaLabel={combinedProps.strings.SettingsControlFontSizeSpinButtonAria}\n          decrementButtonAriaLabel={combinedProps.strings.SettingsControlFontSizeSpinButtonDecrAria}\n          incrementButtonAriaLabel={combinedProps.strings.SettingsControlFontSizeSpinButtonIncrAria}\n          label={combinedProps.strings.SettingsControlFontSizeSpinButtonLabel}\n          labelPosition={Position.top}\n          max={fontSizeObjects[fontSizeUnit].max}\n          min={fontSizeObjects[fontSizeUnit].min}\n          onDecrement={this.fontSizeChanged(FontSizeControlAction.Decrement)}\n          onIncrement={this.fontSizeChanged(FontSizeControlAction.Increment)}\n          onValidate={this.fontSizeChanged(FontSizeControlAction.TextEdited)}\n          step={fontSizeObjects[fontSizeUnit].step}\n          styles={{ root: { width: \"1px\" } }} // shrink to minimum width\n          value={fontSizeOrigValue?.toString() ?? combinedProps.strings.SettingsControlFontSizeSpinButtonUnset}\n        />\n        <Dropdown\n          aria-label={combinedProps.strings.SettingsControlFontSizeDropdownLabel}\n          dropdownWidth=\"auto\"\n          onChange={this.fontUnitChanged}\n          options={[\n            {\n              data: fontSizeUnits.rem,\n              key: `settingsFontSize${fontSizeUnits.rem}-${combinedProps.forStyle}`,\n              text: combinedProps.strings.SettingsControlFontSizeDropdownRemsLabel,\n              title: combinedProps.strings.SettingsControlFontSizeDropdownRemsTitle,\n            },\n            {\n              data: fontSizeUnits.px,\n              key: `settingsFontSize${fontSizeUnits.px}-${combinedProps.forStyle}`,\n              text: combinedProps.strings.SettingsControlFontSizeDropdownPixelsLabel,\n              title: combinedProps.strings.SettingsControlFontSizeDropdownPixelsTitle,\n            },\n          ]}\n          selectedKey={`settingsFontSize${fontSizeUnit}-${combinedProps.forStyle}`}\n          styles={{ root: { alignSelf: \"flex-end\" } }}\n        />\n      </span>\n    );\n  }\n\n  /** Handles font size changes from spin buttons, or from direct textfield editing. */\n  private fontSizeChanged = (action: FontSizeControlAction) => (fontSize: string) => {\n    const combinedProps = this.props as CombinedProps;\n    const fontSizeUnit = combinedProps.chosenStyle.fontSize?.endsWith(fontSizeUnits.px)\n      ? fontSizeUnits.px\n      : fontSizeUnits.rem;\n\n    const fontSizeValue =\n      fontSizeUnit === fontSizeUnits.px\n        ? Number.parseInt(fontSize, 10)\n        : Math.round(Number.parseFloat(fontSize) * 100) / 100;\n\n    // Resets invalid values to be valid\n    // Clears the set value for empty strings\n    if (fontSize === \"\" || fontSize === combinedProps.strings.SettingsControlFontSizeSpinButtonUnset) {\n      if (action !== FontSizeControlAction.TextEdited) {\n        combinedProps.chosenDispatchCall({\n          ...combinedProps.chosenStyle,\n          fontSize: `${fontSizeObjects[fontSizeUnit].default}${fontSizeUnit}`,\n        });\n      } else {\n        combinedProps.chosenDispatchCall({\n          ...combinedProps.chosenStyle,\n          fontSize: undefined,\n        });\n      }\n    }\n\n    // Handles increment and decrement\n    else if (action !== FontSizeControlAction.TextEdited) {\n      if (action === FontSizeControlAction.Increment && fontSizeValue < fontSizeObjects[fontSizeUnit].max) {\n        combinedProps.chosenDispatchCall({\n          ...combinedProps.chosenStyle,\n          fontSize: `${Math.min(\n            fontSizeValue + fontSizeObjects[fontSizeUnit].step,\n            fontSizeObjects[fontSizeUnit].max\n          )}${fontSizeUnit}`,\n        });\n      } else if (action === FontSizeControlAction.Decrement && fontSizeValue > fontSizeObjects[fontSizeUnit].min) {\n        combinedProps.chosenDispatchCall({\n          ...combinedProps.chosenStyle,\n          fontSize: `${Math.max(\n            fontSizeValue - fontSizeObjects[fontSizeUnit].step,\n            fontSizeObjects[fontSizeUnit].min\n          )}${fontSizeUnit}`,\n        });\n      }\n    }\n\n    // Handles written-in values\n    else if (fontSize === fontSizeValue.toString()) {\n      if (fontSizeValue >= fontSizeObjects[fontSizeUnit].min && fontSizeValue <= fontSizeObjects[fontSizeUnit].max) {\n        combinedProps.chosenDispatchCall({\n          ...combinedProps.chosenStyle,\n          fontSize: `${fontSizeValue}${fontSizeUnit}`,\n        });\n      } else if (fontSizeValue < fontSizeObjects[fontSizeUnit].min) {\n        combinedProps.chosenDispatchCall({\n          ...combinedProps.chosenStyle,\n          fontSize: `${fontSizeObjects[fontSizeUnit].min}${fontSizeUnit}`,\n        });\n      } else if (fontSizeValue > fontSizeObjects[fontSizeUnit].max) {\n        combinedProps.chosenDispatchCall({\n          ...combinedProps.chosenStyle,\n          fontSize: `${fontSizeObjects[fontSizeUnit].max}${fontSizeUnit}`,\n        });\n      }\n    }\n  };\n\n  /** Updates redux for the chosen font size unit. */\n  private fontUnitChanged = (_: React.FormEvent<HTMLDivElement>, option?: IDropdownOption) => {\n    if (!option) {\n      return;\n    }\n\n    const combinedProps = this.props as CombinedProps;\n\n    const fontSizeOrigValue = combinedProps.chosenStyle.fontSize\n      ? option!.data === fontSizeUnits.px\n        ? Number.parseInt(combinedProps.chosenStyle.fontSize.replaceAll(fontTypeRegex, \"\"), 10)\n        : Math.round(Number.parseFloat(combinedProps.chosenStyle.fontSize.replaceAll(fontTypeRegex, \"\")) * 10) / 10\n      : undefined;\n\n    let value = fontSizeOrigValue ?? fontSizeObjects[option.data].default;\n    value = Math.min(Math.max(value, fontSizeObjects[option.data].min), fontSizeObjects[option.data].max);\n\n    combinedProps.chosenDispatchCall({\n      ...combinedProps.chosenStyle,\n      fontSize: `${value}${option.data}`,\n    });\n  };\n}\n\n/** A textbox and dropdown for setting font size and units; respectively. */\nexport const FontSizeControl = connect(mapStateToProps, mapDispatchToProps)(FontSizeControlC);\n","import { combineReducers, Dispatch } from \"redux\";\nimport * as actions from \"./playerStorySettings.actions\";\nimport { IAction } from \"../../common/redux/reduxTools\";\nimport * as types from \"../../common/redux/typedefs\";\nimport { newStory } from \"../editor/viewedit.actions\";\nimport * as persistence from \"../../common/storage/persistence.actions\";\nimport { cleanLoadedTextStyle } from \"../../common/storage/LocalStorageSaveHandler\";\n\nconst playerStoryInputStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setPlayerStoryInputStyles) {\n    return (action as ReturnType<typeof actions.setPlayerStoryInputStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n  if (action.type === persistence.actions.setFromLocalStorage) {\n    const typedAction = action as ReturnType<typeof persistence.setFromLocalStorage>;\n\n    if (typedAction.persistentState.playerStorySettings?.playerStoryInputStyles) {\n      return cleanLoadedTextStyle(typedAction.persistentState.playerStorySettings.playerStoryInputStyles);\n    }\n  }\n\n  return state;\n};\n\nconst playerStoryLogSeparatorStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setPlayerStoryLogSeparatorStyles) {\n    return (action as ReturnType<typeof actions.setPlayerStoryLogSeparatorStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n  if (action.type === persistence.actions.setFromLocalStorage) {\n    const typedAction = action as ReturnType<typeof persistence.setFromLocalStorage>;\n\n    if (typedAction.persistentState.playerStorySettings?.playerStoryLogSeparatorStyles) {\n      return typedAction.persistentState.playerStorySettings.playerStoryLogSeparatorStyles;\n    }\n  }\n\n  return state;\n};\n\nconst playerStoryOptionStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setPlayerStoryOptionStyles) {\n    return (action as ReturnType<typeof actions.setPlayerStoryOptionStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n  if (action.type === persistence.actions.setFromLocalStorage) {\n    const typedAction = action as ReturnType<typeof persistence.setFromLocalStorage>;\n\n    if (typedAction.persistentState.playerStorySettings?.playerStoryOptionStyles) {\n      return cleanLoadedTextStyle(typedAction.persistentState.playerStorySettings.playerStoryOptionStyles);\n    }\n  }\n\n  return state;\n};\n\nconst playerStoryOptionHighlightStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setPlayerStoryOptionHighlightStyles) {\n    return (action as ReturnType<typeof actions.setPlayerStoryOptionHighlightStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n  if (action.type === persistence.actions.setFromLocalStorage) {\n    const typedAction = action as ReturnType<typeof persistence.setFromLocalStorage>;\n\n    if (typedAction.persistentState.playerStorySettings?.playerStoryOptionHighlightStyles) {\n      return cleanLoadedTextStyle(typedAction.persistentState.playerStorySettings.playerStoryOptionHighlightStyles);\n    }\n  }\n\n  return state;\n};\n\nconst playerStoryOutputStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setPlayerStoryOutputStyles) {\n    return (action as ReturnType<typeof actions.setPlayerStoryOutputStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n  if (action.type === persistence.actions.setFromLocalStorage) {\n    const typedAction = action as ReturnType<typeof persistence.setFromLocalStorage>;\n\n    if (typedAction.persistentState.playerStorySettings?.playerStoryOutputStyles) {\n      return cleanLoadedTextStyle(typedAction.persistentState.playerStorySettings.playerStoryOutputStyles);\n    }\n  }\n\n  return state;\n};\n\nconst playerStoryRunnerOptions = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setPlayerStoryRunnerOptions) {\n    return (action as ReturnType<typeof actions.setPlayerStoryRunnerOptions>).options;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n  if (action.type === persistence.actions.setFromLocalStorage) {\n    const typedAction = action as ReturnType<typeof persistence.setFromLocalStorage>;\n\n    if (typedAction.persistentState.playerStorySettings?.playerStoryRunnerOptions) {\n      return typedAction.persistentState.playerStorySettings.playerStoryRunnerOptions;\n    }\n  }\n\n  return state;\n};\n\nconst playerStoryRunnerStyles = (state = { background: { type: \"plain\" } }, action: IAction) => {\n  if (action.type === actions.actions.setPlayerStoryRunnerStyles) {\n    return (action as ReturnType<typeof actions.setPlayerStoryRunnerStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return { background: { type: \"plain\" } };\n  }\n  if (action.type === persistence.actions.setFromLocalStorage) {\n    const typedAction = action as ReturnType<typeof persistence.setFromLocalStorage>;\n\n    if (typedAction.persistentState.playerStorySettings?.playerStoryRunnerStyles) {\n      return typedAction.persistentState.playerStorySettings.playerStoryRunnerStyles;\n    }\n  }\n\n  return state;\n};\n\nexport const dispatchSetPlayerStoryInputStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setPlayerStoryInputStyles(style));\n};\n\nexport const dispatchSetPlayerStoryLogSeparatorStyles =\n  (dispatch: Dispatch) => (style: types.IRunnerLogSeparatorStyle) => {\n    dispatch(actions.setPlayerStoryLogSeparatorStyles(style));\n  };\n\nexport const dispatchSetPlayerStoryOptionStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setPlayerStoryOptionStyles(style));\n};\n\nexport const dispatchSetPlayerStoryOptionHighlightStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setPlayerStoryOptionHighlightStyles(style));\n};\n\nexport const dispatchSetPlayerStoryOutputStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setPlayerStoryOutputStyles(style));\n};\n\nexport const dispatchSetPlayerStoryRunnerOptions = (dispatch: Dispatch) => (options: types.IPlayerRunnerOptions) => {\n  dispatch(actions.setPlayerStoryRunnerOptions(options));\n};\n\nexport const dispatchSetPlayerStoryRunnerStyles = (dispatch: Dispatch) => (style: types.IRunnerStyle) => {\n  dispatch(actions.setPlayerStoryRunnerStyles(style));\n};\n\n// Combine reducers and typescript definition.\nexport interface IPlayerStorySettingsState {\n  playerStoryInputStyles: types.ITextStyle;\n  playerStoryLogSeparatorStyles: types.IRunnerLogSeparatorStyle;\n  playerStoryOptionStyles: types.ITextStyle;\n  playerStoryOptionHighlightStyles: types.ITextStyle;\n  playerStoryOutputStyles: types.ITextStyle;\n  playerStoryRunnerOptions: types.IPlayerRunnerOptions;\n  playerStoryRunnerStyles: types.IRunnerStyle;\n}\n\nexport const playerStorySettings = combineReducers({\n  playerStoryInputStyles,\n  playerStoryLogSeparatorStyles,\n  playerStoryOptionStyles,\n  playerStoryOptionHighlightStyles,\n  playerStoryOutputStyles,\n  playerStoryRunnerOptions,\n  playerStoryRunnerStyles,\n});\n","import { getActionGuid } from \"../../common/redux/reduxTools\";\nimport { ITextStyleColors } from \"../../common/redux/typedefs\";\nimport { IPlayerStorySettingsState } from \"./playerStorySettings.reducers\";\n\nexport const actions = {\n  openColorPicker: getActionGuid(),\n  closeColorPicker: getActionGuid(),\n};\n\n/** Opens the color picker to change a color. */\nexport const openColorPicker = (color: keyof ITextStyleColors, forStyle: keyof IPlayerStorySettingsState) => {\n  return {\n    color,\n    forStyle,\n    type: actions.openColorPicker,\n  };\n};\n\n/* Closes the color picker. */\nexport const closeColorPicker = {\n  type: actions.closeColorPicker,\n};\n","import { combineReducers, Dispatch } from \"redux\";\nimport * as actions from \"./runnerSettings.actions\";\nimport { IAction } from \"../../common/redux/reduxTools\";\nimport { IPlayerStorySettingsState } from \"./playerStorySettings.reducers\";\nimport { ITextStyleColors } from \"../../common/redux/typedefs\";\n\nconst colorPickerOpenId = (state = null, action: IAction) => {\n  if (action.type === actions.actions.openColorPicker) {\n    return action as ReturnType<typeof actions.openColorPicker>;\n  }\n  if (action.type === actions.actions.closeColorPicker) {\n    return null;\n  }\n\n  return state;\n};\n\nexport const dispatchOpenColorPicker =\n  (dispatch: Dispatch) => (color: keyof ITextStyleColors, style: keyof IPlayerStorySettingsState) => {\n    dispatch(actions.openColorPicker(color, style));\n  };\n\nexport const dispatchCloseColorPicker = (dispatch: Dispatch) => () => {\n  dispatch(actions.closeColorPicker);\n};\n\n// Combine reducers and typescript definition.\nexport interface IRunnerSettingsState {\n  colorPickerOpenId: ReturnType<typeof actions.openColorPicker>;\n}\n\nexport const runnerSettings = combineReducers({\n  colorPickerOpenId,\n});\n","import { Slider } from \"@fluentui/react\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { getStrings } from \"../../common/localization/Localization\";\nimport { ITextStyle } from \"../../common/redux/typedefs\";\nimport { IRootState } from \"../../store\";\nimport {\n  dispatchSetPlayerStoryInputStyles,\n  dispatchSetPlayerStoryOptionHighlightStyles,\n  dispatchSetPlayerStoryOptionStyles,\n  dispatchSetPlayerStoryOutputStyles,\n} from \"../runner-settings-page/playerStorySettings.reducers\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    playerStoryInputStyles: state.playerStorySettings.playerStoryInputStyles,\n    playerStoryOptionStyles: state.playerStorySettings.playerStoryOptionStyles,\n    playerStoryOptionHighlightStyles: state.playerStorySettings.playerStoryOptionHighlightStyles,\n    playerStoryOutputStyles: state.playerStorySettings.playerStoryOutputStyles,\n    strings: getStrings(state.settings.locale),\n    theme: state.settings.theme,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    dispatchInputStyles: dispatchSetPlayerStoryInputStyles(dispatch),\n    dispatchOptionHighlightStyles: dispatchSetPlayerStoryOptionHighlightStyles(dispatch),\n    dispatchOptionStyles: dispatchSetPlayerStoryOptionStyles(dispatch),\n    dispatchOutputStyles: dispatchSetPlayerStoryOutputStyles(dispatch),\n  };\n};\n\nenum StyleType {\n  Italic,\n  Bold,\n  Underline,\n  Strikethrough,\n}\n\ntype FontStyleControlOwnProps = {\n  chosenDispatchCall: (style: ITextStyle) => void;\n  chosenStyle: ITextStyle;\n};\n\ntype CombinedProps = FontStyleControlOwnProps &\n  ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nexport class FontStyleControlC extends React.Component<FontStyleControlOwnProps> {\n  /** Renders color boxes to adjust the light/dark theme settings for one of the override styles. */\n  public render() {\n    const combinedProps = this.props as CombinedProps;\n\n    return (\n      <div style={{ display: \"flex\", flexDirection: \"column\", marginLeft: \"4rem\", width: \"9rem\" }}>\n        <Slider\n          max={2}\n          min={0}\n          label={combinedProps.strings.SettingsControlFontStyleItalic}\n          onChange={this.fontStyleChanged(StyleType.Italic)}\n          styles={{ titleLabel: { fontSize: combinedProps.theme.theme.fonts.small.fontSize } }}\n          value={this.getValue(combinedProps.chosenStyle.styleItalic)}\n          valueFormat={this.formatDisplayText}\n        />\n        <Slider\n          max={2}\n          min={0}\n          label={combinedProps.strings.SettingsControlFontStyleBold}\n          onChange={this.fontStyleChanged(StyleType.Bold)}\n          styles={{ titleLabel: { fontSize: combinedProps.theme.theme.fonts.small.fontSize } }}\n          value={this.getValue(combinedProps.chosenStyle.styleBold)}\n          valueFormat={this.formatDisplayText}\n        />\n        <Slider\n          max={2}\n          min={0}\n          label={combinedProps.strings.SettingsControlFontStyleUnderline}\n          onChange={this.fontStyleChanged(StyleType.Underline)}\n          styles={{ titleLabel: { fontSize: combinedProps.theme.theme.fonts.small.fontSize } }}\n          value={this.getValue(combinedProps.chosenStyle.styleUnderline)}\n          valueFormat={this.formatDisplayText}\n        />\n        <Slider\n          max={2}\n          min={0}\n          label={combinedProps.strings.SettingsControlFontStyleStrikethrough}\n          onChange={this.fontStyleChanged(StyleType.Strikethrough)}\n          styles={{ titleLabel: { fontSize: combinedProps.theme.theme.fonts.small.fontSize } }}\n          value={this.getValue(combinedProps.chosenStyle.styleStrikethrough)}\n          valueFormat={this.formatDisplayText}\n        />\n      </div>\n    );\n  }\n\n  /** Converts the boolean value to a numeric value for the slider. */\n  private getValue = (value?: boolean) => {\n    return value === undefined ? 1 : value ? 2 : 0;\n  };\n\n  /** Gets a reasonable label for the numeric slider value. */\n  private formatDisplayText = (value: number) => {\n    const combinedProps = this.props as CombinedProps;\n\n    if (value === 0) {\n      return combinedProps.strings.SettingsControlFontStyleSliderOff;\n    }\n    if (value === 2) {\n      return combinedProps.strings.SettingsControlFontStyleSliderOn;\n    }\n\n    return combinedProps.strings.SettingsControlFontStyleSliderUnset;\n  };\n\n  /** Updates redux with the chosen style. */\n  private fontStyleChanged = (styleType: StyleType) => (value: number) => {\n    const combinedProps = this.props as CombinedProps;\n    const booleanValue = value === 2 ? true : value === 1 ? undefined : false;\n\n    combinedProps.chosenDispatchCall({\n      ...combinedProps.chosenStyle,\n      styleBold: styleType === StyleType.Bold ? booleanValue : combinedProps.chosenStyle.styleBold,\n      styleItalic: styleType === StyleType.Italic ? booleanValue : combinedProps.chosenStyle.styleItalic,\n      styleStrikethrough:\n        styleType === StyleType.Strikethrough ? booleanValue : combinedProps.chosenStyle.styleStrikethrough,\n      styleUnderline: styleType === StyleType.Underline ? booleanValue : combinedProps.chosenStyle.styleUnderline,\n    });\n  };\n}\n\nexport const FontStyleControl = connect(mapStateToProps, mapDispatchToProps)(FontStyleControlC);\n","import { Label } from \"@fluentui/react\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { getStrings } from \"../../common/localization/Localization\";\nimport { IRootState } from \"../../store\";\nimport { ITextStyle, ITextStyleColors } from \"../../common/redux/typedefs\";\nimport { IPlayerStorySettingsState } from \"../runner-settings-page/playerStorySettings.reducers\";\nimport { dispatchCloseColorPicker, dispatchOpenColorPicker } from \"../runner-settings-page/runnerSettings.reducers\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    colorPickerOpenId: state.runnerSettings.colorPickerOpenId,\n    strings: getStrings(state.settings.locale),\n    theme: state.settings.theme,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    dispatchCloseColorPicker: dispatchCloseColorPicker(dispatch),\n    dispatchOpenColorPicker: dispatchOpenColorPicker(dispatch),\n  };\n};\n\ntype ColorPickerControlOwnProps = {\n  forStyle: keyof IPlayerStorySettingsState;\n  textStyleObj: ITextStyle;\n  update: (style: ITextStyle) => void;\n};\n\ntype CombinedProps = ColorPickerControlOwnProps &\n  ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nexport class ColorPickerControlC extends React.Component<ColorPickerControlOwnProps> {\n  public render() {\n    const combinedProps = this.props as CombinedProps;\n\n    return (\n      <div style={{ display: \"inline-flex\", flexDirection: \"column\" }}>\n        <div style={{ alignItems: \"center\", display: \"flex\", flexDirection: \"row\" }}>\n          <button\n            onClick={this.onSwatchClicked(\"colorLight\", this.props.forStyle)}\n            style={{\n              backgroundColor: this.props.textStyleObj.colorLight,\n              border: combinedProps.theme.theme.semanticColors.buttonBorder,\n              height: \"2rem\",\n              margin: combinedProps.theme.theme.spacing.s2,\n              width: \"2rem\",\n            }}\n          />\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <Label style={{ paddingTop: 0 }}>{combinedProps.strings.SettingsTextStyleLightColor}</Label>\n            <input\n              onChange={this.onChange(\"colorLight\")}\n              placeholder={combinedProps.strings.SettingsTextStyleColorUnset}\n              type=\"text\"\n              value={this.props.textStyleObj.colorLight}\n            />\n          </div>\n        </div>\n        <div style={{ alignItems: \"center\", display: \"flex\", flexDirection: \"row\" }}>\n          <button\n            onClick={this.onSwatchClicked(\"colorDark\", this.props.forStyle)}\n            style={{\n              backgroundColor: this.props.textStyleObj.colorDark,\n              border: combinedProps.theme.theme.semanticColors.buttonBorder,\n              height: \"2rem\",\n              margin: combinedProps.theme.theme.spacing.s2,\n              width: \"2rem\",\n            }}\n          />\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <Label style={{ paddingTop: 0 }}>{combinedProps.strings.SettingsTextStyleDarkColor}</Label>\n            <input\n              onChange={this.onChange(\"colorDark\")}\n              placeholder={combinedProps.strings.SettingsTextStyleColorUnset}\n              type=\"text\"\n              value={this.props.textStyleObj.colorDark}\n            />\n          </div>\n        </div>\n        <div style={{ alignItems: \"center\", display: \"flex\", flexDirection: \"row\" }}>\n          <button\n            onClick={this.onSwatchClicked(\"colorHighlightLight\", this.props.forStyle)}\n            style={{\n              backgroundColor: this.props.textStyleObj.colorHighlightLight,\n              border: combinedProps.theme.theme.semanticColors.buttonBorder,\n              height: \"2rem\",\n              margin: combinedProps.theme.theme.spacing.s2,\n              width: \"2rem\",\n            }}\n          />\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <Label style={{ paddingTop: 0 }}>{combinedProps.strings.SettingsTextStyleHighlightLightColor}</Label>\n            <input\n              onChange={this.onChange(\"colorHighlightLight\")}\n              placeholder={combinedProps.strings.SettingsTextStyleColorUnset}\n              type=\"text\"\n              value={this.props.textStyleObj.colorHighlightLight}\n            />\n          </div>\n        </div>\n        <div style={{ alignItems: \"center\", display: \"flex\", flexDirection: \"row\" }}>\n          <button\n            onClick={this.onSwatchClicked(\"colorHighlightDark\", this.props.forStyle)}\n            style={{\n              backgroundColor: this.props.textStyleObj.colorHighlightDark,\n              border: combinedProps.theme.theme.semanticColors.buttonBorder,\n              height: \"2rem\",\n              margin: combinedProps.theme.theme.spacing.s2,\n              width: \"2rem\",\n            }}\n          />\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <Label style={{ paddingTop: 0 }}>{combinedProps.strings.SettingsTextStyleHighlightDarkColor}</Label>\n            <input\n              onChange={this.onChange(\"colorHighlightDark\")}\n              placeholder={combinedProps.strings.SettingsTextStyleColorUnset}\n              type=\"text\"\n              value={this.props.textStyleObj.colorHighlightDark}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  /** Updates when the hex field is directly edited. */\n  private onChange = (updateKey: keyof ITextStyleColors) => (ev: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.update({\n      ...this.props.textStyleObj,\n      [updateKey]: ev.target.value,\n    });\n  };\n\n  /** Toggles the color picker's open state when clicking the swatch. */\n  private onSwatchClicked = (color: keyof ITextStyleColors, forStyle: keyof IPlayerStorySettingsState) => () => {\n    const combinedProps = this.props as CombinedProps;\n\n    if (combinedProps.colorPickerOpenId?.forStyle === forStyle && combinedProps.colorPickerOpenId?.color === color) {\n      combinedProps.dispatchCloseColorPicker();\n    } else {\n      combinedProps.dispatchOpenColorPicker(color, forStyle);\n    }\n  };\n}\n\n/** A swatch button and text field to control setting a color or entering it by name. */\nexport const ColorPickerControl = connect(mapStateToProps, mapDispatchToProps)(ColorPickerControlC);\n","import { ColorPicker, IColor } from \"@fluentui/react\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { getStrings } from \"../../common/localization/Localization\";\nimport {\n  dispatchSetPlayerStoryInputStyles,\n  dispatchSetPlayerStoryOptionHighlightStyles,\n  dispatchSetPlayerStoryOptionStyles,\n  dispatchSetPlayerStoryOutputStyles,\n  dispatchSetPlayerStoryRunnerOptions,\n} from \"./playerStorySettings.reducers\";\nimport { IRootState } from \"../../store\";\nimport { dispatchCloseColorPicker, dispatchOpenColorPicker } from \"./runnerSettings.reducers\";\nimport { ITextStyle, ITextStyleColors } from \"../../common/redux/typedefs\";\nimport { FontSizeControl } from \"../runner-editor/FontSizeControl\";\nimport { ColorPickerControl } from \"../runner-editor/ColorPickerControl\";\nimport { FontStyleControl } from \"../runner-editor/FontStyleControl\";\nimport { RunnerView } from \"../runner/RunnerView\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    colorPickerOpenId: state.runnerSettings.colorPickerOpenId,\n    playerStoryInputStyles: state.playerStorySettings.playerStoryInputStyles,\n    playerStoryOptionStyles: state.playerStorySettings.playerStoryOptionStyles,\n    playerStoryOptionHighlightStyles: state.playerStorySettings.playerStoryOptionHighlightStyles,\n    playerStoryOutputStyles: state.playerStorySettings.playerStoryOutputStyles,\n    playerStoryRunnerOptions: state.playerStorySettings.playerStoryRunnerOptions,\n    strings: getStrings(state.settings.locale),\n    theme: state.settings.theme,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    dispatchCloseColorPicker: dispatchCloseColorPicker(dispatch),\n    dispatchInputStyles: dispatchSetPlayerStoryInputStyles(dispatch),\n    dispatchOpenColorPicker: dispatchOpenColorPicker(dispatch),\n    dispatchOptionHighlightStyles: dispatchSetPlayerStoryOptionHighlightStyles(dispatch),\n    dispatchOptionStyles: dispatchSetPlayerStoryOptionStyles(dispatch),\n    dispatchOutputStyles: dispatchSetPlayerStoryOutputStyles(dispatch),\n    dispatchRunnerOptions: dispatchSetPlayerStoryRunnerOptions(dispatch),\n  };\n};\n\ntype RunnerSettingsOwnProps = {};\ntype CombinedProps = RunnerSettingsOwnProps &\n  ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nexport class RunnerSettingsC extends React.Component<RunnerSettingsOwnProps> {\n  public componentWillUnmount() {\n    (this.props as CombinedProps).dispatchCloseColorPicker();\n  }\n\n  public render() {\n    const combinedProps = this.props as CombinedProps;\n\n    return (\n      <>\n        <div style={{ display: \"flex\" }}>\n          <div style={{ marginLeft: \"1rem\", maxWidth: \"50rem\", width: \"75%\" }}>\n            <h2 style={{ color: combinedProps.theme.theme.semanticColors.bodyText }}>\n              {combinedProps.strings.SettingsTitle}\n            </h2>\n            <p style={{ color: combinedProps.theme.theme.semanticColors.bodyText }}>\n              {combinedProps.strings.SettingsDescription}\n            </p>\n            {combinedProps.colorPickerOpenId &&\n              this.renderColorPicker(\n                combinedProps.colorPickerOpenId.color,\n                combinedProps.colorPickerOpenId.forStyle as keyof typeof combinedProps\n              )}\n\n            <h4 style={{ color: combinedProps.theme.theme.semanticColors.bodyText }}>\n              {combinedProps.strings.SettingsRunnerOutputStyles}\n            </h4>\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n              <div style={{ display: \"flex\" }}>\n                <ColorPickerControl\n                  forStyle=\"playerStoryOutputStyles\"\n                  textStyleObj={combinedProps.playerStoryOutputStyles}\n                  update={combinedProps.dispatchOutputStyles}\n                />\n                <FontStyleControl\n                  chosenStyle={combinedProps.playerStoryOutputStyles}\n                  chosenDispatchCall={combinedProps.dispatchOutputStyles}\n                />\n              </div>\n              <FontSizeControl\n                chosenStyle={combinedProps.playerStoryOutputStyles}\n                chosenDispatchCall={combinedProps.dispatchOutputStyles}\n                forStyle=\"playerStoryOutputStyles\"\n              />\n            </div>\n            <h4 style={{ color: combinedProps.theme.theme.semanticColors.bodyText, marginTop: \"4rem\" }}>\n              {combinedProps.strings.SettingsRunnerOptionStyles}\n            </h4>\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n              <div style={{ display: \"flex\" }}>\n                <ColorPickerControl\n                  forStyle=\"playerStoryOptionStyles\"\n                  textStyleObj={combinedProps.playerStoryOptionStyles}\n                  update={combinedProps.dispatchOptionStyles}\n                />\n                <FontStyleControl\n                  chosenStyle={combinedProps.playerStoryOptionStyles}\n                  chosenDispatchCall={combinedProps.dispatchOptionStyles}\n                />\n              </div>\n              <FontSizeControl\n                chosenStyle={combinedProps.playerStoryOptionStyles}\n                chosenDispatchCall={combinedProps.dispatchOptionStyles}\n                forStyle=\"playerStoryOptionStyles\"\n              />\n            </div>\n            <h4 style={{ color: combinedProps.theme.theme.semanticColors.bodyText, marginTop: \"4rem\" }}>\n              {combinedProps.strings.SettingsRunnerOptionHighlightStyles}\n            </h4>\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n              <div style={{ display: \"flex\" }}>\n                <ColorPickerControl\n                  forStyle=\"playerStoryOptionHighlightStyles\"\n                  textStyleObj={combinedProps.playerStoryOptionHighlightStyles}\n                  update={combinedProps.dispatchOptionHighlightStyles}\n                />\n                <FontStyleControl\n                  chosenStyle={combinedProps.playerStoryOptionHighlightStyles}\n                  chosenDispatchCall={combinedProps.dispatchOptionHighlightStyles}\n                />\n              </div>\n              <FontSizeControl\n                chosenStyle={combinedProps.playerStoryOptionHighlightStyles}\n                chosenDispatchCall={combinedProps.dispatchOptionHighlightStyles}\n                forStyle=\"playerStoryOptionHighlightStyles\"\n              />\n            </div>\n            <h4 style={{ color: combinedProps.theme.theme.semanticColors.bodyText, marginTop: \"4rem\" }}>\n              {combinedProps.strings.SettingsRunnerInputStyles}\n            </h4>\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n              <div style={{ display: \"flex\" }}>\n                <ColorPickerControl\n                  forStyle=\"playerStoryInputStyles\"\n                  textStyleObj={combinedProps.playerStoryInputStyles}\n                  update={combinedProps.dispatchInputStyles}\n                />\n                <FontStyleControl\n                  chosenStyle={combinedProps.playerStoryInputStyles}\n                  chosenDispatchCall={combinedProps.dispatchInputStyles}\n                />\n              </div>\n              <FontSizeControl\n                chosenStyle={combinedProps.playerStoryInputStyles}\n                chosenDispatchCall={combinedProps.dispatchInputStyles}\n                forStyle=\"playerStoryInputStyles\"\n              />\n            </div>\n          </div>\n          <div style={{ flexGrow: 1, marginLeft: \"1rem\" }}>\n            <h2 style={{ color: combinedProps.theme.theme.semanticColors.bodyText }}>\n              {combinedProps.strings.SettingsLivePreview}\n            </h2>\n            <RunnerView storyToParseOverride={combinedProps.strings.SettingsLivePreviewStory} />\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  /** Renders a color picker to adjust the chosen color for a style override. */\n  private renderColorPicker = (color: keyof ITextStyleColors, forStyle: keyof CombinedProps) => {\n    const combinedProps = this.props as CombinedProps;\n    const style = combinedProps[forStyle] as ITextStyle;\n    let chosenStyle: ITextStyle;\n    let chosenDispatchCall: (style: ITextStyle) => void;\n\n    switch (forStyle) {\n      case \"playerStoryInputStyles\": {\n        chosenDispatchCall = combinedProps.dispatchInputStyles;\n        chosenStyle = combinedProps.playerStoryInputStyles;\n        break;\n      }\n      case \"playerStoryOptionStyles\": {\n        chosenDispatchCall = combinedProps.dispatchOptionStyles;\n        chosenStyle = combinedProps.playerStoryOptionStyles;\n        break;\n      }\n      case \"playerStoryOptionHighlightStyles\": {\n        chosenDispatchCall = combinedProps.dispatchOptionHighlightStyles;\n        chosenStyle = combinedProps.playerStoryOptionHighlightStyles;\n        break;\n      }\n      case \"playerStoryOutputStyles\": {\n        chosenDispatchCall = combinedProps.dispatchOutputStyles;\n        chosenStyle = combinedProps.playerStoryOutputStyles;\n        break;\n      }\n      default: {\n        return;\n      }\n    }\n\n    const updateColor = (_: React.SyntheticEvent<HTMLElement, Event>, cssColor: IColor) => {\n      chosenDispatchCall({\n        ...chosenStyle,\n        [color]: cssColor.str,\n      });\n    };\n\n    return (\n      <ColorPicker\n        alphaType=\"none\"\n        color={style[color] ?? \"\"}\n        onChange={updateColor}\n        strings={{\n          blue: combinedProps.strings.SettingsControlColorPickerBlue,\n          green: combinedProps.strings.SettingsControlColorPickerGreen,\n          hex: combinedProps.strings.SettingsControlColorPickerHex,\n          hueAriaLabel: combinedProps.strings.SettingsControlColorPickerHue,\n          red: combinedProps.strings.SettingsControlColorPickerRed,\n          rootAriaLabelFormat: combinedProps.strings.SettingsControlColorPickerSelectedColor,\n          svAriaDescription: combinedProps.strings.SettingsControlColorPickerSvDescription,\n          svAriaLabel: combinedProps.strings.SettingsControlColorPickerSvAria,\n          svAriaValueFormat: combinedProps.strings.SettingsControlColorPickerSelectedSv,\n        }}\n        styles={{ table: { color: combinedProps.theme.theme.semanticColors.bodyText } }}\n      />\n    );\n  };\n}\n\nexport const RunnerSettings = connect(mapStateToProps, mapDispatchToProps)(RunnerSettingsC);\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {};\n};\n\ntype EditorSettingsOwnProps = {};\n\nexport class EditorSettingsC extends React.Component<EditorSettingsOwnProps> {\n  public render() {\n    // TODO: replace with settings\n    return <p>Editor Settings</p>;\n  }\n}\n\nexport const EditorSettings = connect(mapStateToProps)(EditorSettingsC);\n","import { combineReducers, Dispatch } from \"redux\";\nimport {\n  actions,\n  IPersistentState,\n  setCustomizationApplied,\n  setFromLocalStorage,\n  setUserConsentProvided,\n} from \"./persistence.actions\";\n\n/**\n * True if the user accepts the storage policy. Until the user accepts, data that isn't essential\n * for the operation of the site and any data that might be combined together across the site and\n * its services to create personally identifying info cannot be saved or loaded.\n *\n * This defaults to true because there is nothing requiring consent yet.\n */\nconst userConsentProvided = (state = true, action: ReturnType<typeof setUserConsentProvided>) => {\n  if (action.type === actions.setUserConsentProvided) {\n    return action.consentProvided;\n  }\n\n  return state;\n};\n\n/**\n * True if local storage customizations have been applied. An attempt to load should be made once\n * after the user has accepted the storage policy and changes to content.\n */\nconst customizationApplied = (state = false, action: ReturnType<typeof setCustomizationApplied>) => {\n  if (action.type === actions.setCustomizationApplied) {\n    return action.isApplied;\n  }\n\n  return state;\n};\n\n/** Sets the locale id in lowercase, such as en-us. */\nexport const dispatchSetCustomizationApplied = (dispatch: Dispatch) => (isCustomizationApplied: boolean) => {\n  dispatch(setCustomizationApplied(isCustomizationApplied));\n};\n\nexport const dispatchSetFromLocalStorage = (dispatch: Dispatch) => (state: Partial<IPersistentState>) => {\n  dispatch(setFromLocalStorage(state));\n};\n\n/** Sets whether the user has consented to the storage policy. */\nexport const dispatchSetUserConsentProvided = (dispatch: Dispatch) => (isConsentGiven: boolean) => {\n  dispatch(setUserConsentProvided(isConsentGiven));\n};\n\n// Combine reducers and typescript definition.\nexport interface IPersistenceState {\n  customizationApplied: boolean;\n  userConsentProvided: boolean;\n}\n\nexport const persistence = combineReducers({\n  customizationApplied,\n  userConsentProvided,\n});\n","import * as React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport { Welcome } from \"../../gui/welcome/Welcome\";\nimport { RunnerEditorView } from \"../../gui/runner-editor/RunnerEditorView\";\nimport { getStrings } from \"../localization/Localization\";\nimport { getTheme } from \"@fluentui/react/lib/Styling\";\nimport { Dispatch } from \"redux\";\nimport { IRootState } from \"../../store\";\nimport { connect } from \"react-redux\";\nimport { OpenFileHandler } from \"../../gui/OpenFileHandler\";\nimport { RunnerView } from \"../../gui/runner/RunnerView\";\nimport { MenuBar } from \"../../gui/menu/MenuBar\";\nimport { RunnerSettings } from \"../../gui/runner-settings-page/RunnerSettings\";\nimport { EditorSettings } from \"../../gui/editor-settings-page/EditorSettings\";\nimport { loadFromLocalStorage, LocalStorageSaveHandler } from \"../storage/LocalStorageSaveHandler\";\nimport { CommandHandler } from \"../commands/CommandHandler\";\nimport { dispatchSetFromLocalStorage } from \"../storage/persistence.reducers\";\n\nexport const routes = {\n  base: \"/\",\n\n  /** Navigates to the runner (player view). */\n  play: \"/play\",\n\n  /** Navigates to the runner settings. */\n  playSettings: \"/play/settings\",\n\n  /** Navigates to the editor (author view). */\n  edit: \"/edit\",\n\n  editSettings: \"/edit/settings\",\n};\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    locale: state.settings.locale,\n    strings: getStrings(state.settings.locale),\n    themeName: state.settings.theme.localizedName,\n    userConsentProvided: state.persistence.userConsentProvided,\n    wholeTheme: getTheme(),\n  };\n};\n\n/** Returns true when the user is on the named route. */\nexport function isOnPage(route: keyof typeof routes) {\n  return routes[route] === window.location.hash.replace(/\\?.*/g, \"\").substring(1).toLowerCase();\n}\n\n/** Returns true when the user is playing a game in play mode or one of its subpages. */\nexport function isPlayMode() {\n  return window.location.hash.substring(1).toLowerCase().startsWith(routes[\"play\"]);\n}\n\n/** Returns true when the user is authoring a game in edit mode or one of its subpages. */\nexport function isEditMode() {\n  return window.location.hash.substring(1).toLowerCase().startsWith(routes[\"edit\"]);\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    setFromLocalStorage: dispatchSetFromLocalStorage(dispatch),\n  };\n};\n\ntype RoutingOwnProps = {};\ntype CombinedProps = RoutingOwnProps & ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nexport class RoutingC extends React.Component<RoutingOwnProps> {\n  /** Applies all user setting stored in local storage if allowed. */\n  public componentDidMount() {\n    const combinedProps = this.props as CombinedProps;\n\n    if (combinedProps.userConsentProvided) {\n      loadFromLocalStorage(combinedProps.setFromLocalStorage);\n    }\n  }\n\n  public render() {\n    return (\n      <>\n        <OpenFileHandler />\n        <LocalStorageSaveHandler />\n        <CommandHandler />\n        <MenuBar />\n        <Switch>\n          <Route path={routes.base} exact={true} component={Welcome} />\n          <Route path={routes.edit} exact={true} component={RunnerEditorView} />\n          <Route path={routes.editSettings} component={EditorSettings} />\n          <Route path={routes.play} exact={true} component={RunnerView} />\n          <Route path={routes.playSettings} component={RunnerSettings} />\n        </Switch>\n      </>\n    );\n  }\n}\n\nexport const Routing = connect(mapStateToProps, mapDispatchToProps)(RoutingC);\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { dispatchRerenderStory, dispatchSaveAndRunStory, dispatchSetStory } from \"./editor/viewedit.reducers\";\nimport { isPlayMode } from \"../common/routing/Routing\";\nimport { hiddenAndInaccessible } from \"../common/styles/controlStyles\";\n\n/** A callback function after data loads that can be set from command invocation */\nlet onLoadedCallback: Function | undefined;\n\n/**\n * Browsers require a click to invoke an open file dialog, so this invokes a click on a hidden\n * input element rendered as part of the main command bar. This enables seamless functionality.\n */\nexport function invokeOpenCommand(afterLoadedCallback?: Function) {\n  onLoadedCallback = afterLoadedCallback;\n  hiddenInputRef.current?.click();\n}\n\n/** Browsers require a click event on an input control, which is automatically done via this one. */\nconst hiddenInputRef = React.createRef<HTMLInputElement>();\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    reRenderStory: dispatchRerenderStory(dispatch),\n    saveAndRunStory: dispatchSaveAndRunStory(dispatch),\n    setStory: dispatchSetStory(dispatch),\n  };\n};\n\nexport type OpenFileHandlerOwnProps = {};\ntype CombinedProps = OpenFileHandlerOwnProps & ReturnType<typeof mapDispatchToProps>;\n\nexport class OpenFileHandlerC extends React.Component<OpenFileHandlerOwnProps> {\n  public render() {\n    /** Loads the given file to a string for parsing. */\n    const handleFile = async (ev: React.ChangeEvent<HTMLInputElement>) => {\n      const chosenFiles = ev.target.files;\n\n      if (chosenFiles) {\n        const fileReader = new FileReader();\n\n        fileReader.onloadend = () => {\n          const result = fileReader.result as string;\n\n          if (isPlayMode()) {\n            (this.props as CombinedProps).saveAndRunStory(result);\n          } else {\n            (this.props as CombinedProps).setStory(result);\n          }\n\n          ev.target.value = \"\"; // Avoids having the browser ignore trying to load the same file twice in a row\n\n          if (onLoadedCallback) {\n            onLoadedCallback();\n            onLoadedCallback = undefined;\n          }\n        };\n\n        fileReader.onabort = () => {\n          onLoadedCallback = undefined;\n        };\n\n        if (chosenFiles[0] instanceof Blob) {\n          fileReader.readAsText(chosenFiles[0]);\n        }\n      }\n    };\n\n    return <input className={hiddenAndInaccessible} onChange={handleFile} ref={hiddenInputRef} type=\"file\" />;\n  }\n}\n\nexport const OpenFileHandler = connect(null, mapDispatchToProps)(OpenFileHandlerC);\n","import * as React from \"react\";\nimport { invokeOpenCommand } from \"../../gui/OpenFileHandler\";\nimport { IRootState, store } from \"../../store\";\nimport { newStory } from \"../../gui/editor/viewedit.actions\";\nimport { isEditMode, isPlayMode, routes } from \"../routing/Routing\";\nimport { IShortcut } from \"./shortcutManager\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\n\n/** A command is a set of functions executed when the command is invoked by identity. */\nexport interface ICommand {\n  enableWhileTyping?: boolean;\n  functionsToInvoke: ICommandFunction[];\n  guid: commandIds;\n  shortcuts: IShortcut[];\n}\n\n/** Contains the event object and/or arbitrary data passed to the called command. */\nexport interface ICommandFunctionData {\n  event?: React.SyntheticEvent;\n  data?: any;\n}\n\n/** A function that can be executed by a command. */\nexport type ICommandFunction = (data?: ICommandFunctionData) => void;\n\n/**\n * Commands can be invoked by ID or keyboard shortcuts. Users can define shortcuts, making it\n * valuable to define frequent or important user actions as commands.\n */\nexport enum commandIds {\n  newProject = \"newProject\",\n  openProjectOrGame = \"openProjectOrGame\",\n  saveProjectOrGame = \"saveProjectOrGame\",\n  switchMode = \"switchMode\",\n}\n\n/** The list of all commands and their default shortcuts. */\nexport const commands: { [key in commandIds]: ICommand } = {\n  newProject: {\n    functionsToInvoke: [],\n    guid: commandIds.newProject as commandIds,\n    shortcuts: [\n      {\n        originalSequence: [{ key: \"N\", usesShift: true }],\n      },\n    ],\n  },\n  openProjectOrGame: {\n    functionsToInvoke: [],\n    guid: commandIds.openProjectOrGame as commandIds,\n    shortcuts: [\n      {\n        originalSequence: [{ key: \"O\", usesShift: true }],\n      },\n    ],\n  },\n  saveProjectOrGame: {\n    functionsToInvoke: [],\n    guid: commandIds.saveProjectOrGame as commandIds,\n    shortcuts: [\n      {\n        originalSequence: [{ key: \"S\", usesShift: true }],\n      },\n    ],\n  },\n  switchMode: {\n    functionsToInvoke: [],\n    guid: commandIds.switchMode as commandIds,\n    shortcuts: [\n      {\n        originalSequence: [{ key: \"Q\", usesShift: true }],\n      },\n    ],\n  },\n};\n\n/** Invokes the command with the given ID. */\nexport const invokeCommand = (Id: commandIds, data?: ICommandFunctionData) => {\n  // Silently consume command invocations that aren't enabled while typing. They still consume keypresses.\n  if (\n    commands[Id].enableWhileTyping !== true &&\n    (document.activeElement?.nodeName.toLowerCase() === \"textarea\" ||\n      (document.activeElement?.nodeName.toLowerCase() === \"input\" &&\n        document.activeElement.getAttribute(\"type\") === \"text\"))\n  ) {\n    return;\n  }\n\n  commands[Id].functionsToInvoke.forEach((func: ICommandFunction) => func(data));\n};\n\nconst mapStateToProps = (state: IRootState) => {\n  return {};\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {};\n};\n\ntype CommandHandlerOwnProps = {};\ntype CommandHandlerPropsWithRouteInfo = CommandHandlerOwnProps & RouteComponentProps;\n\nexport class CommandHandlerC extends React.Component<CommandHandlerPropsWithRouteInfo> {\n  /** Disabled in play mode. Prompts the author to save unsaved changes, then starts a new project. */\n  private actionNewProject() {\n    if (isEditMode()) {\n      store.dispatch(newStory);\n    }\n  }\n\n  /**\n   * If in play mode, prompts the player to save unsaved progress, then opens a different game.\n   * If in edit mode, prompts the author to save unsaved changes, then opens a different game.\n   */\n  private actionOpenProjectOrGame(data?: { data?: { callback: Function } }) {\n    invokeOpenCommand(data?.data?.callback ?? undefined);\n  }\n\n  /**\n   * If in play mode, may prompt the player for a game progress save location, then saves.\n   * If in edit mode, may prompt the author for a project save location, then saves.\n   */\n  private actionSaveProjectOrGame() {\n    if (isPlayMode()) {\n      alert(\"Invoked file -> save game.\"); //TODO\n    } else if (isEditMode()) {\n      alert(\"Invoked file -> save project.\"); //TODO\n    }\n  }\n\n  private actionSwitchMode = () => {\n    if (isPlayMode()) {\n      this.props.history.push(routes.edit);\n    } else if (isEditMode()) {\n      this.props.history.push(routes.play);\n    }\n  };\n\n  public componentDidMount() {\n    commands.newProject.functionsToInvoke = [this.actionNewProject];\n    commands.openProjectOrGame.functionsToInvoke = [this.actionOpenProjectOrGame];\n    commands.saveProjectOrGame.functionsToInvoke = [this.actionSaveProjectOrGame];\n    commands.switchMode.functionsToInvoke = [this.actionSwitchMode];\n  }\n\n  public render() {\n    return <></>;\n  }\n}\n\n/** Hooks up actions, some of which require current state or history, to commands. */\nexport const CommandHandler = connect(mapStateToProps, mapDispatchToProps)(withRouter(CommandHandlerC));\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { ISettingState, settings } from \"./common/settings/settings.reducers\";\nimport { IPersistenceState, persistence } from \"./common/storage/persistence.reducers\";\nimport { IViewEditState, viewEdit } from \"./gui/editor/viewedit.reducers\";\nimport {\n  IAuthorStorySettingsState,\n  authorStorySettings,\n} from \"./gui/editor-settings-page/authorStorySettings.reducers\";\nimport {\n  IPlayerStorySettingsState,\n  playerStorySettings,\n} from \"./gui/runner-settings-page/playerStorySettings.reducers\";\nimport {\n  ICurrentRunnerSettingsState,\n  currentRunnerSettings,\n} from \"./gui/editor-settings-page/currentRunnerSettings.reducers\";\nimport { IRunnerSettingsState, runnerSettings } from \"./gui/runner-settings-page/runnerSettings.reducers\";\n\n/** All reducers. */\nexport interface IRootState {\n  persistence: IPersistenceState;\n  settings: ISettingState;\n  viewEdit: IViewEditState;\n  authorStorySettings: IAuthorStorySettingsState;\n  currentRunnerSettings: ICurrentRunnerSettingsState;\n  playerStorySettings: IPlayerStorySettingsState;\n  runnerSettings: IRunnerSettingsState;\n}\n\nconst rootReducer = combineReducers({\n  persistence,\n  settings,\n  viewEdit,\n  authorStorySettings,\n  currentRunnerSettings,\n  playerStorySettings,\n  runnerSettings,\n});\n\n/** Provides global access to the static Redux store. */\nexport const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { initializeIcons, loadTheme } from \"@fluentui/react\";\nimport { HashRouter } from \"react-router-dom\";\nimport { listenForShortcuts } from \"./common/commands/shortcutManager\";\nimport { store } from \"./store\";\nimport { Themes, themes } from \"./common/themes\";\nimport { Routing } from \"./common/routing/Routing\";\n\ninitializeIcons(); // Ensures all icons are available.\nlistenForShortcuts(); // Hooks up global key listeners.\n\n// Applies the default light theme.\nloadTheme(themes[Themes.Default].theme);\ndocument.body.style.backgroundColor = themes[Themes.Default].theme.semanticColors.bodyBackground;\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <Routing />\n    </HashRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import { commandIds, commands, ICommand, invokeCommand } from \"./CommandHandler\";\n\n/** A sequence of consecutive keystrokes that define a shortcut. */\nexport interface IShortcut {\n  /** If defined, this represents a custom preferred shortcut defined by the user. */\n  customSequence?: IShortcutStep[];\n\n  disabled?: boolean;\n\n  /**\n   * Used only if no custom sequence is defined. This is used to clear user-defined shortcuts. An\n   * empty array signifies the shortcut was created entirely by the user.\n   */\n  originalSequence: IShortcutStep[];\n}\n\n/** A single key with optional modifier keys requirements. */\nexport interface IShortcutStep {\n  key: string;\n  usesAlt?: boolean;\n  usesCtrl?: boolean;\n  usesShift?: boolean;\n}\n\ninterface IMatchProgress {\n  shortcut: IShortcut;\n  step: number;\n}\n\n/** Returns a string representation of the provided shortcut. */\nexport const getKeyTip = (shortcut: IShortcutStep[]) => {\n  let shortcutString = \"\";\n\n  shortcut.forEach((step: IShortcutStep, index: number) => {\n    if (index !== 0) {\n      shortcutString += \", \";\n    }\n\n    if (step.usesCtrl === true) {\n      shortcutString += \"Ctrl + \";\n    }\n    if (step.usesShift === true) {\n      shortcutString += \"Shift + \";\n    }\n    if (step.usesAlt === true) {\n      shortcutString += \"Alt + \";\n    }\n\n    shortcutString += step.key.toUpperCase();\n  });\n\n  return shortcutString;\n};\n\n/** Returns a string representation of the first active shortcut for the given command. */\nexport const getFirstKeyTip = (command: ICommand) => {\n  if (command.shortcuts.length === 0) {\n    return \"\";\n  }\n\n  if (command.shortcuts[0].customSequence !== undefined) {\n    return getKeyTip(command.shortcuts[0].customSequence);\n  }\n\n  return getKeyTip(command.shortcuts[0].originalSequence);\n};\n\n/** Begins listening to key presses and invokes matching commands. */\nexport const listenForShortcuts = () => {\n  const commandKeys = Object.keys(commands) as Array<keyof typeof commands>;\n  const commandsWithMatchProgress: Partial<{ [key in commandIds]: IMatchProgress[] }> = {};\n\n  // Tracks progress towards executing a command.\n  commandKeys.forEach((key: commandIds) => {\n    commandsWithMatchProgress[key] = commands[key].shortcuts.map((shortcut: IShortcut) => ({\n      shortcut,\n      step: 0,\n    }));\n  });\n\n  window.addEventListener(\"keypress\", (ev: KeyboardEvent) => {\n    // For every shortcut on every command.\n    commandKeys.forEach((key: commandIds) => {\n      const commandProgress = commandsWithMatchProgress[key]!;\n\n      // tslint:disable:prefer-for-of Better performance with return.\n      for (let i = 0; i < commandProgress.length; i++) {\n        const progress = commandProgress[i];\n\n        if (progress.shortcut.disabled === true) {\n          continue;\n        }\n\n        // Which keyboard sequence is actually bound to the command.\n        const sequence =\n          progress.shortcut.customSequence !== undefined\n            ? progress.shortcut.customSequence\n            : progress.shortcut.originalSequence;\n\n        if (sequence.length === 0) {\n          continue;\n        }\n\n        // Resets progress towards executing a command if the pressed key is out of sequence.\n        if (\n          sequence[progress.step].key !== ev.key.toUpperCase() ||\n          Boolean(sequence[progress.step].usesAlt) !== ev.altKey ||\n          Boolean(sequence[progress.step].usesCtrl) !== ev.ctrlKey ||\n          Boolean(sequence[progress.step].usesShift) !== ev.shiftKey\n        ) {\n          progress.step = 0;\n        }\n\n        // Increments the sequence progress or executes the command and returns to avoid redundant\n        // execution.\n        else {\n          if (progress.step === sequence.length - 1) {\n            invokeCommand(key);\n            progress.step = 0;\n            return;\n          }\n\n          progress.step++;\n        }\n      }\n    });\n  });\n};\n","import { IToken } from \"./utils\";\n\n/** A bool token to store a bool literal. */\nexport class TokenBool implements IToken {\n  public strForm: string;\n  public value: boolean;\n\n  constructor(value: boolean) {\n    this.strForm = value.toString();\n    this.value = value;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenBool) {\n    return this.strForm === obj.strForm && this.value === obj.value;\n  }\n}\n","import { localizedStrings } from \"./LocalizedStrings\";\n\n/**\n * Gets the nearest supported locale from the browser using navigator.languages or\n * navigator.language. This is accurate for Firefox and Chrome. IE and Edge return the OS language\n * instead and only return the browser language from an Accept-Languages header. This is considered\n * good enough though. Defaults to en-US if the preferred locale isn't listed.\n */\nexport const getSupportedLocale = (): keyof ILocalizedStringSets => {\n  let defaultLocale = \"en-us\";\n\n  // This is an experimental feature at time of writing, so it may be undefined.\n  if (navigator.languages !== undefined) {\n    for (const lang of navigator.languages) {\n      const langParts = lang.toLowerCase().split(\"-\");\n      const language = langParts[0];\n      const region = langParts.length > 1 ? langParts[1] : \"\";\n\n      // If a language but not the dialect for a region is available, use it instead.\n      if (`${language}-${region}` in supportedLocales) {\n        defaultLocale = `${language}-${region}`;\n        break;\n      } else if (`${language}` in supportedLocales) {\n        defaultLocale = `${language}`;\n        break;\n      }\n    }\n  } else {\n    const language = navigator.language.toLowerCase();\n\n    if (language in supportedLocales) {\n      defaultLocale = language;\n    }\n  }\n\n  return supportedLocales[defaultLocale as keyof ISupportedLocales];\n};\n\n/** Returns the strings for the given locale, or the assumed locale if not provided. */\nexport const getStrings = (locale?: keyof ISupportedLocales): ILocalizedStrings => {\n  return localizedStrings[supportedLocales[locale || getSupportedLocale()] as keyof typeof localizedStrings];\n};\n\n/** All locales to be accepted as valid. */\nexport interface ISupportedLocales {\n  \"en\": keyof ILocalizedStringSets;\n  \"en-us\": keyof ILocalizedStringSets;\n}\n\n/** A list of valid locales as keys, and the locales they default to as values. */\nexport const supportedLocales: ISupportedLocales = {\n  \"en\": \"en-us\",\n  \"en-us\": \"en-us\",\n};\n\n/** All locales with direct support. */\nexport interface ILocalizedStringSets {\n  \"en-us\": ILocalizedStrings;\n}\n\n/** All strings to be localized per locale. */\nexport interface ILocalizedStrings {\n  ApplicationName: string;\n  ApplicationNameAndVersion: (appName: string, appVersion: string) => string;\n  EditorPlay: string;\n  LanguageCodeName: string;\n  MenuBack: string;\n  MenuFile: string;\n  MenuFileNew: string;\n  MenuFileOpen: string;\n  MenuFileSave: string;\n  MenuFileSwitchToEdit: string;\n  MenuFileSwitchToPlay: string;\n  MenuPrefRunnerSettings: string;\n  MenuPrefEditorSettings: string;\n  RunnerRestart: string;\n  SettingsControlColorPickerBlue: string;\n  SettingsControlColorPickerGreen: string;\n  SettingsControlColorPickerHex: string;\n  SettingsControlColorPickerHue: string;\n  SettingsControlColorPickerRed: string;\n  SettingsControlColorPickerSelectedColor: string;\n  SettingsControlColorPickerSelectedSv: string;\n  SettingsControlColorPickerSvAria: string;\n  SettingsControlColorPickerSvDescription: string;\n  SettingsControlFontSizeSpinButtonAria: string;\n  SettingsControlFontSizeSpinButtonDecrAria: string;\n  SettingsControlFontSizeSpinButtonIncrAria: string;\n  SettingsControlFontSizeSpinButtonLabel: string;\n  SettingsControlFontSizeSpinButtonUnset: string;\n  SettingsControlFontSizeDropdownLabel: string;\n  SettingsControlFontSizeDropdownRemsLabel: string;\n  SettingsControlFontSizeDropdownRemsTitle: string;\n  SettingsControlFontSizeDropdownPixelsLabel: string;\n  SettingsControlFontSizeDropdownPixelsTitle: string;\n  SettingsControlFontStyleBold: string;\n  SettingsControlFontStyleItalic: string;\n  SettingsControlFontStyleStrikethrough: string;\n  SettingsControlFontStyleUnderline: string;\n  SettingsControlFontStyleSliderOff: string;\n  SettingsControlFontStyleSliderOn: string;\n  SettingsControlFontStyleSliderUnset: string;\n  SettingsDescription: string;\n  SettingsLivePreview: string;\n  SettingsLivePreviewStory: string;\n  SettingsRunnerInputStyles: string;\n  SettingsRunnerOptionStyles: string;\n  SettingsRunnerOptionHighlightStyles: string;\n  SettingsRunnerOutputStyles: string;\n  SettingsTextStyleColorUnset: string;\n  SettingsTextStyleDarkColor: string;\n  SettingsTextStyleHighlightDarkColor: string;\n  SettingsTextStyleHighlightLightColor: string;\n  SettingsTextStyleLightColor: string;\n  SettingsTitle: string;\n  ThemeContrastDark: string;\n  ThemeContrastLight: string;\n  ThemeDefault: string;\n  ThemeDeepSea: string;\n  ThemeDim: string;\n  ThemeEarthAndSky: string;\n  ThemeMidnight: string;\n  ThemeMuted: string;\n  ThemeSlate: string;\n  ThemeDropdownText: (themeName: string) => string;\n  TipLanguage: string;\n  TipNavigateCommandBar: string;\n  TipTheme: string;\n  WelcomeButtonOpenPlay: string;\n  WelcomeButtonOpenEdit: string;\n  WelcomeButtonNew: string;\n}\n","/**\n * The values of entries in this file are guaranteed to remain the same so that they form a\n * reliable public API that enables browser plugins and other script modifications to work with\n * the editor & runner software. Do not change them.\n */\n\n/** Identifies the source input field for direct editing. */\nexport const idEditorInputfield = \"editor-inputfield\";\n\n/** Wraps the div that contains everything related to the editor. */\nexport const idEditorWrapper = \"editor-wrapper\";\n\n/** Wraps the content of the current page. */\nexport const idRunnerContent = \"runner-content\";\n\n/** Indentifies the textbox while playing the game, if available. */\nexport const idRunnerInputfield = \"runner-inputfield\";\n\n/** Wraps the log of all previous content (both player input and game output). */\nexport const idRunnerLog = \"runner-log\";\n\n/** Wraps the hyperlink options list. */\nexport const idRunnerOptions = \"runner-options\";\n\n/** Identifies the special restart option. */\nexport const idRunnerOptionRestart = \"runner-option-restart\";\n\n/** Wraps the div that contains everything related to the runner. */\nexport const idRunnerWrapper = \"runner-wrapper\";\n\n/** Identifies an element in the runner designated as representing player input. */\nexport const idRunnerInputElement = \"runner-input\";\n\n/** Identifies an element in the runner designated as representing an option. */\nexport const idRunnerOptionElement = \"runner-option\";\n\n/** Identifies an element in the runner designated as representing game output. */\nexport const idRunnerOutputElement = \"runner-output\";\n","import { getStrings } from \"./localization/Localization\";\nimport { createTheme, ITheme } from \"@fluentui/react/lib/Styling\";\n\nexport enum ThemeTypes {\n  Light,\n  Dark,\n}\n\n/** All existing themes. The theme dropdown menu populates items in the given order, so don't change it. */\nexport enum Themes {\n  Default = 0,\n  EarthAndSky = 1,\n  ContrastLight = 2,\n  Muted = 3,\n  Slate = 4,\n  DeepSea = 5,\n  Midnight = 6,\n  ContrastDark = 7,\n  Dim = 8,\n}\n\nexport interface ISupportedTheme {\n  localizedName: string;\n  theme: ITheme;\n  themeId: Themes;\n  themeType: ThemeTypes;\n}\n\nconst strings = getStrings();\n\n/** Colors with associated themes. Note: items here are displayed in the order given below for the themes dropdown. */\nexport const themes: { [key in Themes]: ISupportedTheme } = {\n  [Themes.ContrastDark]: {\n    localizedName: strings.ThemeContrastDark,\n    themeId: Themes.ContrastDark,\n    themeType: ThemeTypes.Dark,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#ffea00\",\n        themeLighterAlt: \"#0a0900\",\n        themeLighter: \"#292500\",\n        themeLight: \"#4d4600\",\n        themeTertiary: \"#998c00\",\n        themeSecondary: \"#e0ce00\",\n        themeDarkAlt: \"#ffec19\",\n        themeDark: \"#ffef3d\",\n        themeDarker: \"#fff370\",\n        neutralLighterAlt: \"#0b0b0b\",\n        neutralLighter: \"#151515\",\n        neutralLight: \"#252525\",\n        neutralQuaternaryAlt: \"#2f2f2f\",\n        neutralQuaternary: \"#373737\",\n        neutralTertiaryAlt: \"#595959\",\n        neutralTertiary: \"#c8c8c8\",\n        neutralSecondary: \"#d0d0d0\",\n        neutralPrimaryAlt: \"#dadada\",\n        neutralPrimary: \"#ffffff\",\n        neutralDark: \"#f4f4f4\",\n        black: \"#f8f8f8\",\n        white: \"#000000\",\n      },\n    }),\n  },\n  [Themes.ContrastLight]: {\n    localizedName: strings.ThemeContrastLight,\n    themeId: Themes.ContrastLight,\n    themeType: ThemeTypes.Light,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#000080\",\n        themeLighterAlt: \"#f0f0fa\",\n        themeLighter: \"#c5c5eb\",\n        themeLight: \"#9898d9\",\n        themeTertiary: \"#4747b3\",\n        themeSecondary: \"#11118f\",\n        themeDarkAlt: \"#000073\",\n        themeDark: \"#000061\",\n        themeDarker: \"#000047\",\n        neutralLighterAlt: \"#f8f8f8\",\n        neutralLighter: \"#f4f4f4\",\n        neutralLight: \"#eaeaea\",\n        neutralQuaternaryAlt: \"#dadada\",\n        neutralQuaternary: \"#d0d0d0\",\n        neutralTertiaryAlt: \"#c8c8c8\",\n        neutralTertiary: \"#595754\",\n        neutralSecondary: \"#373534\",\n        neutralPrimaryAlt: \"#2f2d2c\",\n        neutralPrimary: \"#000000\",\n        neutralDark: \"#151413\",\n        black: \"#0b0b0a\",\n        white: \"#ffffff\",\n      },\n    }),\n  },\n  [Themes.DeepSea]: {\n    localizedName: strings.ThemeDeepSea,\n    themeId: Themes.DeepSea,\n    themeType: ThemeTypes.Dark,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#e8a63c\",\n        themeLighterAlt: \"#090702\",\n        themeLighter: \"#251b0a\",\n        themeLight: \"#463212\",\n        themeTertiary: \"#8b6424\",\n        themeSecondary: \"#cc9235\",\n        themeDarkAlt: \"#eaaf4e\",\n        themeDark: \"#eeba68\",\n        themeDarker: \"#f2cc8e\",\n        neutralLighterAlt: \"#02132b\",\n        neutralLighter: \"#041833\",\n        neutralLight: \"#092141\",\n        neutralQuaternaryAlt: \"#0e274a\",\n        neutralQuaternary: \"#122c51\",\n        neutralTertiaryAlt: \"#27456f\",\n        neutralTertiary: \"#e8f6f6\",\n        neutralSecondary: \"#ebf8f7\",\n        neutralPrimaryAlt: \"#eff9f9\",\n        neutralPrimary: \"#dcf2f1\",\n        neutralDark: \"#f7fcfc\",\n        black: \"#fbfdfd\",\n        white: \"#000e21\",\n      },\n    }),\n  },\n  [Themes.Default]: {\n    localizedName: strings.ThemeDefault,\n    themeId: Themes.Default,\n    themeType: ThemeTypes.Light,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#5f609e\",\n        themeLighterAlt: \"#f7f7fb\",\n        themeLighter: \"#e0e0ef\",\n        themeLight: \"#c7c7e2\",\n        themeTertiary: \"#9696c5\",\n        themeSecondary: \"#6e6faa\",\n        themeDarkAlt: \"#55568e\",\n        themeDark: \"#484978\",\n        themeDarker: \"#353659\",\n        neutralLighterAlt: \"#e4e4e4\",\n        neutralLighter: \"#e1e1e1\",\n        neutralLight: \"#d7d7d7\",\n        neutralQuaternaryAlt: \"#c9c9c9\",\n        neutralQuaternary: \"#bfbfbf\",\n        neutralTertiaryAlt: \"#b8b8b8\",\n        neutralTertiary: \"#595959\",\n        neutralSecondary: \"#373737\",\n        neutralPrimaryAlt: \"#2f2f2f\",\n        neutralPrimary: \"#000000\",\n        neutralDark: \"#151515\",\n        black: \"#0b0b0b\",\n        white: \"#ebebeb\",\n      },\n    }),\n  },\n  [Themes.Dim]: {\n    localizedName: strings.ThemeDim,\n    themeId: Themes.Dim,\n    themeType: ThemeTypes.Dark,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#784600\",\n        themeLighterAlt: \"#050300\",\n        themeLighter: \"#130b00\",\n        themeLight: \"#241500\",\n        themeTertiary: \"#482a00\",\n        themeSecondary: \"#693e00\",\n        themeDarkAlt: \"#85530d\",\n        themeDark: \"#986825\",\n        themeDarker: \"#b3894f\",\n        neutralLighterAlt: \"#000b01\",\n        neutralLighter: \"#021502\",\n        neutralLight: \"#052506\",\n        neutralQuaternaryAlt: \"#092f0a\",\n        neutralQuaternary: \"#0c370d\",\n        neutralTertiaryAlt: \"#1f5921\",\n        neutralTertiary: \"#222222\",\n        neutralSecondary: \"#454443\",\n        neutralPrimaryAlt: \"#656463\",\n        neutralPrimary: \"#737270\",\n        neutralDark: \"#949392\",\n        black: \"#b0afae\",\n        white: \"#000000\",\n      },\n    }),\n  },\n  [Themes.EarthAndSky]: {\n    localizedName: strings.ThemeEarthAndSky,\n    themeId: Themes.EarthAndSky,\n    themeType: ThemeTypes.Light,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#8f4700\",\n        themeLighterAlt: \"#fbf6f0\",\n        themeLighter: \"#eddac7\",\n        themeLight: \"#ddbc9b\",\n        themeTertiary: \"#bc834b\",\n        themeSecondary: \"#9c5813\",\n        themeDarkAlt: \"#814000\",\n        themeDark: \"#6d3600\",\n        themeDarker: \"#502800\",\n        neutralLighterAlt: \"#e9f6f8\",\n        neutralLighter: \"#e5f2f4\",\n        neutralLight: \"#dce8ea\",\n        neutralQuaternaryAlt: \"#cdd8da\",\n        neutralQuaternary: \"#c4cfd0\",\n        neutralTertiaryAlt: \"#bcc7c8\",\n        neutralTertiary: \"#a19f9d\",\n        neutralSecondary: \"#605e5c\",\n        neutralPrimaryAlt: \"#3b3a39\",\n        neutralPrimary: \"#323130\",\n        neutralDark: \"#201f1e\",\n        black: \"#000000\",\n        white: \"#f0fdff\",\n      },\n    }),\n  },\n  [Themes.Midnight]: {\n    localizedName: strings.ThemeMidnight,\n    themeId: Themes.Midnight,\n    themeType: ThemeTypes.Dark,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#d1ad7d\",\n        themeLighterAlt: \"#080705\",\n        themeLighter: \"#211c14\",\n        themeLight: \"#3f3426\",\n        themeTertiary: \"#7d684b\",\n        themeSecondary: \"#b8986e\",\n        themeDarkAlt: \"#d6b489\",\n        themeDark: \"#dcbf99\",\n        themeDarker: \"#e5cfb2\",\n        neutralLighterAlt: \"#0b0b0b\",\n        neutralLighter: \"#151515\",\n        neutralLight: \"#252525\",\n        neutralQuaternaryAlt: \"#2f2f2f\",\n        neutralQuaternary: \"#373737\",\n        neutralTertiaryAlt: \"#595959\",\n        neutralTertiary: \"#e0e0e0\",\n        neutralSecondary: \"#e5e5e5\",\n        neutralPrimaryAlt: \"#eaeaea\",\n        neutralPrimary: \"#d1d1d1\",\n        neutralDark: \"#f4f4f4\",\n        black: \"#f9f9f9\",\n        white: \"#000000\",\n      },\n    }),\n  },\n  [Themes.Muted]: {\n    localizedName: strings.ThemeMuted,\n    themeId: Themes.Muted,\n    themeType: ThemeTypes.Light,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#23295c\",\n        themeLighterAlt: \"#f2f3f8\",\n        themeLighter: \"#ced0e5\",\n        themeLight: \"#a8acce\",\n        themeTertiary: \"#63689d\",\n        themeSecondary: \"#33396f\",\n        themeDarkAlt: \"#1f2553\",\n        themeDark: \"#1b1f46\",\n        themeDarker: \"#141733\",\n        neutralLighterAlt: \"#bdbdbb\",\n        neutralLighter: \"#bfc0be\",\n        neutralLight: \"#c4c4c2\",\n        neutralQuaternaryAlt: \"#c6c7c5\",\n        neutralQuaternary: \"#c9c9c7\",\n        neutralTertiaryAlt: \"#d2d2d1\",\n        neutralTertiary: \"#595959\",\n        neutralSecondary: \"#373737\",\n        neutralPrimaryAlt: \"#2f2f2f\",\n        neutralPrimary: \"#000000\",\n        neutralDark: \"#151515\",\n        black: \"#0b0b0b\",\n        white: \"#babab8\",\n      },\n    }),\n  },\n  [Themes.Slate]: {\n    localizedName: strings.ThemeSlate,\n    themeId: Themes.Slate,\n    themeType: ThemeTypes.Dark,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#9798bd\",\n        themeLighterAlt: \"#060608\",\n        themeLighter: \"#18181e\",\n        themeLight: \"#2d2e39\",\n        themeTertiary: \"#5b5b71\",\n        themeSecondary: \"#8586a6\",\n        themeDarkAlt: \"#a0a1c3\",\n        themeDark: \"#aeafcd\",\n        themeDarker: \"#c1c2da\",\n        neutralLighterAlt: \"#303736\",\n        neutralLighter: \"#373f3e\",\n        neutralLight: \"#434c4b\",\n        neutralQuaternaryAlt: \"#4b5453\",\n        neutralQuaternary: \"#515b5a\",\n        neutralTertiaryAlt: \"#6c7775\",\n        neutralTertiary: \"#dfdfdf\",\n        neutralSecondary: \"#e4e4e4\",\n        neutralPrimaryAlt: \"#e9e9e9\",\n        neutralPrimary: \"#cfcfcf\",\n        neutralDark: \"#f4f4f4\",\n        black: \"#f9f9f9\",\n        white: \"#272e2d\",\n      },\n    }),\n  },\n};\n","import { IToken } from \"./utils\";\n\n/** A numeric token to store an identifer. */\nexport class TokenId implements IToken {\n  public strForm: string;\n  public value: number | string | boolean | null;\n\n  constructor(name: string, value: number | string | boolean | null) {\n    this.strForm = name;\n    this.value = value;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenId) {\n    return this.strForm === obj.strForm && this.value === obj.value;\n  }\n}\n","import { IToken, tokenEvalFunc } from \"./utils\";\n\n/** A symbolic token to store a general symbol. */\nexport class TokenFunc implements IToken {\n  public strForm: string;\n  public numArgs: number;\n  public function: tokenEvalFunc;\n\n  constructor(name: string, numberOfArgs: number, operation: tokenEvalFunc) {\n    this.strForm = name;\n    this.numArgs = numberOfArgs;\n    this.function = operation;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenFunc) {\n    return this.strForm === obj.strForm && this.numArgs === obj.numArgs && this.function === obj.function;\n  }\n}\n","import { combineReducers, Dispatch } from \"redux\";\nimport { IAction } from \"../../common/redux/reduxTools\";\nimport { actions, updateStory, saveAndRunStory, rerenderStory, newStory } from \"./viewedit.actions\";\n\n/**\n * Contains the up-to-date text for the story, which is updated when loading a story, adding to\n * it with GUI controls, trying to run the story after editing the source, or blurring the textarea\n * after editing the source.\n */\nconst story = (state = \"\", action: IAction) => {\n  if (action.type === actions.updateStory) {\n    return (action as ReturnType<typeof updateStory>).story;\n  }\n  if (action.type === actions.saveAndRunStory) {\n    return (action as ReturnType<typeof saveAndRunStory>).story;\n  }\n  if (action.type === actions.newStory) {\n    return \"\";\n  }\n\n  return state;\n};\n\n/**\n * Contains the copy of the story from when it was last executed, which may be older than the\n * current story. Updating this causes the story to execute again.\n */\nconst storyToParse = (state = \"\", action: IAction) => {\n  if (action.type === actions.saveAndRunStory) {\n    return (action as ReturnType<typeof saveAndRunStory>).story;\n  }\n  if (action.type === actions.newStory) {\n    return \"\";\n  }\n\n  return state;\n};\n\n/**\n * Uses a number to indicate that the story should be parsed again. Necessary because there is no good way to pass the\n * action from the editor to runner, and restarting without the story text changing is a common operation.\n */\nconst storyReparseToken = (state = 0, action: IAction) => {\n  if (action.type === actions.saveAndRunStory) {\n    return state + 1;\n  }\n\n  return state;\n};\n\n/**\n * Uses a number to indicate that the runner should re-render. The alternative is to re-render any time output, input,\n * and logs change, which gets up to 20-30 re-renders per new page. Instead, increment this when the page is done.\n */\nconst storyRerenderToken = (state = 0, action: IAction) => {\n  if (action.type === actions.rerenderStory) {\n    return state + 1;\n  }\n\n  return state;\n};\n\n/** Clears all story-related states. */\nexport const dispatchNewStory = (dispatch: Dispatch) => {\n  dispatch(newStory);\n};\n\n/** Sets the story that the user has typed. */\nexport const dispatchSetStory = (dispatch: Dispatch) => (story: string) => {\n  dispatch(updateStory(story));\n};\n\n/** Parses the story as currently written, updating the stored story to match the provided string. */\nexport const dispatchSaveAndRunStory = (dispatch: Dispatch) => (story: string) => {\n  dispatch(saveAndRunStory(story));\n};\n\n/** Causes the story to re-render. */\nexport const dispatchRerenderStory = (dispatch: Dispatch) => () => {\n  dispatch(rerenderStory);\n};\n\n// Combine reducers and typescript definition.\nexport interface IViewEditState {\n  story: string;\n  storyReparseToken: number;\n  storyRerenderToken: number;\n  storyToParse: string;\n}\n\nexport const viewEdit = combineReducers({\n  story,\n  storyReparseToken,\n  storyRerenderToken,\n  storyToParse,\n});\n","import { ITextStyle } from \"../redux/typedefs\";\nimport { ISupportedTheme, ThemeTypes } from \"../themes\";\nimport { fallbackFontStack } from \"./controlStyles\";\n\n/** Declaring the element type allows the interpreter to select the right fallback styles. */\nexport enum fallbackElementType {\n  input,\n  option,\n  optionHighlight,\n  output,\n}\n\n/**\n * The inherent styles used for different elements, if no other style is applied.\n * Note that the redundant casting below is necessary as of TS 4.0.3 due to type resolution problems.\n */\nconst fallbackStyles = (theme: ISupportedTheme) => {\n  return {\n    [fallbackElementType.input]: {\n      color: theme.theme.semanticColors.errorText,\n      fontFamily: fallbackFontStack,\n      fontSize: \"1.2 rem\",\n      fontStyle: \"normal\" as \"normal\",\n      fontWeight: \"normal\" as \"normal\",\n      textDecoration: \"inherit\" as \"inherit\",\n    },\n    [fallbackElementType.option]: {\n      color: theme.theme.palette.blue,\n      fontFamily: fallbackFontStack,\n      fontSize: \"1.2 rem\",\n      fontStyle: \"normal\" as \"normal\",\n      fontWeight: \"normal\" as \"normal\",\n      textDecoration: \"underline\" as \"underline\",\n    },\n    [fallbackElementType.optionHighlight]: {\n      color: theme.theme.palette.blueDark,\n      fontFamily: fallbackFontStack,\n      fontSize: \"1.2 rem\",\n      fontStyle: \"normal\" as \"normal\",\n      fontWeight: \"normal\" as \"normal\",\n      textDecoration: \"underline\" as \"underline\",\n    },\n    [fallbackElementType.output]: {\n      color: theme.theme.semanticColors.bodyText,\n      fontFamily: fallbackFontStack,\n      fontSize: \"1.2 rem\",\n      fontStyle: \"normal\" as \"normal\",\n      fontWeight: \"normal\" as \"normal\",\n      textDecoration: \"inherit\" as \"inherit\",\n    },\n  };\n};\n\n/**\n * Applies text styles to determine font family, size, bold/italic/underline, and color. Players can set their own\n * style overrides (playerStyle). The author can set styles within the game that deviate from the normal styling\n * (storyStyle), and set a global default style for the story (authorStyle). When editing a story, playerStyle should\n * be left empty. PlayerStyle overrides storyStyle, which overrides authorStyle. Overrides work per attribute, and\n * fall down to the next style if not met, or a natural default if none are met.\n *\n * Light colors are used in lightMode and dark colors in darkMode, as defined by the theming.\n *\n * @param playerStyle Styles that a player has set to override all styles in stories they read, if set.\n * @param storyStyle Specific one-off styling within the story.\n * @param authorStyle Styles that an author has set as the default text styling.\n */\nexport const getTextStyle = (\n  theme: ISupportedTheme,\n  playerStyle: ITextStyle,\n  storyStyle: ITextStyle,\n  authorStyle: ITextStyle,\n  fallback: fallbackElementType\n): React.CSSProperties => {\n  const fallbackStyle = fallbackStyles(theme)[fallback];\n\n  const color =\n    theme.themeType === ThemeTypes.Light\n      ? playerStyle.colorLight || storyStyle.colorLight || authorStyle.colorLight || fallbackStyle.color\n      : playerStyle.colorDark || storyStyle.colorDark || authorStyle.colorDark || fallbackStyle.color;\n\n  const backgroundColor =\n    theme.themeType === ThemeTypes.Light\n      ? playerStyle.colorHighlightLight ||\n        storyStyle.colorHighlightLight ||\n        authorStyle.colorHighlightLight ||\n        \"transparent\"\n      : playerStyle.colorHighlightDark ||\n        storyStyle.colorHighlightDark ||\n        authorStyle.colorHighlightDark ||\n        \"transparent\";\n\n  const fontFamily = playerStyle.font || storyStyle.font || authorStyle.font || fallbackStyle.fontFamily;\n  const fontSize = playerStyle.fontSize || storyStyle.fontSize || authorStyle.fontSize || fallbackStyle.fontSize;\n\n  let fontStyle: \"italic\" | \"normal\" = \"normal\";\n  let fontWeight: \"bold\" | \"normal\" = \"normal\";\n  let textDecoration: \"underline\" | \"inherit\" = \"inherit\";\n\n  if (playerStyle.styleItalic) {\n    fontStyle = playerStyle.styleItalic ? \"italic\" : fallbackStyle.fontStyle;\n  } else if (storyStyle.styleItalic) {\n    fontStyle = storyStyle.styleItalic ? \"italic\" : fallbackStyle.fontStyle;\n  } else if (authorStyle.styleItalic) {\n    fontStyle = authorStyle.styleItalic ? \"italic\" : fallbackStyle.fontStyle;\n  }\n\n  if (playerStyle.styleBold) {\n    fontWeight = playerStyle.styleBold ? \"bold\" : fallbackStyle.fontWeight;\n  } else if (storyStyle.styleBold) {\n    fontWeight = storyStyle.styleBold ? \"bold\" : fallbackStyle.fontWeight;\n  } else if (authorStyle.styleBold) {\n    fontWeight = authorStyle.styleBold ? \"bold\" : fallbackStyle.fontWeight;\n  }\n\n  // TODO: add strikethrough\n\n  if (playerStyle.styleUnderline) {\n    textDecoration = playerStyle.styleUnderline ? \"underline\" : fallbackStyle.textDecoration;\n  } else if (storyStyle.styleUnderline) {\n    textDecoration = storyStyle.styleUnderline ? \"underline\" : fallbackStyle.textDecoration;\n  } else if (authorStyle.styleUnderline) {\n    textDecoration = authorStyle.styleUnderline ? \"underline\" : fallbackStyle.textDecoration;\n  }\n\n  return {\n    backgroundColor,\n    color,\n    fontFamily,\n    fontSize,\n    fontStyle,\n    fontWeight,\n    textDecoration,\n    whiteSpace: \"pre-wrap\", // respects newlines and multiple whitespace.\n  };\n};\n","/** Represents a single token for evaluation. */\nexport interface IToken {\n  strForm: string;\n}\n\n/**\n * When this function is used, the input numbers can be accessed as an array of objects. As many as\n * provided by the number of arguments may be used.\n */\nexport type tokenEvalFunc = (tokens: IToken[]) => IToken | null;\n\n/** Matches an integer with optional negative sign in front. */\nexport const integerRegex = /^-*\\d+$/g;\n\n/** Matches a valid decimal number. */\nexport const numberRegex = /^-?(\\d+\\.?\\d*|\\d*\\.?\\d+)$/g;\n","import { IToken, numberRegex } from \"./utils\";\n\n/** A numeric token to store a numeric literal. */\nexport class TokenNum implements IToken {\n  public strForm: string;\n  public value: number;\n\n  constructor(value: string | number) {\n    if (typeof value === \"string\") {\n      this.strForm = value;\n\n      if (!numberRegex.test(value)) {\n        throw new Error(\"Parser: The expression '\" + value + \"' is not a valid number.\"); // TODO: localize.\n      }\n\n      this.value = parseFloat(value);\n    } else {\n      this.strForm = value.toString();\n      this.value = value;\n    }\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenNum) {\n    return this.strForm === obj.strForm && this.value === obj.value;\n  }\n}\n","import { ILocalizedStringSets } from \"./Localization\";\n\n// tslint:disable:max-line-length It's actually more legible to keep strings on one line here.\n\n/** All strings localized in all locales. */\nexport const localizedStrings: ILocalizedStringSets = {\n  \"en-us\": {\n    ApplicationName: \"Web Story\",\n    ApplicationNameAndVersion: (appName: string, appVersion: string) => `${appName} version ${appVersion}`,\n    EditorPlay: \"Play\",\n    LanguageCodeName: \"English (United States)\",\n    MenuBack: \"Back\",\n    MenuFile: \"File\",\n    MenuPrefEditorSettings: \"Settings and preferences for the game\",\n    MenuFileNew: \"New\",\n    MenuFileOpen: \"Open\",\n    MenuPrefRunnerSettings: \"Settings and preferences for your experience\",\n    MenuFileSave: \"Save\",\n    MenuFileSwitchToEdit: \"Switch to edit mode\",\n    MenuFileSwitchToPlay: \"Switch to play mode\",\n    RunnerRestart: \"Restart\",\n    SettingsControlColorPickerBlue: \"blue\",\n    SettingsControlColorPickerGreen: \"green\",\n    SettingsControlColorPickerHex: \"hex\",\n    SettingsControlColorPickerHue: \"hue\",\n    SettingsControlColorPickerRed: \"red\",\n    SettingsControlColorPickerSelectedColor: \"Color picker, {0} selected.\",\n    SettingsControlColorPickerSelectedSv: \"Saturation {0} brightness {1}\",\n    SettingsControlColorPickerSvAria: \"saturation and brightness\",\n    SettingsControlColorPickerSvDescription:\n      \"Use left and right arrow keys to set saturation. Use up and down arrow keys to set brightness.\",\n    SettingsControlFontSizeSpinButtonAria: \"Adjust font size\",\n    SettingsControlFontSizeSpinButtonDecrAria: \"decrease font size by 1\",\n    SettingsControlFontSizeSpinButtonIncrAria: \"increase font size by 1\",\n    SettingsControlFontSizeSpinButtonLabel: \"font size\",\n    SettingsControlFontSizeSpinButtonUnset: \"unset\",\n    SettingsControlFontSizeDropdownLabel: \"font size unit\",\n    SettingsControlFontSizeDropdownRemsLabel: \"rems\",\n    SettingsControlFontSizeDropdownRemsTitle:\n      \"rems are a 'relative' measurement that takes screen density into account. Use this one normally.\",\n    SettingsControlFontSizeDropdownPixelsLabel: \"pixels\",\n    SettingsControlFontSizeDropdownPixelsTitle:\n      \"Pixels (px) is an 'absolute' measurement that doesn't take screen density into account, so a font may display at different sizes on different devices.\",\n    SettingsControlFontStyleSliderOff: \"always off\",\n    SettingsControlFontStyleSliderOn: \"always on\",\n    SettingsControlFontStyleSliderUnset: \"unset\",\n    SettingsControlFontStyleBold: \"bold\",\n    SettingsControlFontStyleItalic: \"italic\",\n    SettingsControlFontStyleStrikethrough: \"strikethrough\",\n    SettingsControlFontStyleUnderline: \"underline\",\n    SettingsDescription:\n      \"The values you set here will override the styles set by authors for their own games. Use this to customize your playing experience. Values set are reflected in the demo on the right-hand side.\",\n    SettingsLivePreview: \"Live Preview\",\n    SettingsLivePreviewStory:\n      \"@1\\n{normal text\\n}{italic text\\n*}{bold text\\n**}{bold italic text\\n***}\\noption @2\\n@2\\n{normal text}\\nback @1\",\n    SettingsRunnerInputStyles: \"Override text styles of logs\",\n    SettingsRunnerOptionStyles: \"Override text styles of options\",\n    SettingsRunnerOptionHighlightStyles: \"Override text styles of options the mouse hovers over\",\n    SettingsRunnerOutputStyles: \"Override preferences for text the game prints out\",\n    SettingsTextStyleColorUnset: \"unset\",\n    SettingsTextStyleDarkColor: \"Dark theme color\",\n    SettingsTextStyleHighlightDarkColor: \"Highlight dark theme color\",\n    SettingsTextStyleHighlightLightColor: \"Highlight light theme color\",\n    SettingsTextStyleLightColor: \"Light theme color\",\n    SettingsTitle: \"Text Style Overrides\",\n    ThemeContrastDark: \"🌑 Contrast Dark\",\n    ThemeContrastLight: \"☀️ Contrast Light\",\n    ThemeDefault: \"☀️ Default\",\n    ThemeDeepSea: \"🌑 Deep Sea\",\n    ThemeDim: \"🌑 Dim\",\n    ThemeEarthAndSky: \"☀️ Earth and Sky\",\n    ThemeMidnight: \"🌑 Midnight\",\n    ThemeMuted: \"☀️ Muted\",\n    ThemeSlate: \"🌑 Slate\",\n    ThemeDropdownText: (themeName: string) => `${themeName} theme`,\n    TipLanguage: \"Language\",\n    TipNavigateCommandBar: \"Use left and right arrow keys to navigate between commands.\",\n    TipTheme: \"Theme\",\n    WelcomeButtonOpenPlay: \"Open & Play\",\n    WelcomeButtonOpenEdit: \"Open & Edit\",\n    WelcomeButtonNew: \"New\",\n  },\n};\n","import { getActionGuid } from \"../../common/redux/reduxTools\";\nimport { IAuthorRunnerOptions } from \"../../common/redux/typedefs\";\n\nexport const actions = {\n  clearAllTempSettings: getActionGuid(),\n  setCurrentRunnerOptions: getActionGuid(),\n};\n\n/** Resets all temp settings to minimal defaults. */\nexport const clearAllTempSettings = {\n  type: actions.clearAllTempSettings,\n};\n\n/**\n * Sets story options such as logging behavior.\n */\nexport const setCurrentRunnerOptions = (options: IAuthorRunnerOptions) => {\n  return {\n    type: actions.setCurrentRunnerOptions,\n    options,\n  };\n};\n","import { combineReducers, Dispatch } from \"redux\";\nimport * as actions from \"./currentRunnerSettings.actions\";\nimport { IAction } from \"../../common/redux/reduxTools\";\nimport * as types from \"../../common/redux/typedefs\";\nimport { newStory } from \"../editor/viewedit.actions\";\n\nconst currentRunnerOptions = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setCurrentRunnerOptions) {\n    return (action as ReturnType<typeof actions.setCurrentRunnerOptions>).options;\n  }\n  if (action.type === actions.actions.clearAllTempSettings) {\n    return {};\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nexport const dispatchClearAllTempSettings = (dispatch: Dispatch) => {\n  dispatch(actions.clearAllTempSettings);\n};\n\nexport const dispatchSetTempStoryRunnerOptions = (dispatch: Dispatch) => (options: types.IAuthorRunnerOptions) => {\n  dispatch(actions.setCurrentRunnerOptions(options));\n};\n\n// Combine reducers and typescript definition.\nexport interface ICurrentRunnerSettingsState {\n  currentRunnerOptions: types.IAuthorRunnerOptions;\n}\n\nexport const currentRunnerSettings = combineReducers({\n  currentRunnerOptions,\n});\n","import { getActionGuid } from \"../../common/redux/reduxTools\";\nimport {\n  IRunnerLogSeparatorStyle,\n  IRunnerStyle,\n  IAuthorRunnerOptions,\n  ITextStyle,\n  IAuthorRunnerStrings,\n} from \"../../common/redux/typedefs\";\n\nexport const actions = {\n  setAuthorStoryInputStyles: getActionGuid(),\n  setAuthorStoryLogSeparatorStyles: getActionGuid(),\n  setAuthorStoryOptionStyles: getActionGuid(),\n  setAuthorStoryOptionHighlightStyles: getActionGuid(),\n  setAuthorStoryOutputStyles: getActionGuid(),\n  setAuthorStoryRunnerOptions: getActionGuid(),\n  setAuthorStoryRunnerStyles: getActionGuid(),\n  setAuthorStoryStrings: getActionGuid(),\n};\n\n/**\n * Sets the global story styling for previous textbox input from the player. This isn't necessarily the final styling.\n * The order goes built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setAuthorStoryInputStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setAuthorStoryInputStyles,\n    style,\n  };\n};\n\n/*\n * Sets the global story styling for the log separator. This isn't necessarily the final styling. The order goes\n * built-in defaults -> global story styling -> player style override.\n */\nexport const setAuthorStoryLogSeparatorStyles = (style: IRunnerLogSeparatorStyle) => {\n  return {\n    type: actions.setAuthorStoryLogSeparatorStyles,\n    style,\n  };\n};\n\n/**\n * Sets the global story styling for hyperlinks in the story. This isn't necessarily the final styling. The order goes\n * built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setAuthorStoryOptionStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setAuthorStoryOptionStyles,\n    style,\n  };\n};\n\n/**\n * Sets the global story styling for hovered hyperlinks in the story. This isn't necessarily the final styling. The\n * order goes built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setAuthorStoryOptionHighlightStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setAuthorStoryOptionHighlightStyles,\n    style,\n  };\n};\n\n/**\n * Sets the global story styling for all text output from the story. This isn't necessarily the final styling. The\n * order goes built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setAuthorStoryOutputStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setAuthorStoryOutputStyles,\n    style,\n  };\n};\n\n/**\n * Sets story options such as logging behavior.\n */\nexport const setAuthorStoryRunnerOptions = (options: IAuthorRunnerOptions) => {\n  return {\n    type: actions.setAuthorStoryRunnerOptions,\n    options,\n  };\n};\n\n/**\n * Sets the global story styling for the runner itself. This isn't necessarily the final styling. The order goes\n * built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setAuthorStoryRunnerStyles = (style: IRunnerStyle) => {\n  return {\n    type: actions.setAuthorStoryRunnerStyles,\n    style,\n  };\n};\n\n/**\n * Overrides special built-in strings relevant to the story.\n */\nexport const setAuthorStoryStrings = (strings: IAuthorRunnerStrings) => {\n  return {\n    type: actions.setAuthorStoryStrings,\n    strings,\n  };\n};\n","import { combineReducers, Dispatch } from \"redux\";\nimport * as actions from \"./authorStorySettings.actions\";\nimport { IAction } from \"../../common/redux/reduxTools\";\nimport * as types from \"../../common/redux/typedefs\";\nimport { newStory } from \"../editor/viewedit.actions\";\n\nconst authorStoryInputStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setAuthorStoryInputStyles) {\n    return (action as ReturnType<typeof actions.setAuthorStoryInputStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nconst authorStoryLogSeparatorStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setAuthorStoryLogSeparatorStyles) {\n    return (action as ReturnType<typeof actions.setAuthorStoryLogSeparatorStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nconst authorStoryOptionStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setAuthorStoryOptionStyles) {\n    return (action as ReturnType<typeof actions.setAuthorStoryOptionStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nconst authorStoryOptionHighlightStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setAuthorStoryOptionHighlightStyles) {\n    return (action as ReturnType<typeof actions.setAuthorStoryOptionHighlightStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nconst authorStoryOutputStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setAuthorStoryOutputStyles) {\n    return (action as ReturnType<typeof actions.setAuthorStoryOutputStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nconst authorStoryRunnerOptions = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setAuthorStoryRunnerOptions) {\n    return (action as ReturnType<typeof actions.setAuthorStoryRunnerOptions>).options;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nconst authorStoryRunnerStyles = (state = { background: { type: \"plain\" } }, action: IAction) => {\n  if (action.type === actions.actions.setAuthorStoryRunnerStyles) {\n    return (action as ReturnType<typeof actions.setAuthorStoryRunnerStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return { background: { type: \"plain\" } };\n  }\n\n  return state;\n};\n\nconst authorStoryStrings = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setAuthorStoryStrings) {\n    return (action as ReturnType<typeof actions.setAuthorStoryStrings>).strings;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nexport const dispatchSetAuthorStoryInputStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setAuthorStoryInputStyles(style));\n};\n\nexport const dispatchSetAuthorStoryLogSeparatorStyles =\n  (dispatch: Dispatch) => (style: types.IRunnerLogSeparatorStyle) => {\n    dispatch(actions.setAuthorStoryLogSeparatorStyles(style));\n  };\n\nexport const dispatchSetAuthorStoryOptionStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setAuthorStoryOptionStyles(style));\n};\n\nexport const dispatchSetAuthorStoryOptionHighlightStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setAuthorStoryOptionHighlightStyles(style));\n};\n\nexport const dispatchSetAuthorStoryOutputStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setAuthorStoryOutputStyles(style));\n};\n\nexport const dispatchSetAuthorStoryRunnerOptions = (dispatch: Dispatch) => (options: types.IAuthorRunnerOptions) => {\n  dispatch(actions.setAuthorStoryRunnerOptions(options));\n};\n\nexport const dispatchSetAuthorStoryRunnerStyles = (dispatch: Dispatch) => (style: types.IRunnerStyle) => {\n  dispatch(actions.setAuthorStoryRunnerStyles(style));\n};\n\nexport const dispatchSetAuthorStoryStrings = (dispatch: Dispatch) => (strings: types.IAuthorRunnerStrings) => {\n  dispatch(actions.setAuthorStoryStrings(strings));\n};\n\n// Combine reducers and typescript definition.\nexport interface IAuthorStorySettingsState {\n  authorStoryInputStyles: types.ITextStyle;\n  authorStoryLogSeparatorStyles: types.IRunnerLogSeparatorStyle;\n  authorStoryOptionStyles: types.ITextStyle;\n  authorStoryOptionHighlightStyles: types.ITextStyle;\n  authorStoryOutputStyles: types.ITextStyle;\n  authorStoryRunnerOptions: types.IAuthorRunnerOptions;\n  authorStoryRunnerStyles: types.IRunnerStyle;\n  authorStoryStrings: types.IAuthorRunnerStrings;\n}\n\nexport const authorStorySettings = combineReducers({\n  authorStoryInputStyles,\n  authorStoryLogSeparatorStyles,\n  authorStoryOptionStyles,\n  authorStoryOptionHighlightStyles,\n  authorStoryOutputStyles,\n  authorStoryRunnerOptions,\n  authorStoryRunnerStyles,\n  authorStoryStrings,\n});\n"],"sourceRoot":""}