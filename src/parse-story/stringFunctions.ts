export enum unicodeStyles {
  regular,
  smallCaps,
  script,
  boldScript,
  fraktur,
  boldFraktur,
  doubleStruck,
  gothic,
  narrow,
  pre,
  boxed,
  circled,
  boxedFill,
  oldItalic,
}

const unicodeSeparatorRegex = /./gu;

const unicodeLetterStylesIndex = {
  [unicodeStyles.regular]: 0,
  [unicodeStyles.smallCaps]: 1,
  [unicodeStyles.script]: 2,
  [unicodeStyles.boldScript]: 3,
  [unicodeStyles.fraktur]: 4,
  [unicodeStyles.boldFraktur]: 5,
  [unicodeStyles.doubleStruck]: 6,
  [unicodeStyles.gothic]: 7,
  [unicodeStyles.narrow]: 8,
  [unicodeStyles.pre]: 9,
  [unicodeStyles.boxed]: 10,
  [unicodeStyles.circled]: 11,
  [unicodeStyles.boxedFill]: 12,
  [unicodeStyles.oldItalic]: 13,
};

const unicodeNumberStylesIndex: { [key: string]: number } = {
  [`d${unicodeStyles.regular}`]: 0,
  [`d${unicodeStyles.doubleStruck}`]: 1,
  [`d${unicodeStyles.narrow}`]: 2,
  [`d${unicodeStyles.pre}`]: 3,
};

const fontStyles: { [key: string]: string } = {
  A: "A🇦𝒜𝓐𝔄𝕬𝔸𐌰𝖠𝙰🄰🅐🅰𐌀",
  B: "B🇧ℬ𝓑𝔅𝕭𝔹𐌱𝖡𝙱🄱🅑🅱𐌁",
  C: "C🇨𝒞𝓒ℭ𝕮ℂ𑀝𝖢𝙲🄲🅒🅲𐌂",
  D: "D🇩𝒟𝓓𝔇𝕯𝔻Ɗ𝖣𝙳🄳🅓🅳𑀥",
  E: "E🇪ℰ𝓔𝔈𝕰𝔼𐌴𝖤𝙴🄴🅔🅴𐌄",
  F: "F🇫ℱ𝓕𝔉𝕱𝔽𐍆𝖥𝙵🄵🅕🅵𐌅",
  G: "G🇬𝒢𝓖𝔊𝕲𝔾𐌾𝖦𝙶🄶🅖🅶𑁟",
  H: "H🇭ℋ𝓗ℌ𝕳ℍ𐌷𝖧𝙷🄷🅗🅷𑀅",
  I: "I🇮ℐ𝓘ℑ𝕴𝕀𐌹𝖨𝙸🄸🅘🅸𐌆",
  J: "J🇯𝒥𝓙𝔍𝕵𝕁𐌳𝖩𝙹🄹🅙🅹𑀮",
  K: "K🇰𝒦𝓚𝔎𝕶𝕂Ƙ𝖪𝙺🄺🅚🅺𐌊",
  L: "L🇱ℒ𝓛𝔏𝕷𝕃𑀧𝖫𝙻🄻🅛🅻𐌋",
  M: "M🇲ℳ𝓜𝔐𝕸𝕄𐌼𝖬𝙼🄼🅜🅼𐌌",
  N: "N🇳𝒩𝓝𝔑𝕹ℕ𐌽𝖭𝙽🄽🅝🅽𐌍",
  O: "O🇴𝒪𝓞𝔒𝕺𝕆𐍈𝖮𝙾🄾🅞🅾𐌏",
  P: "P🇵𝒫𝓟𝔓𝕻ℙǷ𝖯𝙿🄿🅟🅿𐌓",
  Q: "Q🇶𝒬𝓠𝔔𝕼ℚ𐍉𝖰𝚀🅀🅠🆀𐌒",
  R: "R🇷ℛ𝓡ℜ𝕽ℝ𐍂𝖱𝚁🅁🅡🆁𐌐",
  S: "S🇸𝒮𝓢𝔖𝕾𝕊𐍃𝖲𝚂🅂🅢🆂𐌔",
  T: "T🇹𝒯𝓣𝔗𝕿𝕋𐍄𝖳𝚃🅃🅣🆃𐌕",
  U: "U🇺𝒰𝓤𝔘𝖀𝕌𐌵𝖴𝚄🅄🅤🆄𐓎",
  V: "V🇻𝒱𝓥𝔙𝖁𝕍𐦦𝖵𝚅🅅🅥🆅𐰟",
  W: "W🇼𝒲𝓦𝔚𝖂𝕎𐌸𝖶𝚆🅆🅦🆆𐐎",
  X: "X🇽𝒳𝓧𝔛𝖃𝕏𐍇𝖷𝚇🅇🅧🆇𐌗",
  Y: "Y🇾𝒴𝓨𝔜𝖄𝕐𐍅𝖸𝚈🅈🅨🆈𐌖",
  Z: "Z🇿𝒵𝓩ℨ𝖅ℤ𐌶𝖹𝚉🅉🅩🆉𐓓",
  a: "a🇦𝒶𝓪𝔞𝖆𝕒𐌰𝖺𝚊🄰🅐🅰𐌀",
  b: "b🇧𝒷𝓫𝔟𝖇𝕓𐌱𝖻𝚋🄱🅑🅱𐌁",
  c: "c🇨𝒸𝓬𝔠𝖈𝕔𑀝𝖼𝚌🄲🅒🅲𐌂",
  d: "d🇩𝒹𝓭𝔡𝖉𝕕Ɗ𝖽𝚍🄳🅓🅳𑀥",
  e: "e🇪ℯ𝓮𝔢𝖊𝕖𐌴𝖾𝚎🄴🅔🅴𐌄",
  f: "f🇫𝒻𝓯𝔣𝖋𝕗𐍆𝖿𝚏🄵🅕🅵𐌅",
  g: "g🇬ℊ𝓰𝔤𝖌𝕘𐌾𝗀𝚐🄶🅖🅶𑁟",
  h: "h🇭𝒽𝓱𝔥𝖍𝕙𐌷𝗁𝚑🄷🅗🅷𑀅",
  i: "i🇮𝒾𝓲𝔦𝖎𝕚𐌹𝗂𝚒🄸🅘🅸𐌆",
  j: "j🇯𝒿𝓳𝔧𝖏𝕛𐌳𝗃𝚓🄹🅙🅹𑀮",
  k: "k🇰𝓀𝓴𝔨𝖐𝕜Ƙ𝗄𝚔🄺🅚🅺𐌊",
  l: "l🇱𝓁𝓵𝔩𝖑𝕝𑀧𝗅𝚕🄻🅛🅻𐌋",
  m: "m🇲𝓂𝓶𝔪𝖒𝕞𐌼𝗆𝚖🄼🅜🅼𐌌",
  n: "n🇳𝓃𝓷𝔫𝖓𝕟𐌽𝗇𝚗🄽🅝🅽𐌍",
  o: "o🇴ℴ𝓸𝔬𝖔𝕠𐍈𝗈𝚘🄾🅞🅾𐌏",
  p: "p🇵𝓅𝓹𝔭𝖕𝕡Ƿ𝗉𝚙🄿🅟🅿𐌓",
  q: "q🇶𝓆𝓺𝔮𝖖𝕢𐍉𝗊𝚚🅀🅠🆀𐌒",
  r: "r🇷𝓇𝓻𝔯𝖗𝕣𐍂𝗋𝚛🅁🅡🆁𐌐",
  s: "s🇸𝓈𝓼𝔰𝖘𝕤𐍃𝗌𝚜🅂🅢🆂𐌔",
  t: "t🇹𝓉𝓽𝔱𝖙𝕥𐍄𝗍𝚝🅃🅣🆃𐌕",
  u: "u🇺𝓊𝓾𝔲𝖚𝕦𐌵𝗎𝚞🅄🅤🆄𐓎",
  v: "v🇻𝓋𝓿𝔳𝖛𝕧𐦦𝗏𝚟🅅🅥🆅𐰟",
  w: "w🇼𝓌𝔀𝔴𝖜𝕨𐌸𝗐𝚠🅆🅦🆆𐐎",
  x: "x🇽𝓍𝔁𝔵𝖝𝕩𐍇𝗑𝚡🅇🅧🆇𐌗",
  y: "y🇾𝓎𝔂𝔶𝖞𝕪𐍅𝗒𝚢🅈🅨🆈𐌖",
  z: "z🇿𝓏𝔃𝔷𝖟𝕫𐌶𝗓𝚣🅉🅩🆉𐓓",
  d0: "0𝟘𝟢𝟶",
  d1: "1𝟙𝟣𝟷",
  d2: "2𝟚𝟤𝟸",
  d3: "3𝟛𝟥𝟹",
  d4: "4𝟜𝟦𝟺",
  d5: "5𝟝𝟧𝟻",
  d6: "6𝟞𝟨𝟼",
  d7: "7𝟟𝟩𝟽",
  d8: "8𝟠𝟪𝟾",
  d9: "9𝟡𝟫𝟿",
};

const fontStylesReversed: { [key: string]: string } = {
  "A": "A",
  "🇦": "A",
  "𝒜": "A",
  "𝓐": "A",
  "𝔄": "A",
  "𝕬": "A",
  "𝔸": "A",
  "𐌰": "A",
  "𝖠": "A",
  "𝙰": "A",
  "🄰": "A",
  "🅐": "A",
  "🅰": "A",
  "𐌀": "A",
  "B": "B",
  "🇧": "B",
  "ℬ": "B",
  "𝓑": "B",
  "𝔅": "B",
  "𝕭": "B",
  "𝔹": "B",
  "𐌱": "B",
  "𝖡": "B",
  "𝙱": "B",
  "🄱": "B",
  "🅑": "B",
  "🅱": "B",
  "𐌁": "B",
  "C": "C",
  "🇨": "C",
  "𝒞": "C",
  "𝓒": "C",
  "ℭ": "C",
  "𝕮": "C",
  "ℂ": "C",
  "𑀝": "C",
  "𝖢": "C",
  "𝙲": "C",
  "🄲": "C",
  "🅒": "C",
  "🅲": "C",
  "𐌂": "C",
  "D": "D",
  "🇩": "D",
  "𝒟": "D",
  "𝓓": "D",
  "𝔇": "D",
  "𝕯": "D",
  "𝔻": "D",
  "Ɗ": "D",
  "𝖣": "D",
  "𝙳": "D",
  "🄳": "D",
  "🅓": "D",
  "🅳": "D",
  "𑀥": "D",
  "E": "E",
  "🇪": "E",
  "ℰ": "E",
  "𝓔": "E",
  "𝔈": "E",
  "𝕰": "E",
  "𝔼": "E",
  "𐌴": "E",
  "𝖤": "E",
  "𝙴": "E",
  "🄴": "E",
  "🅔": "E",
  "🅴": "E",
  "𐌄": "E",
  "F": "F",
  "🇫": "F",
  "ℱ": "F",
  "𝓕": "F",
  "𝔉": "F",
  "𝕱": "F",
  "𝔽": "F",
  "𐍆": "F",
  "𝖥": "F",
  "𝙵": "F",
  "🄵": "F",
  "🅕": "F",
  "🅵": "F",
  "𐌅": "F",
  "G": "G",
  "🇬": "G",
  "𝒢": "G",
  "𝓖": "G",
  "𝔊": "G",
  "𝕲": "G",
  "𝔾": "G",
  "𐌾": "G",
  "𝖦": "G",
  "𝙶": "G",
  "🄶": "G",
  "🅖": "G",
  "🅶": "G",
  "𑁟": "G",
  "H": "H",
  "🇭": "H",
  "ℋ": "H",
  "𝓗": "H",
  "ℌ": "H",
  "𝕳": "H",
  "ℍ": "H",
  "𐌷": "H",
  "𝖧": "H",
  "𝙷": "H",
  "🄷": "H",
  "🅗": "H",
  "🅷": "H",
  "𑀅": "H",
  "I": "I",
  "🇮": "I",
  "ℐ": "I",
  "𝓘": "I",
  "ℑ": "I",
  "𝕴": "I",
  "𝕀": "I",
  "𐌹": "I",
  "𝖨": "I",
  "𝙸": "I",
  "🄸": "I",
  "🅘": "I",
  "🅸": "I",
  "𐌆": "I",
  "J": "J",
  "🇯": "J",
  "𝒥": "J",
  "𝓙": "J",
  "𝔍": "J",
  "𝕵": "J",
  "𝕁": "J",
  "𐌳": "J",
  "𝖩": "J",
  "𝙹": "J",
  "🄹": "J",
  "🅙": "J",
  "🅹": "J",
  "𑀮": "J",
  "K": "K",
  "🇰": "K",
  "𝒦": "K",
  "𝓚": "K",
  "𝔎": "K",
  "𝕶": "K",
  "𝕂": "K",
  "Ƙ": "K",
  "𝖪": "K",
  "𝙺": "K",
  "🄺": "K",
  "🅚": "K",
  "🅺": "K",
  "𐌊": "K",
  "L": "L",
  "🇱": "L",
  "ℒ": "L",
  "𝓛": "L",
  "𝔏": "L",
  "𝕷": "L",
  "𝕃": "L",
  "𑀧": "L",
  "𝖫": "L",
  "𝙻": "L",
  "🄻": "L",
  "🅛": "L",
  "🅻": "L",
  "𐌋": "L",
  "M": "M",
  "🇲": "M",
  "ℳ": "M",
  "𝓜": "M",
  "𝔐": "M",
  "𝕸": "M",
  "𝕄": "M",
  "𐌼": "M",
  "𝖬": "M",
  "𝙼": "M",
  "🄼": "M",
  "🅜": "M",
  "🅼": "M",
  "𐌌": "M",
  "N": "N",
  "🇳": "N",
  "𝒩": "N",
  "𝓝": "N",
  "𝔑": "N",
  "𝕹": "N",
  "ℕ": "N",
  "𐌽": "N",
  "𝖭": "N",
  "𝙽": "N",
  "🄽": "N",
  "🅝": "N",
  "🅽": "N",
  "𐌍": "N",
  "O": "O",
  "🇴": "O",
  "𝒪": "O",
  "𝓞": "O",
  "𝔒": "O",
  "𝕺": "O",
  "𝕆": "O",
  "𐍈": "O",
  "𝖮": "O",
  "𝙾": "O",
  "🄾": "O",
  "🅞": "O",
  "🅾": "O",
  "𐌏": "O",
  "P": "P",
  "🇵": "P",
  "𝒫": "P",
  "𝓟": "P",
  "𝔓": "P",
  "𝕻": "P",
  "ℙ": "P",
  "Ƿ": "P",
  "𝖯": "P",
  "𝙿": "P",
  "🄿": "P",
  "🅟": "P",
  "🅿": "P",
  "𐌓": "P",
  "Q": "Q",
  "🇶": "Q",
  "𝒬": "Q",
  "𝓠": "Q",
  "𝔔": "Q",
  "𝕼": "Q",
  "ℚ": "Q",
  "𐍉": "Q",
  "𝖰": "Q",
  "𝚀": "Q",
  "🅀": "Q",
  "🅠": "Q",
  "🆀": "Q",
  "𐌒": "Q",
  "R": "R",
  "🇷": "R",
  "ℛ": "R",
  "𝓡": "R",
  "ℜ": "R",
  "𝕽": "R",
  "ℝ": "R",
  "𐍂": "R",
  "𝖱": "R",
  "𝚁": "R",
  "🅁": "R",
  "🅡": "R",
  "🆁": "R",
  "𐌐": "R",
  "S": "S",
  "🇸": "S",
  "𝒮": "S",
  "𝓢": "S",
  "𝔖": "S",
  "𝕾": "S",
  "𝕊": "S",
  "𐍃": "S",
  "𝖲": "S",
  "𝚂": "S",
  "🅂": "S",
  "🅢": "S",
  "🆂": "S",
  "𐌔": "S",
  "T": "T",
  "🇹": "T",
  "𝒯": "T",
  "𝓣": "T",
  "𝔗": "T",
  "𝕿": "T",
  "𝕋": "T",
  "𐍄": "T",
  "𝖳": "T",
  "𝚃": "T",
  "🅃": "T",
  "🅣": "T",
  "🆃": "T",
  "𐌕": "T",
  "U": "U",
  "🇺": "U",
  "𝒰": "U",
  "𝓤": "U",
  "𝔘": "U",
  "𝖀": "U",
  "𝕌": "U",
  "𐌵": "U",
  "𝖴": "U",
  "𝚄": "U",
  "🅄": "U",
  "🅤": "U",
  "🆄": "U",
  "𐓎": "U",
  "V": "V",
  "🇻": "V",
  "𝒱": "V",
  "𝓥": "V",
  "𝔙": "V",
  "𝖁": "V",
  "𝕍": "V",
  "𐦦": "V",
  "𝖵": "V",
  "𝚅": "V",
  "🅅": "V",
  "🅥": "V",
  "🆅": "V",
  "𐰟": "V",
  "W": "W",
  "🇼": "W",
  "𝒲": "W",
  "𝓦": "W",
  "𝔚": "W",
  "𝖂": "W",
  "𝕎": "W",
  "𐌸": "W",
  "𝖶": "W",
  "𝚆": "W",
  "🅆": "W",
  "🅦": "W",
  "🆆": "W",
  "𐐎": "W",
  "X": "X",
  "🇽": "X",
  "𝒳": "X",
  "𝓧": "X",
  "𝔛": "X",
  "𝖃": "X",
  "𝕏": "X",
  "𐍇": "X",
  "𝖷": "X",
  "𝚇": "X",
  "🅇": "X",
  "🅧": "X",
  "🆇": "X",
  "𐌗": "X",
  "Y": "Y",
  "🇾": "Y",
  "𝒴": "Y",
  "𝓨": "Y",
  "𝔜": "Y",
  "𝖄": "Y",
  "𝕐": "Y",
  "𐍅": "Y",
  "𝖸": "Y",
  "𝚈": "Y",
  "🅈": "Y",
  "🅨": "Y",
  "🆈": "Y",
  "𐌖": "Y",
  "Z": "Z",
  "🇿": "Z",
  "𝒵": "Z",
  "𝓩": "Z",
  "ℨ": "Z",
  "𝖅": "Z",
  "ℤ": "Z",
  "𐌶": "Z",
  "𝖹": "Z",
  "𝚉": "Z",
  "🅉": "Z",
  "🅩": "Z",
  "🆉": "Z",
  "𐓓": "Z",
  "a": "a",
  "𝒶": "a",
  "𝓪": "a",
  "𝔞": "a",
  "𝖆": "a",
  "𝕒": "a",
  "𝖺": "a",
  "𝚊": "a",
  "b": "b",
  "𝒷": "b",
  "𝓫": "b",
  "𝔟": "b",
  "𝖇": "b",
  "𝕓": "b",
  "𝖻": "b",
  "𝚋": "b",
  "c": "c",
  "𝒸": "c",
  "𝓬": "c",
  "𝔠": "c",
  "𝖈": "c",
  "𝕔": "c",
  "𝖼": "c",
  "𝚌": "c",
  "d": "d",
  "𝒹": "d",
  "𝓭": "d",
  "𝔡": "d",
  "𝖉": "d",
  "𝕕": "d",
  "𝖽": "d",
  "𝚍": "d",
  "e": "e",
  "ℯ": "e",
  "𝓮": "e",
  "𝔢": "e",
  "𝖊": "e",
  "𝕖": "e",
  "𝖾": "e",
  "𝚎": "e",
  "f": "f",
  "𝒻": "f",
  "𝓯": "f",
  "𝔣": "f",
  "𝖋": "f",
  "𝕗": "f",
  "𝖿": "f",
  "𝚏": "f",
  "g": "g",
  "ℊ": "g",
  "𝓰": "g",
  "𝔤": "g",
  "𝖌": "g",
  "𝕘": "g",
  "𝗀": "g",
  "𝚐": "g",
  "h": "h",
  "𝒽": "h",
  "𝓱": "h",
  "𝔥": "h",
  "𝖍": "h",
  "𝕙": "h",
  "𝗁": "h",
  "𝚑": "h",
  "i": "i",
  "𝒾": "i",
  "𝓲": "i",
  "𝔦": "i",
  "𝖎": "i",
  "𝕚": "i",
  "𝗂": "i",
  "𝚒": "i",
  "j": "j",
  "𝒿": "j",
  "𝓳": "j",
  "𝔧": "j",
  "𝖏": "j",
  "𝕛": "j",
  "𝗃": "j",
  "𝚓": "j",
  "k": "k",
  "𝓀": "k",
  "𝓴": "k",
  "𝔨": "k",
  "𝖐": "k",
  "𝕜": "k",
  "𝗄": "k",
  "𝚔": "k",
  "l": "l",
  "𝓁": "l",
  "𝓵": "l",
  "𝔩": "l",
  "𝖑": "l",
  "𝕝": "l",
  "𝗅": "l",
  "𝚕": "l",
  "m": "m",
  "𝓂": "m",
  "𝓶": "m",
  "𝔪": "m",
  "𝖒": "m",
  "𝕞": "m",
  "𝗆": "m",
  "𝚖": "m",
  "n": "n",
  "𝓃": "n",
  "𝓷": "n",
  "𝔫": "n",
  "𝖓": "n",
  "𝕟": "n",
  "𝗇": "n",
  "𝚗": "n",
  "o": "o",
  "ℴ": "o",
  "𝓸": "o",
  "𝔬": "o",
  "𝖔": "o",
  "𝕠": "o",
  "𝗈": "o",
  "𝚘": "o",
  "p": "p",
  "𝓅": "p",
  "𝓹": "p",
  "𝔭": "p",
  "𝖕": "p",
  "𝕡": "p",
  "𝗉": "p",
  "𝚙": "p",
  "q": "q",
  "𝓆": "q",
  "𝓺": "q",
  "𝔮": "q",
  "𝖖": "q",
  "𝕢": "q",
  "𝗊": "q",
  "𝚚": "q",
  "r": "r",
  "𝓇": "r",
  "𝓻": "r",
  "𝔯": "r",
  "𝖗": "r",
  "𝕣": "r",
  "𝗋": "r",
  "𝚛": "r",
  "s": "s",
  "𝓈": "s",
  "𝓼": "s",
  "𝔰": "s",
  "𝖘": "s",
  "𝕤": "s",
  "𝗌": "s",
  "𝚜": "s",
  "t": "t",
  "𝓉": "t",
  "𝓽": "t",
  "𝔱": "t",
  "𝖙": "t",
  "𝕥": "t",
  "𝗍": "t",
  "𝚝": "t",
  "u": "u",
  "𝓊": "u",
  "𝓾": "u",
  "𝔲": "u",
  "𝖚": "u",
  "𝕦": "u",
  "𝗎": "u",
  "𝚞": "u",
  "v": "v",
  "𝓋": "v",
  "𝓿": "v",
  "𝔳": "v",
  "𝖛": "v",
  "𝕧": "v",
  "𝗏": "v",
  "𝚟": "v",
  "w": "w",
  "𝓌": "w",
  "𝔀": "w",
  "𝔴": "w",
  "𝖜": "w",
  "𝕨": "w",
  "𝗐": "w",
  "𝚠": "w",
  "x": "x",
  "𝓍": "x",
  "𝔁": "x",
  "𝔵": "x",
  "𝖝": "x",
  "𝕩": "x",
  "𝗑": "x",
  "𝚡": "x",
  "y": "y",
  "𝓎": "y",
  "𝔂": "y",
  "𝔶": "y",
  "𝖞": "y",
  "𝕪": "y",
  "𝗒": "y",
  "𝚢": "y",
  "z": "z",
  "𝓏": "z",
  "𝔃": "z",
  "𝔷": "z",
  "𝖟": "z",
  "𝕫": "z",
  "𝗓": "z",
  "𝚣": "z",
  "d0": "0",
  "d𝟘": "0",
  "d𝟢": "0",
  "d𝟶": "0",
  "d1": "1",
  "d𝟙": "1",
  "d𝟣": "1",
  "d𝟷": "1",
  "d2": "2",
  "d𝟚": "2",
  "d𝟤": "2",
  "d𝟸": "2",
  "d3": "3",
  "d𝟛": "3",
  "d𝟥": "3",
  "d𝟹": "3",
  "d4": "4",
  "d𝟜": "4",
  "d𝟦": "4",
  "d𝟺": "4",
  "d5": "5",
  "d𝟝": "5",
  "d𝟧": "5",
  "d𝟻": "5",
  "d6": "6",
  "d𝟞": "6",
  "d𝟨": "6",
  "d𝟼": "6",
  "d7": "7",
  "d𝟟": "7",
  "d𝟩": "7",
  "d𝟽": "7",
  "d8": "8",
  "d𝟠": "8",
  "d𝟪": "8",
  "d𝟾": "8",
  "dd9": "9",
  "d𝟡": "9",
  "d𝟫": "9",
  "d𝟿": "9",
};

/**
 * Converts the chosen text to a specific unicode font style.
 * This cannot convert between styles.
 */
export const convertToUnicodeStyle = (text: string, style: unicodeStyles) => {
  let resultText = "";

  for (const symbol of text) {
    // Appends the converted letter according to the chosen style.
    if (fontStyles[symbol]) {
      const symbols = fontStyles[symbol].match(unicodeSeparatorRegex)!;
      resultText += symbols[unicodeLetterStylesIndex[style]];
    }
    // Appends the converted number according to the chosen style (if defined).
    else if (fontStyles["d" + symbol]) {
      if (unicodeNumberStylesIndex["d" + style]) {
        const symbols = fontStyles["d" + symbol].match(unicodeSeparatorRegex)!;
        resultText += symbols[unicodeNumberStylesIndex["d" + style]];
      } else {
        resultText += symbol;
      }
    }
    // Append unconverted characters.
    else {
      resultText += symbol;
    }
  }

  return resultText;
};

/**
 * Converts the chosen styled text to the normal font style.
 * When a style is provided, converts to it at a slight speed cost.
 */
export const convertFromUnicodeStyle = (text: string, style: unicodeStyles) => {
  let resultText = "";

  for (const symbol of text) {
    // Appends the converted letter according to the chosen style.
    if (fontStylesReversed[symbol]) {
      let symbols = fontStylesReversed[symbol].match(unicodeSeparatorRegex)!;
      symbols = fontStyles[symbols[0]].match(unicodeSeparatorRegex)!;
      resultText += symbols[unicodeLetterStylesIndex[style]];
    }
    // Appends the converted number according to the chosen style (if defined).
    else if (fontStylesReversed["d" + symbol]) {
      if (unicodeNumberStylesIndex["d" + style]) {
        let symbols = fontStylesReversed["d" + symbol].match(unicodeSeparatorRegex)!;
        symbols = fontStyles["d" + symbols[0]].match(unicodeSeparatorRegex)!;
        resultText += symbols[unicodeNumberStylesIndex["d" + style]];
      } else {
        resultText += symbol;
      }
    }
    // Append unconverted characters.
    else {
      resultText += symbol;
    }
  }

  return style === unicodeStyles.regular ? resultText : convertToUnicodeStyle(resultText, style);
};

/** Returns a string with inverted casing to the original. */
export const invertCase = (input: string): string => {
  const lower = input.toLocaleLowerCase();
  const upper = input.toLocaleUpperCase();

  let newString = "";

  for (let i = 0; i < input.length; i++) {
    if (input[i] !== lower[i]) {
      newString += lower[i];
    } else if (input[i] !== upper[i]) {
      newString += upper[i];
    } else {
      newString += input[i];
    }
  }

  return newString;
};
